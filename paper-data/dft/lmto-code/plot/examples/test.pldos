#!/bin/tcsh -f

# This shell script tests the functioning of program pldos

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias runjob 'set retcall = \!\!:1; set outfile = \!\!:2 ; set callarg = \!\!:3 ; goto runjob'
alias runrdcmd 'set retcall = \!\!:1; set rdcmdfmt = \!\!:2 ; set outfile = \!\!:3 ; set callarg = \!\!:4 ; goto runrdcmd'
alias findcmd  'set retcall = \!\!:1 ; set prog_cmd = \!\!:2 ; set path_name = \!\!:3 ; set make_path = \!\!:4 ; goto findcmd'
alias compare_res 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set refvar = \!\!:4 ; set tol = \!\!:5 ; set passvar = \!\!:6 ; goto compare_res'
alias compare_res_0 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set tol = \!\!:4 ; set passvar = \!\!:5 ; goto compare_res_0'
alias cnvt_d_fmt  'set retcall = \!\!:1; set testvar = \!\!:2 ; set testval = \!\!:3 ; goto cnvt_d_fmt'
alias query 'set retcall = \!\!:1 ; set retcall2 = \!\!:2 ; set callarg = \!\!:3 ; goto query'

set a
set slow
set testfile = $0
set testdir = $testfile:h
set etcdir  = `cd $testdir/../etc; pwd`
set topdir  = `cd $testdir/..; pwd`
set zdiff   = $etcdir/zdiff
set space = '        '
set failed = 0

# Prepend current working-directory, top-level dir and maindir to path
set path = (. $topdir $topdir/utils $path)

# --- Pick off switches ---
while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")

  set arg1 = $1; shift
  if ($?verb) echo test.lm: parsing switch $arg1
  switch ($arg1)
    case "--quiet":
      set quiet
      unset slow
      breaksw
    case "--add0":
      set ladd0
      breaksw
    case "--downfold":
      set downfold
      breaksw
    case "--no-iact*":
      unset slow
      breaksw
    case "--verb*":
      set verb = 1
      breaksw
    case "--all":
      breaksw
    default:
      echo unrecognized switch $arg1
      echo 'usage: test.pldos [switches] [test-list]'
      echo '       test-list is a list of test cases, e.g., run tests 1 and 2 with'
      echo '       "test.pldos 1 2"'
      echo '       switches:'
      echo '       --no-iactive runs tests without prompting user'
      echo '       --quiet runs tests without prompting user'
      echo '       --verbose    script prints out extra information'
      exit -1
  endsw

end

set joblist = ($argv)
if ($#joblist == 0 ) set joblist = (1 2 3 4 5 6 7)

if (! $?quiet) then
  echo " "
  echo "$space test.pldos:  tests program pldos"
endif

echo $joblist | grep 1 >/dev/null
if ($status) goto chk1e
cat <<EOF

         --- Test 1.  Direct generation of postscript file ---
         Illustrates and checks functioning of pldos, reading dos
         of Cr in 'standard format' (see dos.cr).
         In this mode, pldos makes a postscript file directly.

         See examples/README to see how to go through this same
         example interactively.

EOF
call query chk11 'run this test'
chk11:
set pass
if ($a == "s") goto chk1e

# ... Look for executables
findcmd chk11a pldos "$path" "$topdir"
chk11a:

# ... Assign output file names
set refout=$testdir/out.pldos.cr testout=out.pldos
set refps=$testdir/dos.cr.ps testps=fplot.ps
ln -s -f $testdir/dos.cr ./dos.cr

cat <<END

         ... Executing the following command:
         echo 40 7 / | pldos -lst='1;2;3;' dos.cr >$testout
END
         echo 40 7 / | pldos -lst='1;2;3;' dos.cr >$testout



call zdiffiles chk13 "xxx 1 $testout $refout"
chk13:

echo -n "$space ... files $testps identical to $refps? ... "
$zdiff $testps $refps >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
 echo -n 'no ... differences fewer than 1%? ...'
 set ndiff = `$zdiff $testps $refps | grep -v -E '^[0-9]' | grep -v -E '^---' | wc | awk '{print $1/2}'`
 set ntot = `wc $testps | awk '{print $1}'`
 if (`echo ' ' | awk -v ndiff=$ndiff -v ntot=$ntot '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($ndiff difference(s) of $ntot)"
 else
    echo no "($ndiff difference(s) of $ntot)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 1 PASSED"
else
    echo "$space test 1 FAILED"
    set failed = ($failed 1)
endif
chk1e:

echo $joblist | grep 2 >/dev/null
if ($status) goto chk2e
cat <<EOF

         --- Test 2.  Use pldos to generate an fplot command ---
         Illustrates and checks functioning of pldos, reading dos
         of Cr in 'standard format' (see dos.cr).
         See examples/README to see how to go through this same
         example interactively.

         In this mode, pldos creates an fplot command suitable for
         plotting of the dos (file plot.dos) and a corresponding
         data file (files dosp.dat)

         This test only checks that these files are are made correctly.
         To create a postscript file, invoke fplot after this test completes:
           fplot -f plot.plbnds

EOF
call query chk21 'run this test'
chk21:
set pass
if ($a == "s") goto chk2e

# ... Look for executables
findcmd chk21a pldos "$path" "$topdir"
chk21a:

# ... Assign output file names
set refout=$testdir/out.pldos.fplot.cr testout=out.pldos
set refps=$testdir/plot.dos testps=plot.dos
ln -s -f $testdir/dos.cr ./dos.cr

cat <<END

         ... Executing the following command:
         echo 19.99 7 / | pldos -fplot~dmin=3 -lst='1;2;3' -esclxy=2 dos.cr
END
         echo 19.99 7 / | pldos -fplot~dmin=3 -lst='1;2;3' -esclxy=2 dos.cr

call zdiffiles chk23 "xxx 1 $testout $refout"
chk23:

echo -n "$space ... files $testps identical to $refps? ... "
$zdiff $testps $refps >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
 echo -n 'no ... differences fewer than 1%? ...'
 set ndiff = `$zdiff $testps $refps | grep -v -E '^[0-9]' | grep -v -E '^---' | wc | awk '{print $1/2}'`
 set ntot = `wc $testps | awk '{print $1}'`
 if (`echo ' ' | awk -v ndiff=$ndiff -v ntot=$ntot '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($ndiff difference(s) of $ntot)"
 else
    echo no "($ndiff difference(s) of $ntot)"
    unset pass
  endif
endif

set refps=$testdir/dosp.dat testps=dosp.dat
echo -n "$space ... files $testps identical to $refps? ... "
$zdiff $testps $refps >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
 echo -n 'no ... differences fewer than 1%? ...'
 set ndiff = `cmp -l $testps $refps | wc | awk '{print $1}'`
 set ntot = `wc $refps | awk '{print $3}'`
 if (`echo ' ' | awk -v ndiff=$ndiff -v ntot=$ntot '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($ndiff difference(s) of $ntot)"
 else
    echo no "($ndiff difference(s) of $ntot)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 2 PASSED"
else
    echo "$space test 2 FAILED"
    set failed = ($failed 2)
endif
chk2e:

echo ' '
if ($#failed <= 1) then
    echo "$space $testfile : all tests PASSED"
    echo " "
    exit 0
else
    shift failed
    echo "$space $testfile : These tests FAILED:" $failed
    echo " "
    exit -1
endif

# ---------------- showout --------------
exit
showout:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo ' '
  echo "$space Compare $callarg to line in file $refout":
  grep $callarg $testout
  gunzip -c $refout | grep $callarg
  goto $quitjob

# ---------------- cnvt_d_fmt --------------
# converts exponential format #.##D## or #.##d## to #.##E##
# usage: cnvt_d_fmt retcall testvar testval
exit
cnvt_d_fmt:
  set quitjob = $retcall
  set $testvar = `echo $testval | sed s/D/E/ | sed s/d/E/`
  goto $quitjob

# ---------------- zdiffiles --------------
# calling argument should consist of four strings:
# 1st string = string that terminates zdiff
# 2nd string = integer that counts how many times terminator should occur before terminating
#              -1 -> last occurence
# 3nd string = first file name
# 4th string = second file name
# example: call zdiffiles chk69 "CPU 3 $testout $refout"
exit
zdiffiles:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  set files = ($callarg)
  set endstr = $files[1]
  shift files
  set nend = $files[1]
  shift files
  if ($nend == "-1") then
    set nend = `grep "$endstr" $files[1] | wc | awk '{print $1}'`
  endif

#    echo zdifffiles : $quitjob $nend
#    grep $endstr $files[1]

  query zdiff11 $quitjob "compare these files : $files"
zdiff11:
  $zdiff $files | awk -v endstr="$endstr" -v nend=$nend -v endl=0 -v endr=0 '{if ($1 == "<" && endl < nend) print ; if ($1 == ">" && endr < nend) print ; if ($1 == ">" || $1 == "<" || endl >= nend && endr >= nend) ; else {print} ; if ($1 == "<" && $2 == endstr) {endl+=1}; if ($1 == ">" && $2 == endstr) {endr+=1};}' | head -50
  goto $quitjob

# ---------------- runjob --------------
exit
runjob:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space $callarg"
    echo " "
    $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      $callarg >> $appfile
      set retval = $status
    else
      echo "$space $callarg  > $outfile"
      $callarg > $outfile
      set retval = $status
  endif
  if ($retval != 0) goto cleanup
  goto $quitjob


# ---------------- runrdcmd --------------
exit
runrdcmd:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space Invoking rdcmd will execute the following job(s):"
    $rdcmd -f:$rdcmdfmt --n $callarg
    echo "$space $rdcmd '-f:rdcmd:%2f' $callarg"
                 $rdcmd '-f:rdcmd:%2f' $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      exit
#      $callarg >> $appfile
      set retval = $status
    else
      echo "$space Invoking rdcmd will execute the following job(s):"
      $rdcmd -f:$rdcmdfmt --n $callarg
      echo "$space $rdcmd '-f:#rdcmd:%2f' $callarg  >& $outfile"
                   $rdcmd '-f:rdcmd:%2f' $callarg >& $outfile
      set retval = $status
      if ($retval == 0) then
        echo "$space Job(s) completed successfully; output in $outfile"
      endif
    endif
  endif

  if ($retval == 0) then
    if ($?ladd0) then
      echo -n "         ..." ; $testdir/add0 $testout
    endif
    goto $quitjob
  else
    echo "$space ...oops... the following command returned with nonzero exit status:"
    echo -n "$space   "
    grep $rdcmd:t{:} $outfile | tail -1 | sed 's/rdcmd:  //'
    goto cleanup
  endif

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prog_cmd = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... executable $prog_cmd not found in path"
endif
if ($found == 'no' && $make_path != "no") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir $maindir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must create or put '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  Invoking '"make $prog_cmd"' in $make_path should create it."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

# ---------------- query --------------
exit
query:
  unset skip
  if ($?slow != 0) then
    echo "$space *hit <return> to $callarg, s <return> to skip it."
    set a = ($<)
    if ($a == "") goto $retcall
    switch ($a)
      case "quit":
      case "q":
      case "a":
        exit
      case "i":
        unset slow
        breaksw
      case "s":
        set skip
        breaksw
      case "t":
        time
        goto query
      default:
        echo 'q to quit; i unsets slow; s skips this job, t shows time'
        goto query
    endsw
  endif
  goto $retcall

# ---------------- cleanup --------------
exit
cleanup:
  if ($retval != 0) echo "$space"'*'"job $callarg[1] returned with error status $retval"
  if ($retval != 0) echo "$space unacceptable error status ... $testfile aborting"
  exit $retval
