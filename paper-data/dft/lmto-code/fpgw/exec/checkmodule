#!/usr/bin/python
# This routine checks module-dependency in fortran90 and compile them in right order.
#
import os
import sys
import string
import re

#---------------------
def connect(alist):
	result=''
	for lll in alist:
		result = result + ' ' + lll
	return result

tmp ='chekckmodule.tmp'
src  = connect(sys.argv[1:])
print '######### check module ############# '
#print '######### check module ############# src =', src
#os.system("make ")
zzz='grep -i --regexp="^\ *[Mm][Oo][Dd][Uu][Ll][Ee]" ' + src + ' >' + tmp
os.system(zzz)
#sys.exit()
oxx = open(tmp,'rt').read()
oxx = string.split(oxx,'\n')

Rule={}
for iline in oxx:
	if(len(iline)==0): continue
	modulef = string.replace(string.split(iline)[0],':','')
	print ' === Module', string.split(iline)[2],' is defined in ', modulef

	zzz= 'grep -i ' + string.split(iline)[2] + ' ' + src +'|grep -i use'
	os.system( zzz +' > ' + tmp)
	oww = string.split(open(tmp,'rt').read(),'\n')
	for ilinex in oww:	
		if(len(ilinex)==0): continue
		usef = string.split(string.replace(ilinex,':',' '))[0]
#		print  ' Rule   ', modulef,' < ',usef
		if(Rule.has_key(modulef) !=1):
			aaa=[]
			Rule[modulef]= aaa + [usef]
		elif(modulef != usef):
			aaa = Rule[modulef]
			Rule[modulef]= aaa + [usef]

####print ' --- Obtained Rules --- '
####for k in Rule.keys():
####	print k, '< ', Rule[k]
print '------------------------'

vvv=[]
for k in Rule.keys():
	vvv=vvv+Rule[k]
i=-1
RuleN={}
for f0 in Rule.keys():
	if(vvv.count(f0)>0): continue

	fin = f0
	for fout in Rule[fin]:
		if(fin==fout): continue
		print ' rule: ', fin,fout
		i=i+1
		RuleN[i]= [ fin,fout ]
		fin2 = fout
		if(Rule.has_key(fin2)):
			for fout2 in Rule[fin2]:
				if(fin2==fout2): continue
				nn=5
				print nn*" "+' rule: ', fin2,fout2
				i=i+1
				RuleN[i]=[fin2,fout2]


				fin3 = fout2
				if(Rule.has_key(fin3)):
					for fout3 in Rule[fin3]:
						if(fin3==fout3): continue
						nn=10
						print nn*" "+' rule: ', fin3,fout3
						i=i+1
						RuleN[i]=[fin3,fout3]

	
						fin4 = fout3
						if(Rule.has_key(fin4)):
							for fout4 in Rule[fin4]:
								if(fin4==fout4): continue
								nn=15
								print nn*" "+' rule: ', fin4,fout4
								i=i+1
								RuleN[i]=[fin4,fout4]
								

								fin5 = fout4
								if(Rule.has_key(fin5)):
									for fout5 in Rule[fin5]:
										nn=15
										if(fin5==fout5): continue
										print nn*" "+' rule: ', fin5,fout5
										i=i+1
										RuleN[i]=[fin5,fout5]


										fin6 = fout5
										if(Rule.has_key(fin6)):
											print 'Too deep dependency for checkmodule---modify check module!'

										
####for f0 in Rule.keys():
####	if(vvv.count(f0)>0): continue
####	os.system("make " + string.replace(f0,'.F','.o'))
aaa=''
for irule in range(len(RuleN)):
	f0 = RuleN[irule][0]
	f1 = RuleN[irule][1]
	f0o = re.sub('.F$','.o', RuleN[irule][0])
	f1o = re.sub('.F$','.o', RuleN[irule][1])
#	print ' Rule:  older;newer =', f0o,';',f1o
	aaa=aaa +f1o+':'+f0o+'\n'
oxx = open("moduledepends.inc",'wt')
oxx.write(aaa)

sys.exit()

#print '--------------------------------------'


######################################################
#### All files are compiled from .f to .o ############
######################################################
repeatmake=0
for irule in range(len(RuleN)):
	f0 = RuleN[irule][0]
	f1 = RuleN[irule][1]
	f0o = re.sub('.F$','.o', RuleN[irule][0])
	f1o = re.sub('.F$','.o', RuleN[irule][1])
	
#check 0	
	make0=0
	if(os.access(f0o,os.F_OK)==0 ): make0=1
	os.system('ls -rt '+ f0o +' '+ f0  +' > '+ tmp)
	occ = string.split(open(tmp,'rt').read())
	if(occ[0]== f0o):make0=1
	if(make0==1):
#		os.system("rm   "+ f0o )
#		os.system("make "+ f0o )
		repeatmake=1
#check 1	
	make1=0
	if(os.access(f1o,os.F_OK)==0 ): make1=1
	os.system('ls -rt '+ f1o +' '+ f1  +' > '+ tmp)
	occ = string.split(open(tmp,'rt').read())
	if(occ[0]== f1o):make1=1
	if(make1==1):
#		os.system("rm   "+ f1o )
#		os.system("make "+ f1o )
		repeatmake=1

#check f0o < f1o	
	print ' Rule:  older;newer =', f0o,';',f1o,
	os.system('ls -rt '+ f0o +' '+ f1o  +' > '+ tmp)
	occ = string.split(open(tmp,'rt').read())
#	print '                     ',occ[0],' is older now...',
#	print
	if(occ[0]== f1o):
		print '  ----> NO!',
		print ' goto make...'
#		os.system("rm   "+ f1o )
#		os.system("make "+ f1o )
		repeatmake=1
	else:
		print '\t--> YES!'
	

print '### end of checkmodule ###'
if(repeatmake==0): print '     OK! Right time-stamps for module dependency!'

if(repeatmake==1): print '     checkmodule found wrong order of compilation!'
if(repeatmake==1): print '     So checkmodule recompiled them!'
if(repeatmake==1): print ' ### Thus you have to repeat make! ###'
