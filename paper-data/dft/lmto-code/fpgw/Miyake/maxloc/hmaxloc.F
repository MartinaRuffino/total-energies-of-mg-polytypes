      program hmaxloc
c-------------------------------------------------------------
c construct maximally localized Wannier functions
c
c References
c [1] N. Marzari and D.Vanderbilt, PRB56,12847(1997)
c [2] I. Souza, N. Marzari and D.Vanderbilt, PRB65,035109(2001)
c
c mode 1:  determine parameters for uu-matrix
c mode 2:  main part
c    Step 1: choose Hilbert space  (Ref.[1])
c    Step 2: maximally localize Wannier functions (Ref.[2])
c    Step 3: construct effective Hamiltonian and interpolate bands (Ref.[1])
c
cm Aug 2007 Takashi Miyake, berry connection in Wannier gauge
c  May 2004 Takashi Miyake, from hwmat.f
c------------------------------------------------------------
      use m_readqg
      use m_readeigen,only: init_readeigen,init_readeigen2,readeval,
     & init_readeigen_phi_noeval,init_readeigen_mlw_noeval1d,init_readeigen_mlw_noeval
      use m_read_bzdata,ngrp2=>ngrp
      use m_genallcf_v3
      use keyvalue

      use mpi_mod

      implicit none

c------------------------------------
      real(8)    :: esmr2,shtw
      integer(4)::
     &   ixc,iopen,ifhbed, nprecb,mrecb,mrece,nlmtot,nqbzt, nband,
     &   ibas,ibasx,ngpmx,nxx,ngcmx,nbloch,ifqpnt,ifwd,ifbb,
     &   nprecx,mrecl,nblochpmx2,nwt,niwt, nqnum,mdimx,nblochpmx,
     &   ifrcw,ifrcwi,  noccxv,maxocc2,noccx,ifvcfpout,iqall,iaf,ntq,
     &   i,j,k,nspinmx, nq,is,ip,iq,idxk,ifoutsex,iclose,nq0i,ig,
     &   mxkp,nqibzxx,ntet,nene,iqi, ix,iw,
     &   nlnx4,niwx,irot,invr,invrot,ivsum, ifoutsec,ntqx,
     &    ifmlw(2),ifmlwe(2) !,ifcphi
     &   ,ifxc(2),ifsex(2), ifphiv(2),ifphic(2),ifec,ifexsp(2),
     &   ifsecomg(2),ifexx,ifwand,ndble=8
      real(8) :: pi,tpia,vol,voltot,rs,alpha,
     & qfermi,efx,valn,efnew,edummy,efz,qm,xsex,egex,
     & zfac1,zfac2,dscdw1,dscdw2,dscdw,zfac,ef2=1d99,exx,exxq,exxelgas
      logical lqall,laf

      integer(4),allocatable :: itq(:)
      real(8),allocatable    :: q(:,:)

c takao
      integer(4),allocatable :: ngvecpB(:,:,:),!ngveccB(:,:,:),
     &  ngvecp(:,:), ngvecc(:,:),iqib(:), !,ngpn(:)ngcni(:)
     &  kount(:,:), nx(:,:),nblocha(:),lx(:) !ngveccBr(:,:,:)
      real(8),allocatable:: vxcfp(:,:,:),
     &  wqt(:), wgt0(:,:),q0i(:,:),
     &  ppbrd (:,:,:,:,:,:,:),cgr(:,:,:,:),eqt(:),
     &  ppbrdx(:,:,:,:,:,:,:),aaa(:,:), !symope(:,:,:)=symgg, ! qibz(:,:),
     &  ppb(:), eq(:), !,pdb(:),dpb(:),ddb(:)
     &  eqx(:,:,:),eqx0(:,:,:),ekc(:),coh(:,:)
     &         , rw_w(:,:,:,:,:),cw_w(:,:,:,:,:),
     &           rw_iw(:,:,:,:,:),cw_iw(:,:,:,:,:)
      complex(8),allocatable:: geigB(:,:,:,:)
c
      logical :: screen, exchange, cohtest, legas, tote
      real(8) ::  rydberg,hartree
      real(8):: qreal(3), ntot,nocctotg2,tripl,xxx(3,3)
      logical ::nocore

c space group infermation
      integer(4),allocatable :: iclasst(:), invgx(:), miat(:,:)
      real(8),allocatable    :: tiat(:,:,:),shtvg(:,:)

c
      real(8),allocatable   :: eex1(:,:,:),exsp1(:,:,:),qqex1(:,:,:,:)
      integer(4),allocatable:: nspex(:,:),ieord(:),itex1(:,:,:)
      real(8)    :: qqex(1:3), eex,exsp,eee, exwgt,deltax0
      integer(4) :: itmx,ipex,itpex,itex,nspexmx,nnex,isig,iex,ifexspx
     & ,ifexspxx ,ifefsm, nq0ix,ifemesh,nz
      character(3)  :: charnum3,sss
      character(12) :: filenameex
      logical :: exspwrite=.false.
      character*8 xt


      integer(4)::nqbze,ini,nq0it,idummy
      real(8),allocatable:: qbze(:,:)

      real(8)   :: ebmx
      integer(4):: nbmx

      real(8):: volwgt

      integer(4)::nwin, incwfin
      real(8)::efin,ddw
      integer(4),allocatable::imdim(:)
      real(8),allocatable::freqx(:),freqw(:),wwx(:),expa(:)

      logical:: GaussSmear !readgwinput,
      integer(4)::ret
      character*(150):: ddd


      integer(4):: bzcase,  ngpn1,mrecg,verbose,ngcn1,nwxx
      real(8)   :: wgtq0p,quu(3)

      integer(4):: iii,isx,ivsumxxx

c for maxloc
      real(8)   :: wbb(12),wbbsum,bb(3,12),
     c             eomin,eomax,eimin,eimax,
     c             qwf0(3),dqwf0(3),qks(3),q0(3)
      complex(8),allocatable:: uumat(:,:,:,:),evecc(:,:),eveccs(:,:),
     c                         amnk(:,:,:),cnk(:,:,:),umnk(:,:,:)
      real(8),allocatable:: ku(:,:),kbu(:,:,:),eunk(:,:),eval(:),evals(:),
     c                      eks(:),rt(:,:),rt8(:,:,:),qbz0(:,:),r0g(:,:),
     c                      wphi(:,:)
      integer(4):: nbb,isc,nwf,ifmloc,ifq0p,
     c             nox,iko_ix,iko_fx,
     c             noxs(2),iko_ixs(2),iko_fxs(2),
     c             ieo_swt,iei_swt,itin_i,itin_f,itout_i,itout_f,nphix
      integer(4),allocatable:: ikbidx(:,:)
      integer(4),allocatable:: iki_i(:),iki_f(:),
     c                         ikbi_i(:,:),ikbi_f(:,:),
     c                         iko_i(:),iko_f(:),
     c                         ikbo_i(:,:),ikbo_f(:,:),
     c                         iphi(:,:),iphidot(:,:),
     c                         nphi(:)
      logical :: leout,lein,lq0p
      logical :: debug=.false.
c step 1
      complex(8),allocatable:: cnq0(:,:),
     c                         upu(:,:,:,:),cnk2(:,:,:),
     c                         zmn(:,:)
      complex(8):: ctmp
      real(8),allocatable:: omgik(:)
      real(8)   :: omgi,omgiold,conv1,alpha1,domgi
      integer(4):: nsc1,ndz,nin,ifhoev,ifuu0,ifpsig
c step 2
      complex(8),allocatable:: mmn(:,:,:,:),mmn0(:,:,:,:),
     c                         rmn(:,:),smn(:,:),amn(:,:),
     c                         tmn(:,:),dwmn(:,:)
      real(8),allocatable:: rn(:,:),qn(:)
      real(8)   :: omgd,omgod,omgdod,omgidod,omgdodold,domgdod,
     c             conv2,alpha2
      integer(4):: nsc2,ibb,ii,ij,ik
      logical :: lrmn,lmmn
c step 3
      complex(8),allocatable:: hrotk(:,:,:),hrotr(:,:,:),hrotkp(:,:)
     c                       , hrotkps(:,:)
      real(8):: e1,e2,rcut
      integer(4):: iband,ifbnd,iftb,ifsh,nsh,nsh1,nsh2
      logical :: lsh
      real(8),allocatable :: rws(:,:),drws(:)
      integer(4),allocatable:: irws(:)
      integer(4):: nrws
c---------------------------------------

      call mpi_start

      if(mpi_size > 1) then
         call mpi_end()
         stop "MPI not yet implemented"
      endif


      hartree=2d0*rydberg()

      iii=verbose()
      print *,' verbose=',iii

c mode switch. --------------
      write(6,*) ' --- Choose omodes below ----------------'
      write(6,*) '  bb vectors (1) or Wannier fn. (2) '
      write(6,*) ' --- Put number above ! -----------------'
      call readin5(ixc,nz,idummy)
      write(6,*) ' ixc=',ixc
      if(ixc==0) stop ' --- ixc=0 --- Choose computational mode!'

c---  readin BZDATA. See gwsrc/rwbzdata.f
c--------readin data set when you call read_BZDATA ---------------
c       integer(4)::ngrp,nqbz,nqibz,nqbzw,nteti,ntetf
ccccc    ! &   ,n_index_qbz
c       integer(4):: n1,n2,n3
c       real(8):: qbas(3,3),ginv(3,3),qbasmc(3,3)
c       real(8),allocatable:: qbz(:,:),wbz(:),qibz(:,:)
c     &    ,wibz(:),qbzw(:,:)
c       integer(4),allocatable:: idtetf(:,:),ib1bz(:),idteti(:,:)
c     &    ,nstar(:),irk(:,:),nstbz(:)          !,index_qbz(:,:,:)
c-----------------------------------------------------------------
      call read_BZDATA()
      print *,' nqbz  =',nqbz
c      print *,  qbz
      print *,' nqibz ngrp=',nqibz,ngrp2
c      print *,' irk=',irk
c      print *,' #### idtetf: ####'
c      print *, idtetf

c set up work array
c      call wkinit (iwksize)
      call pshprt(60)


C--- readin GWIN and LMTO, then allocate and set datas.
      nwin =-999    !not readin NW file
      efin =-999d0  !not readin EFERMI
c      efin = 0d0    !readin EFERMI
      incwfin= -1  !use 7th colmn for core at the end section of GWIN
      call genallcf_v3(nwin,efin,incwfin) !in module m_genallcf_v3
      if(ngrp/= ngrp2) stop 'ngrp inconsistent: BZDATA and LMTO GWIN_V2'
c---  These are allocated and setted.
c      integer(4)::  nclass,natom,nspin,nl,nn,nnv,nnc, ngrp,
c     o  nlmto,nlnx,nlnxv,nlnxc,nlnmx,nlnmxv,nlnmxc, nctot,niw, !not readin nw
c      real(8) :: alat,ef, diw,dw,delta,deltaw,esmr
c      character(120):: symgrp
c      character(6),allocatable :: clabl(:)
c      integer(4),allocatable:: iclass(:)
c     &  ,nindxv(:,:),nindxc(:,:),ncwf(:,:,:) ,
c     o    invg(:), il(:,:), in(:,:), im(:,:),   ilnm(:),  nlnm(:),
c     o    ilv(:),inv(:),imv(:),  ilnmv(:), nlnmv(:),
c     o    ilc(:),inc(:),imc(:),  ilnmc(:), nlnmc(:),
c     o    nindx(:,:),konf(:,:),icore(:,:),ncore(:),
c     &    occv(:,:,:),unoccv(:,:,:)
c     &   ,occc(:,:,:),unoccc(:,:,:),
c     o    nocc(:,:,:),nunocc(:,:,:)
c      real(8), allocatable::
c     o  plat(:,:),pos(:,:),z(:),  ecore(:,:),  symgg(:,:,:) ! symgg=w(igrp),freq(:)
c-----------------------------------------------------------------------

c--- Get maximums takao 18June03
      call getnemx(nbmx,ebmx,8,.true.) !8+1 th line of GWIN0

c-------------------------------------------------------------------
c      if (nclass > mxclass) stop ' hsfp0: increase mxclass'
c!!!! WE ASSUME iclass(iatom)= iatom !!!!!!!!!!!!!!!!!!!!!!!!!
      if (nclass /= natom ) stop ' hsfp0: nclass /= natom ' ! We assume nclass = natom.
      print *,' hsfp0: end of genallcf2'
c
      call pshprt(30)
      pi   = 4d0*datan(1d0)
      tpia = 2d0*pi/alat

C      call dinv33(plat,1,xxx,vol)
C      voltot = dabs(vol)*(alat**3)
      voltot = abs(alat**3*tripl(plat,plat(1,2),plat(1,3)))

      ifmlw(1) = iopen('MLWU',0,-1,0)
      ifmlwe(1)= iopen('MLWEU',0,-1,0)
      if (nspin == 2) then
        ifmlw(2) = iopen('MLWD',0,-1,0)
        ifmlwe(2)= iopen('MLWED',0,-1,0)
      endif

c>> read dimensions of wc,b,hb
      ifhbed     = iopen('hbe.d',1,0,0)
      read (ifhbed,*) nprecb,mrecb,mrece,nlmtot,nqbzt, nband,mrecg
      if (nprecb == 4) stop 'hsfp0: b,hb in single precision'

      call init_readeigen(ginv,nspin,nband,mrece) !initialization of readEigen

c --- get space group information ---------------------------------
c true class information in order to determine the space group -----------
c because the class in the generated GW file is dummy.(iclass(ibas)=ibas should be kept).
      open (102,file='CLASS')
      allocate(iclasst(natom),invgx(ngrp)
     &         ,miat(natom,ngrp),tiat(3,natom,ngrp),shtvg(3,ngrp))
      print *,'  --- Readingin CLASS info ---'
      do ibas = 1,natom
        read(102,*) ibasx, iclasst(ibas)
        write(6, "(2i10)") ibasx, iclasst(ibas)
      enddo

c Get space-group transformation information. See header of mptaouof.
      call mptauof(symgg,ngrp,plat,natom,pos,iclasst
     o              ,miat,tiat,invgx,shtvg )
c        write (*,*)  'tiat=', tiat(1:3,1:natom,invr),invr

c----------------------------------------------
      call pshprt(60)


c... Readin eigen functions
c      ifev(1)   = iopen('EVU', 0,0,mrece)
c      if (nspin==2) ifev(2) = iopen('EVD', 0,0,mrece)

c --- determine Fermi energy ef for given valn (legas case) or corresponding charge given by z and konf.
! When esmr is negative, esmr is geven automatically by efsimplef.
      legas = .false.
      call efsimplef2a(nspin,wibz,qibz,ginv,
     i        nband,nqibz
     i       ,konf,z,nl,natom,iclass,nclass
     i       ,valn, legas, esmr,  !!! valn is input for legas=T, output otherwise.
c
     i        qbz,nqbz !index_qbz, n_index_qbz,
     o       ,efnew)
c
c        print *,' end of efsimple'
      ef = efnew
c- check total ele number -------
      ntot  = nocctotg2(nspin, ef,esmr, qbz,wbz, nband,nqbz) !wbz
      print *,' ef    =',ef
      print *,' esmr  =',esmr
      print *,' valn  =',valn
      print *,' ntot  =',ntot

c      ifcphi  = iopen('CPHI',0,0,mrecb)

      call init_readeigen2(mrecb,nlmto,mrecg) !initialize m_readeigen

c QPNT data
      call getkeyvalue("GWinput","<QPNT>",unit=ifqpnt,status=ret)
      print *,' ifqpnt ret=',ifqpnt,ret
c
      lqall      = .false.
      laf        = .false.
      call readx   (ifqpnt,10)
      read (ifqpnt,*) iqall,iaf
      if (iqall == 1) lqall = .true.
      if (iaf   == 1)   laf = .true.
      call readx   (ifqpnt,100)
ctm 040622
c      read (ifqpnt,*) nwf,qwf0(1:3),dqwf0(1:3)
c      allocate (itq(nwf))
c      read (ifqpnt,*) (itq(i),i=1,nwf)
      read (ifqpnt,*)
      read (ifqpnt,*)

      if (lqall) then !all q-points case
        nq         = nqibz
        allocate(q(3,nq))
        call dcopy   (3*nqibz,qibz,1,q,1)
      else
        call readx   (ifqpnt,100)
        read (ifqpnt,*) nq
        allocate(q(3,nq))
        do       k = 1,nq
          read (ifqpnt,*) i,q(1,k),q(2,k),q(3,k)
          write(6,'(i3,3f13.6)') i,q(1,k),q(2,k),q(3,k)
        enddo
      endif
c
      nspinmx = nspin
      if (laf) nspinmx =1

      close(ifqpnt)
c------------
c input param. specific to MAXLOC
      call getkeyvalue("GWinput","<MLOC>",unit=ifmloc,status=ret)
      print *,' ifmloc ret=',ifmloc,ret
c
      read (ifmloc,*) nwf
ctm 040928
      allocate (nphi(nwf))
      read (ifmloc,*) (nphi(i),i=1,nwf)
      nphix = 0
      do i = 1,nwf
        if(nphi(i) > nphix)nphix = nphi(i)
      enddo
      allocate (r0g(nphix,nwf),iphi(nphix,nwf),iphidot(nphix,nwf),
     &          wphi(nphix,nwf))
      do i=1,nwf
        do j=1,nphi(i)
          read(ifmloc,*)iphi(j,i),iphidot(j,i),r0g(j,i),wphi(j,i)
        enddo
      enddo
      read(ifmloc,*)ieo_swt,itout_i,itout_f
      read(ifmloc,*)eomin,eomax
      read(ifmloc,*)iei_swt,itin_i,itin_f
      read(ifmloc,*)eimin,eimax
      read(ifmloc,*)nsc1
      read(ifmloc,*)conv1
      read(ifmloc,*)alpha1
      read(ifmloc,*)nsc2
      read(ifmloc,*)conv2
      read(ifmloc,*)alpha2
      read(ifmloc,*)rcut
      close(ifmloc)

cc --- read LDA eigenvalues
      ntq = nwf
cc     ntp0=ntq
c      allocate(eqx(ntq,nq,nspin),eqx0(ntq,nq,nspin),eqt(nband))
c      do      is = 1,nspin
c      do      ip = 1,nq
cc        iq       = idxk (q(1,ip),qbze,nqbze)
cc        call rwdd1   (ifev(is), iq, nband, eqt) !direct access read b,hb and e(q,t)
c        call readeval(q(1,ip),is,eqt)
cc        print *,' eqt=',eqt
c        eqx0(1:ntq,ip,is) = eqt(itq(1:ntq))
c        eqx (1:ntq,ip,is) = rydberg()*(eqt(itq(1:ntq))- ef)
c      enddo
c      enddo
c      deallocate(eqt)

c --- info
      call winfo(6,nspin,nq,ntq,is,nbloch
     &    ,0,0,nqbz,nqibz,ef,deltaw,alat,esmr)

c
      iii=ivsumxxx(irk,nqibz*ngrp)
      write(6,*) " sum of nonzero iirk=",iii, nqbz


c-------------------------------------------------------------

c Rt vectors
      allocate (rt(3,nqbz),rt8(3,8,nqbz),qbz0(3,nqbz))
      call getrt(qbz,qbas,plat,n1,n2,n3,nqbz,
     o           rt,rt8,qbz0)

c b vectors
      call getbb(plat,alat,n1,n2,n3,
     o           nbb,wbb,wbbsum,bb)

c index for k and k+bb
      allocate (ku(3,nqbz),kbu(3,nbb,nqbz),ikbidx(nbb,nqbz))

      call kbbindx(qbz,ginv,bb,
     d             nqbz,nbb,
     o             ikbidx,ku,kbu)


      allocate (iko_i(nqbz),iko_f(nqbz),
     &          iki_i(nqbz),iki_f(nqbz),
     &          ikbo_i(nbb,nqbz),ikbo_f(nbb,nqbz),
     &          ikbi_i(nbb,nqbz),ikbi_f(nbb,nqbz))


c ixc = 1
      if (ixc == 1) then
        do is = 1,nspin
          call ewindow(is,ieo_swt,iei_swt,itout_i,itout_f,itin_i,itin_f,
     i                eomin,eomax,eimin,eimax,ef,qbz,ikbidx,
     d                nqbz,nbb,nband,nwf,nspin,
     o                iko_i,iko_f,iki_i,iki_f,
     o                ikbo_i,ikbo_f,ikbi_i,ikbi_f,
     o                iko_ixs(is),iko_fxs(is),noxs(is),
     o                leout,lein)
        enddo

c write bb vectors to 'BBVEC'
        call writebb(ifbb,wbb(1:nbb),bb(1:3,1:nbb),
     i                ikbidx,ku,kbu,
     i                iko_ixs,iko_fxs,noxs,
     d                nspin,nqbz,nbb)

ctm, 060923 !!!
        ifwand = iopen('wan.d',1,-1,0)
        iko_ix = iko_ixs(1)
        iko_fx = iko_fxs(1)
        if (nspin == 2) then
          if (iko_ixs(2) < iko_ix) iko_ix = iko_ixs(2)
          if (iko_fxs(2) > iko_fx) iko_fx = iko_fxs(2)
        endif
        write(ifwand,*)nqbz,nwf,iko_ix,iko_fx
        write(ifwand,*)nspin
        do is = 1,nspin
          write(ifwand,*)nqbz,nwf,iko_ixs(is),iko_fxs(is)
        enddo
        isx = iclose('wan.d')
c !!!

        if (ixc == 1) stop 'hmaxloc: ixc=1 ok'
      endif

c loop over spin
      do is = 1,nspin
        write(*,*)'is =',is,'  out of',nspin

c energy window
        call ewindow(is,ieo_swt,iei_swt,itout_i,itout_f,itin_i,itin_f,
     i             eomin,eomax,eimin,eimax,ef,qbz,ikbidx,
     d             nqbz,nbb,nband,nwf,nspin,
     o             iko_i,iko_f,iki_i,iki_f,
     o             ikbo_i,ikbo_f,ikbi_i,ikbi_f,
     o             iko_ix,iko_fx,nox,
     o             leout,lein)
        write(*,*)'1: iko_ix,iko_fx',iko_ix,iko_fx
        call chk_ewindow(ifbb,is,nspin,nqbz,nbb,iko_ix,iko_fx)
        write(*,*)'2: iko_ix,iko_fx',iko_ix,iko_fx

c read uu-matrix
        allocate (uumat(iko_ix:iko_fx,iko_ix:iko_fx,nbb,nqbz))
        call readuu(is,iko_ix,iko_fx,ikbidx,
     d            nqbz,nbb,
     o            uumat)
        call chkuu(is,iko_ix,iko_fx,ikbidx,uumat,
     d           nqbz,nbb)

c step 1  -- choose Hilbert space --
        write(*,*)'Step 1: Hilbert space branch'

        allocate (amnk(iko_ix:iko_fx,nwf,nqbz),
     &          upu(iko_ix:iko_fx,iko_ix:iko_fx,nbb,nqbz),
     &          cnk(iko_ix:iko_fx,nwf,nqbz),
     &          cnk2(iko_ix:iko_fx,nwf,nqbz),
     &          omgik(nqbz))

        call init_unkg(is,qbz,ginv,ef,lein,
     i              iko_ix,iko_fx,iko_i,iko_f,
     i              iki_i,iki_f,
     d              nwf,nband,nqbz,
     o              amnk,cnk)

        do isc = 1,nsc1

          do iq = 1,nqbz

            call dimz(lein,iko_i(iq),iko_f(iq),iki_i(iq),iki_f(iq),
     o                ndz,nin)

            if (nwf > nin) then
              if (ndz < 1) stop 'ndz < 1'

c (1-2) <u_mk | P_k+b | u_nk>
              call getupu(isc,
     i                     uumat(:,:,:,iq),cnk,
     i                     lein,alpha1,iq,ikbidx(:,iq),
     i                     iko_ix,iko_fx,
     i                     iko_i(iq),iko_f(iq),
     i                     iki_i(iq),iki_f(iq),
     i                     ikbo_i(:,iq),ikbo_f(:,iq),
     i                     ikbi_i(:,iq),ikbi_f(:,iq),
     d                     nwf,nbb,nqbz,
     u                     upu(:,:,:,iq))

c (1-3) Zmn(k) > phi,eval
              allocate (zmn(ndz,ndz),evecc(ndz,ndz),eval(ndz))

              call getzmn(upu(:,:,:,iq),wbb,lein,
     i                     iko_ix,iko_fx,
     i                     iko_i(iq),iko_f(iq),
     i                     iki_i(iq),iki_f(iq),
     d                     nwf,nbb,nqbz,ndz,
     o                     zmn)

              call chk_hm(zmn,ndz)
              call diag_hm(zmn,ndz,eval,evecc)

              call new_cnk(cnk(:,:,iq),evecc,iq,
     i                      iko_ix,iko_fx,
     i                      iko_i(iq),iko_f(iq),
     i                      iki_i(iq),iki_f(iq),
     d                      nwf,ndz,
     o                      cnk2(:,:,iq))

c (1-3) w_I(k)  eq.(18)
              call chk_eval(wbb,eval,nbb,ndz)
              call get_omgik(wbb,eval,
     i                        iko_i(iq),iko_f(iq),
     i                        iki_i(iq),iki_f(iq),
     d                        nbb,nwf,ndz,
     o                        omgik(iq))

              deallocate (zmn,evecc,eval)

            else
              omgik(iq) = 0d0
              cnk2(:,:,iq) = cnk(:,:,iq)

c end if (ndz>1)
            endif

c end of iq-loop
          enddo

c (1-5) w_I(k) > Omaga_I  eq.(11)
          omgi = sum(omgik(:)*wbz(:))

c (1-6) check self-consistency
          write(*,*)'#SC-loop, conv.',isc,omgi
          if (isc >= 2) then
            domgi = dabs((omgiold - omgi) / omgiold)
            if (domgi < conv1) then
              write(*,*) 'step1: converged!'
              goto 810
            endif
          endif

c update
          omgiold = omgi
          cnk     = cnk2

c end of self-consistent loop
        enddo
        write(*,*)'step1: not converged'

 810    continue

        deallocate(upu,cnk2)


c step 2 -- localize Wannier fn. --
        write(*,*)'Step 2: Wannier fn. branch'

        allocate (mmn(nwf,nwf,nbb,nqbz),mmn0(nwf,nwf,nbb,nqbz),
     &          umnk(nwf,nwf,nqbz),
     &          rmn(nwf,nwf),amn(nwf,nwf),smn(nwf,nwf),
     &          rn(3,nwf),qn(nwf),tmn(nwf,nwf),dwmn(nwf,nwf),
     &          eunk(nwf,nqbz))

c (2-0) construct initlal u~ from u
        call diag_unk(is,qbz,
     i              iko_ix,iko_fx,iko_i,iko_f,
     d              nband,nwf,nqbz,
     u              cnk,
     o              eunk)

c check ortho-normality of u~'s
c      call chk_cnk(cnk,
c     i             iko_ix,iko_fx,iko_i,iko_f,
c     d             nband,nwf,nqbz)
c
c check: eunk vs. KS energy
c      call chk_eunk(is,qbz,eunk,ef,
c     d              nqbz,nband,nwf)


c (2-1) initial: uumat -> Mmn
        call init_mmn(cnk,uumat,ikbidx,
     i              iko_ix,iko_fx,iko_i,iko_f,ikbo_i,ikbo_f,
     d              nwf,nqbz,nbb,
     o              mmn0)


c (2-2) initial U
        call init_Umnk(amnk,cnk,
     i               iko_ix,iko_fx,iko_i,iko_f,
     d               nwf,nqbz,
     o               umnk)

        call updt_mmn(umnk,mmn0,ikbidx,
     d              nwf,nqbz,nbb,
     u              mmn)

        do isc = 1, nsc2

c <r_n> ([1] eq.31)
          call get_rn(mmn,bb,wbb,wbz,
     d               nwf,nqbz,nbb,
     o               rn)

          do iq = 1,nqbz

            dwmn = (0d0,0d0)

            do ibb = 1,nbb
c (2-3) A[R] matrix
              call getrmn(mmn(:,:,ibb,iq),
     d                     nwf,
     o                     rmn)
              call getamn(rmn,
     d                     nwf,
     o                     amn)

c (2-4) S[T] matrix
              call gettmn(rn,mmn(:,:,ibb,iq),bb(:,ibb),
     d                     nwf,
     o                     qn,tmn)

!               if (isc == nsc2) then
!                  write(*,*)'iq,ibb =',iq,ibb
!                  do ii = 1,nwf
!                     write(*,*)ii,dabs(qn(ii))
!                  enddo
!               endif

              call getsmn(tmn,
     d                     nwf,
     o                     smn)

c DW(k) ([1] eq.57)
              dwmn(:,:) =  dwmn(:,:)
     &       + wbb(ibb) * (amn(:,:) - smn(:,:)) * alpha2 / wbbsum

c end of ibb-loop
            enddo


c (2-5) DW(k) -> U(k) ([1] eq.60)
            call updt_uk(dwmn,
     d                   nwf,
     u                   umnk(:,:,iq))
c            call chk_um(umnk(:,:,iq),nwf)

c end of iq-loop
          enddo


c update Mmn ([1] eq.61)
          call updt_mmn(umnk,mmn0,ikbidx,
     d                 nwf,nqbz,nbb,
     u                 mmn)

c (2-6) Omeg_I, Omega_D and Omega_OD ([1] eq.34,35,36)
          call getOmg(mmn,rn,bb,wbb,wbz,
     d               nwf,nqbz,nbb,
     o               omgi,omgd,omgod,omgdod,omgidod)

c check self-consistency
          write(*,*)'#SC-loop, conv.',isc,omgdod
          write(*,950)'Omg: I, OD, D ',omgi,omgod,omgd
          if (isc >= 2) then
            domgdod = dabs((omgdodold - omgdod) / omgdodold)
            if (domgdod < conv2) then
              write(*,*) 'step2: converged!'
              goto 820
            endif
          endif
          omgdodold = omgdod

c end of self-consistent loop
        enddo
        write(*,*)'step2: not converged'
 820    continue

c      call chk_dnk(is,eunk,qbz,
c     i             umnk,cnk,
c     i             iko_ix,iko_fx,iko_i,iko_f,
c     d             nband,nwf,nqbz)

c output
        call wmaxloc(ifmlw(is),ifmlwe(is),
     i             qbz,umnk,cnk,eunk,
     i             iko_ix,iko_fx,iko_i,iko_f,
     d             nwf,nqbz)
        call writeOmg(is,mmn,rn,bb,wbb,wbz,
     d             nwf,nqbz,nbb)
c 070824
        call getkeyvalue("GWinput","Write_rmn",lrmn,default=.false.)
        if (lrmn)
     & call writermn(is,mmn,bb,wbb,qbz,wbz,rt,
     d              nwf,nqbz,nbb,n1,n2,n3)
c 070830
        call getkeyvalue("GWinput","Write_mmn",lmmn,default=.false.)
        if (lmmn)
     & call writemmn(is,mmn,bb,wbb,qbz,wbz,rt,
     d              nwf,nqbz,nbb,n1,n2,n3)

        deallocate(uumat,amnk,omgik,mmn,mmn0,
     &           rmn,amn,smn,rn,qn,tmn,dwmn)


c step 3 -- reduced Hamiltonian --
        write(*,*)'Step 3: reduced Hamiltonian branch'

c open file
        if (is == 1) then
          ifbnd = iopen('bnds.maxloc.up',1,-1,0)
          iftb  = iopen('bnds.tb.up',1,-1,0)
        else
          ifbnd = iopen('bnds.maxloc.dn',1,-1,0)
          iftb  = iopen('bnds.tb.dn',1,-1,0)
        endif
        write(ifbnd,*)nq
        write(ifbnd,*)nwf
        write(iftb,*)nq
        write(iftb,*)nwf

c allocate
        allocate (hrotk(nwf,nwf,nqbz), ! hrotr(nwf,nwf,nqbz),
     o          hrotkp(nwf,nwf),evecc(nwf,nwf),eval(nwf))

c for small Hamiltonian
        call getkeyvalue("GWinput","SmallHam",lsh,default=.false.)
        if (lsh) then
          call getkeyvalue("GWinput","nsh1",nsh1, default=1 )
          call getkeyvalue("GWinput","nsh2",nsh2, default=1 )
          write(*,*)'SmallHam on',nsh1,nsh2
          nsh = nsh2 - nsh1 + 1
          if (is == 1) then
            ifsh = iopen('bnds.sh.up',1,-1,0)
          else
            ifsh = iopen('bnds.sh.dn',1,-1,0)
          endif
          write(ifsh,*)nq
          write(ifsh,*)nsh
          allocate (hrotkps(nsh,nsh),eveccs(nsh,nsh),evals(nsh))
        endif

c (3-1) ~H(k) -> Hrot(k)
        call rot_hmnk(umnk,eunk,
     d              nwf,nqbz,
     o              hrotk)
c      stop 'rot_hmnk done'


c (3-2) Hrot_mn(R)
        allocate(irws(n1*n2*n3*8),rws(3,n1*n2*n3*8),drws(n1*n2*n3*8))
        call wigner_seitz(alat,plat,n1,n2,n3,nrws,rws,irws,drws)
        allocate(hrotr(nwf,nwf,nrws))
        call get_hrotr_ws(hrotk,qbz,wbz,
     i                  rws,irws,drws,
     d                  nwf,nqbz,nrws,
     o                  hrotr)

c k-point mesh
        call get_nqbze(nqbz,nqbze)
        allocate(qbze(3,nqbze))
        call get_qbze(qbz,nqbz,
     o              qbze,nqbze)
        write(ifmlw(is))nqbze,nwf
        write(ifmlwe(is))nqbze,nwf
        do iq = 1,nqbze
          call get_hrotkp_ws(hrotr,rws,drws,irws,qbz(:,iq),
     d                     nwf,nqbz,nrws,
     o                     hrotkp)
c          call q2q0(qbze(:,iq),plat,q0(:))

          call diag_hm(hrotkp,nwf,eval,evecc)
c          call chk_diag(qbze(:,iq),hrotkp,nwf,eval,evecc)
c          if (iq <= nqbz)
c     &    call chk_umnk(qbz(:,iq),hrotkp,nwf,eval,umnk(:,:,iq))
c          if (iq <= nqbz)
c     &    call cmp_umn_evec(qbz(:,iq),umnk(:,:,iq),evecc,eval,nwf)

          call wmaxloc_diag(ifmlw(is),ifmlwe(is),
     i                 iq,qbze(1:3,iq),umnk,cnk,eunk,evecc,eval,
     i                 iko_ix,iko_fx,iko_i,iko_f,
     d                 nwf,nqbz)

c          write(6900,*)'***',iq
c          write(6900,*)evecc
cc          write(*,990)'iq =',iq,qbz(1:3,iq)
c          if (iq <= nqbz) then
c          do iband = 1,nwf
c             e1 = (eval(iband)   -ef)*rydberg()
c             e2 = (eunk(iband,iq)-ef)*rydberg()
c             write(*,*)iband,e1,e2
c          enddo
c          endif
        enddo
        deallocate(qbze)

c other k-points
        write(ifbnd,*)ef,' ef'
        write(iftb,*)ef,' ef'
        if (lsh) write(ifsh,*)ef,' ef'
        do iq = 1,nq
c (3-3) Hrot_mn(k')
          call get_hrotkp_ws(hrotr,rws,drws,irws,q(:,iq),
     d                     nwf,nqbz,nrws,
     o                     hrotkp)

c (3-4) diagonalize
          call diag_hm(hrotkp,nwf,eval,evecc)

c          write(ifbnd,990)'iq =',iq,q(1:3,iq)
          write(ifbnd,*)'iq =',iq
          write(ifbnd,990)q(1:3,iq)
          do iband = 1,nwf
            write(ifbnd,*)iband,eval(iband)
            e1 = (eval(iband)   -ef)*rydberg()
c             e1 = (dreal(hrotkp(iband,iband))-ef)*rydberg()
c             write(ifbnd,*)iband,e1
          enddo

c (3-4) diagonalize  -- Small Hamiltonian --
          if (lsh) then
            hrotkps(1:nsh,1:nsh) = hrotkp(nsh1:nsh2,nsh1:nsh2)
            call diag_hm(hrotkps,nsh,evals,eveccs)

c          write(ifbnd,990)'iq =',iq,q(1:3,iq)
            write(ifsh,*)'iq =',iq
            write(ifsh,990)q(1:3,iq)
            do iband = 1,nsh
              write(ifsh,*)iband,evals(iband)
              e1 = (evals(iband)   -ef)*rydberg()
c             e1 = (dreal(hrotkps(iband,iband))-ef)*rydberg()
c             write(ifsh,*)iband,e1
            enddo
          endif ! lsh

c (3-3) Hrot_mn(k')  -- Tight-binding ---
          call get_hrotkp_tb_ws(rcut,plat,alat,
     i                     hrotr,rws,drws,irws,q(:,iq),
     d                     nwf,nqbz,nrws,
     o                     hrotkp)

c (3-4) diagonalize -- Tight-binding --
          call diag_hm(hrotkp,nwf,eval,evecc)

c          write(iftb,990)'iq =',iq,q(1:3,iq)
          write(iftb,*)'iq =',iq
          write(iftb,990)q(1:3,iq)
          do iband = 1,nwf
            write(iftb,*)iband,eval(iband)
            e1 = (eval(iband)   -ef)*rydberg()
c             write(iftb,*)iband,e1
          enddo
c end-of iq-loop
        enddo

        deallocate(cnk,umnk,eunk,hrotk,hrotr,hrotkp,evecc,eval,
     &           irws,rws,drws)
        if (lsh) deallocate(hrotkps,eveccs,evals)

        close(ifbnd)

c end of loop over spin
      enddo

 950  format(a14,3f23.16)
c 990  format(a4,i5,3f12.6)
 990  format(3f12.6)

c-----------------------------------------------------------------------
      call cputid(0)

      call mpi_end()

      stop ' OK! hmaxloc'
      end

c-----------------------------------------------------------------------
