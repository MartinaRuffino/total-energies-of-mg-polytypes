#!/bin/tcsh
# Analyze timings in hsfp0 output

set fn = lsc
if ($#argv > 0) then
  set fn = $1
  shift
endif

echo -n analyze timings in hsfp0 output, file $fn
if (! -r $fn) then
  echo " ... file missing or unreadable ... abort"
  exit -1
else
  set mode = `grep imode= $fn | awk '{print $NF}'`
  if ($mode == 1 || $mode == 3 || $mode == 11) then
     echo " ... exchange calculation"
     set exonly
  else
     echo " ... correlation calculation"
endif

echo -n "Core matrix elements"
grep Since $fn | grep "complete core matrix elements" | awk '{print $(NF-3), $(NF-1)}' | mc -f7x,2f11.1 . -rsum | tail -1

echo -n "valence matrix elements"
grep Since $fn | grep "complete valence matrix elements" | awk '{print $(NF-3), $(NF-1)}' | mc -f5x,f10.1,f11.1 . -rsum | tail -1

echo -n "interstitial matrix elements"
grep Since $fn | grep "complete interstitial matrix elements" | awk '{print $(NF-3), $(NF-1)}' | mc -ff10.1,f11.1 . -rsum | tail -1

echo .....

set sum = (0 0)
set cpu = (0 0)

set cpu = `grep Since $fn | egrep -E "complete .* matrix elements" | awk '{print $(NF-3), $(NF-1)}' | mc -f2f14.6 . -rsum | tail -1`
echo -n "total matrix elements      "
echo $cpu | mc -f2f11.1 .  | tail -1
set sum = `echo $cpu | mc -f2f15.4 -vc1=$sum[1] -vc2=$sum[2] . -e2 x1+c1 x2+c2 | tail -1`

set cpu = `grep Since $fn | egrep 'zmel . overlap' | awk '{print $(NF-3), $(NF-1)}' | mc -f2f14.6 . -rsum | tail -1`
echo -n "zmelt . overlap            "
echo $cpu | mc -f2f11.1 .  | tail -1
set sum = `echo $cpu | mc -f2f15.4 -vc1=$sum[1] -vc2=$sum[2] . -e2 x1+c1 x2+c2 | tail -1`

if ($?exonly) goto finish

set cpu = `grep Since $fn | egrep 'z . W\(0' | awk '{print $(NF-3), $(NF-1)}' | mc -f2f14.6 . -rsum | tail -1`
echo -n "z W(0) z                   "
echo $cpu | mc -f2f11.1 .  | tail -1
set sum = `echo $cpu | mc -f2f15.4 -vc1=$sum[1] -vc2=$sum[2] . -e2 x1+c1 x2+c2 | tail -1`

set cpu = `grep Since $fn | egrep 'z . W\(o' | awk '{print $(NF-3), $(NF-1)}' | mc -f2f14.6 . -rsum | tail -1`
echo -n "z W(omega) z               "
echo $cpu | mc -f2f11.1 .  | tail -1
set sum = `echo $cpu | mc -f2f15.4 -vc1=$sum[1] -vc2=$sum[2] . -e2 x1+c1 x2+c2 | tail -1`


grep Since $fn | grep "complete zsec" > /dev/null
if ($status == 0) then
set cpu = `grep Since $fn | grep "complete zsec" | awk '{print $(NF-3), $(NF-1)}' | mc -f2f14.6 . -rsum | tail -1`
echo -n "generation of zsec         "
echo $cpu | mc -f2f11.1 .  | tail -1
set sum = `echo $cpu | mc -f2f15.4 -vc1=$sum[1] -vc2=$sum[2] . -e2 x1+c1 x2+c2 | tail -1`
endif

finish:
echo -n "total                 " `echo $sum | mc -f2f11.1 .  | tail -1` sec = `echo $sum | mc -f2f11.1 -vc1=$sum[1] -vc2=$sum[2] . -e2 x1/60 x2/60 | tail -1` min
tail -1 $fn
egrep 'idalloc.*Max' $fn | tail -1 | awk '{printf "Max alloc %d\n", $NF}'
