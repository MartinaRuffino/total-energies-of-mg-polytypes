      subroutine sudossw(sopts,mode,dosl,dosi,dosr,wtfn)
C- Reads switches controlling what kind of DOS is generated
C ----------------------------------------------------------------------
Ci Inputs
Ci  mode   : sequence of binary specifying which parameters are to be read.
Ci         : Most tags are always parsed, but some can be excluded as they
Ci         : may not be meaningful.  Setting bits in mode exclude the following
Ci         : 2^0 : not used now
Ci         :       (in future, whether excluded switches are ignored or generated error)
Ci         : 2^1 : exclude parsing wtfn= or cls=
Ci         : 2^2 : exclude parsing conductivity-related quantities (mode=,vec=,vec2=)
Ci         : 2^3 : exclude parsing bands=list
Ci         : 2^4 : exclude parsing classes=list
Ci         : 2^5 : exclude parsing switches tbdos,tbu,fpdos
Ci  sopts  : options separated by delimiter.
Ci         : sopt may optionally begin with --dos .
Ci         : First character (after optional --dos) is delimiter,  thus if it is '~'
Ci         : sopts should have form  '[--dos]~option1~option2~...'
Ci         : Options are as follows (the variables they affect are indicated by [..])
Ci         : wtfn=name  (asados) read dos weights from file `name' [sopts(dosi(4):dosi(5))]
Ci         : cls        is equivalent to wtfn=CLS [wtfn]
Ci         : totdos     compute total dos by adding weights from all partial dos [dosl(2)]
Ci         : fpdos      specifies 'fp' mode.  It only affects printout associating
Ci         :            partial dos channels with site and class names. [dosl(5)]
Ci         : tbdos      DOS from moments generated by tbe [dosl(6)]
Ci         :            tbe moments file has different conventions and is named 'band'
Ci         : tbu        specifes ??
Ci         : idos       generate energy-integrated dos [dosl(1)]
Ci         : rdm        Specifies DOS be written in rdm-compatible format [dosi(2)]
Ci         : ldig       Write DOS with extra digits [dosl(4)]
Ci         : window=#,# energy window over which data is to be computed
Ci         :            #,# are minimum, maximum energies.  If not
Ci         :            specified with command-line --dos, ASADOS will prompted user for input.
Ci         :            conductivity; see mode= above
Ci         : npts=#     number of energy points [dosi(1)].  If not specified with
Ci         :            command-line --dos, user is prompted for input.
Ci         : mode=#     specified a dos-related quantity is to be made [dosi(3)]
Ci         :            #=0 makes dos
Ci         :            #=1 (ballistic) conductivity,
Ci         :                1/2 | grad_k E(k) . vec
Ci         :                In this mode, vec must also be specified.
Ci         :            #=2 (diffusive) conductivity, or actually
Ci         :                grad_1 E(k) . grad_2 E(k) where directions
Ci         :                1 and 2 must be specifed by vec and vec2 below
Ci         : vec=#,#,#  direction vector for conductivity; see mode=#
Ci         : vec2=#,#,# second direction vector for `diffusive'
Ci         : bands=list compute contribution to dos from a prescribed
Ci         :            list of bands
Ci         : classes=list generate dos for a specified list of classes.
Ci         :            list syntax follows standard class-list syntax
Ci         :            as described in lmto.html.
Co Outputs
Co   dosl  : Array of switches with the following meanings
Co         : The default value for all these switchs is .false.
Co         : 1 lidos  : T if make integrated dos, F if make DOS
Co         : 2 totdos : T Generate total DOS (no decomposition into channels)
Co         : 3 lrange : T a window was specified, returns F if not
Co         : 4 ldig   : T write dos with extra digits
Co         : 5 lfp    : T if DOS for FP program
Co         : 6 tbdos  : T if DOS for tbe program (different conventions)
Co         : 7 tbu    : T if DOS for tbe+U implementation
Co         : 8 lref   : T if energy window is relative to Fermi level
Co         : 9 lpade  : T if use pade interpolation
Co  dosi   : Array of integers with the following meanings
Co         : These integers are not modifed here unless explicitly specified.
Co         : This enables the caller to tailor default values.
Co         : 1  npts  : number of points on energy mesh
Co         : 2  ifmt  : 0 => rdm format , 1 => original Methfessel format
Co         : 3  icond : 0, 1, or 2 (see mode=# above)
Co         : The following pairs demarcate boundaries in string sopt(dosi(#1):dosi(#2))
Co         : They are initialized to zero unless specified as an option
Co         : 4,5      : bands-list = string containing list of bands to include in dos
Co         : 6,7      : class-list = string containing list of classes to resolve dos
Co  dosr   : Array of double precision numbers with the following meanings:
Co         : These numbers are not modifed here unless explicitly specified
Co         : 1        : lower bound to DOS window
Co         : 2        : upper bound to DOS window
Co         : 3-5 vec  : (conductivity) first vector
Co         : 6-8 vec2 : (conductivity) second vector
Cs Command-line switches
Cl Local variables
Cl         :
Cr Remarks
Cr
Cu Updates
Cu   27 Oct 15 First created
C ----------------------------------------------------------------------
      implicit none
C ... Passed parameters
      logical dosl(9)
      integer mode,dosi(7)
      double precision dosr(8)
      character*(*) sopts,wtfn
C ... Local variables
      character dc*1
      integer i,iv(10),j1,j2,m
      logical, parameter :: T=.true., F=.false.
      procedure(integer) :: parg,bitand
C     equivalence (lidos,dosl(1)), (totdos,dosl(2)), (lrange,dosl(3)), (ldig,dosl(4))
C     equivalence (lfp,dosl(5)), (tbdos,dosl(6)), (tbu,dosl(7)), (lref,dosl(8))
C     equivalence (npts,dosi(1)), (ifmt,dosi(2)), (icond,dosi(3))

      call lvset(dosl,1,9,.false.)
      if (bitand(mode,8) /= 8) dosi(4:5) = 0
      if (bitand(mode,16) /= 16) dosi(6:7) = 0

      dc = sopts(6:6)
      if (dc /= ' ') then
C   ... Return here to resume parsing for arguments
        j2 = 5
   10   continue
        j2 = j2+1
        if (sopts(j2:j2) == dc) goto 10
        j1 = min(len(sopts),j2)
        call nwordg(sopts,0,dc//' ',1,j1,j2)
        if (j2 >= j1) then
          if (.false.) then
          elseif (sopts(j1:j1+4) == 'wtfn=')  then
            if (j1+5 > j2) call rx('SUDOSP: bad file name')
            if (bitand(mode,2) == 2) goto 10
            wtfn = sopts(j1+5:j2)
C         cls switch sets wtfn to 'cls' and the lfp switch on
          elseif (sopts(j1:j2) == 'cls')  then
            if (bitand(mode,2) == 2) goto 10
            wtfn = 'cls'
            dosl(5) = .true.
C         generate integrated DOS
          elseif (sopts(j1:j2) == 'idos')  then
            dosl(1) = .true.
C         Write dos with extra digits
          elseif (sopts(j1:j2) == 'ldig')  then
            dosl(4) = .true.
C         tbdos has different dimensions in moments file
          elseif (sopts(j1:j2) == 'tbdos')  then
            dosl(6) = .true.
C         tbdos has different dimensions in moments file
          elseif (sopts(j1:j2) == 'tbu')  then
            dosl(6) = .true.
            dosl(7) = .true.
C         fp mode has site-dependent dos channels (for printout)
          elseif (sopts(j1:j2) == 'fpdos')  then
            dosl(5) = .true.
C         Turn on Pade interpolation of sigma (dmft)
          elseif (sopts(j1:j2) == 'pade')  then
            dosl(9) = .true.
C         Generate total DOS (no partial decomposition into channels)
          elseif (sopts(j1:j2) == 'totdos')  then
            dosl(2) = .true.
          elseif (sopts(j1:j2) == 'rdm')  then
            dosi(2) = 0
C         Energy window is relative to Fermi level
          elseif (sopts(j1:j2) == 'ef0')  then
            dosl(8) = .true.
C         Calculate conductivity or some quantity other than dos
          elseif (sopts(j1:j1+4) == 'mode=')  then
            if (bitand(mode,4) == 4) goto 10
            m = 0
            i = parg('mode=',2,sopts(j1:),m,len(sopts(j1:)),
     .        dc//' ',1,1,iv,dosi(3))
            if (i <= 0) goto 999
            call sanrg(.true.,dosi(3),0,3,' ','dos mode')
C           lcond = .true.
C         Number of energy points
          elseif (sopts(j1:j1+4) == 'npts=')  then
            m = 0
            i = parg('npts=',2,sopts(j1:),m,len(sopts(j1:)),dc//' ',1,1,iv,dosi(1))
            if (i <= 0) goto 999
C         DOS window
          elseif (sopts(j1:j1+6) == 'window=')  then
            m = 0
            i = parg('window=',4,sopts(j1:),m,len(sopts(j1:)),', '//dc,2,2,iv,dosr)
            if (i <= 1) goto 999
            dosl(3) = .true.
C         First direction vector (icond=1,2)
          elseif (sopts(j1:j1+3) == 'vec=')  then
            if (bitand(mode,4) == 4) goto 10
            m = 0
            i = parg('vec=',4,sopts(j1:),m,len(sopts(j1:)),', '//dc,2,3,iv,dosr(3))
            if (i <= 0) goto 999
C         Second direction vector (icond=2)
          elseif (sopts(j1:j1+4) == 'vec2=')  then
            if (bitand(mode,4) == 4) goto 10
            m = 0
            i = parg('vec2=',4,sopts(j1:),m,len(sopts(j1:)),', '//dc,2,3,iv,dosr(6))
            if (i <= 0) goto 999
C         DOS for a prescribed list of bands only
          elseif (sopts(j1:j1+5) == 'bands=') then
            if (bitand(mode,8) == 8) goto 10
            if (j1+6 > j2) call rx('SUDOSP: bad list')
            dosi(4) = j1
            dosi(5) = j2
C            call mkils0(sopts(j1+6:j2),nblst,iblst)
C            if (nblst > 100) call rx('increase size of iblst')
C            call mkilst(sopts(j1+6:j2),nblst,iblst)
C         DOS for a prescribed list of classes only
          elseif (sopts(j1:j1+6) == 'classes') then
            dosi(6) = j1
            dosi(7) = j2
          else
            goto 999
          endif
          goto 10
        endif
      endif
      return


  999 continue
      call rxs('asados: failed to parse dos options:',sopts)
      end
