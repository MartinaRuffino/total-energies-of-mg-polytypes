#!/bin/tcsh -f

# This shell script tests the functioning of program lmmag

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias runjob 'set retcall = \!\!:1; set outfile = \!\!:2 ; set callarg = \!\!:3 ; goto runjob'
alias runrdcmd 'set retcall = \!\!:1; set rdcmdfmt = \!\!:2 ; set outfile = \!\!:3 ; set callarg = \!\!:4 ; goto runrdcmd'
alias findcmd  'set retcall = \!\!:1 ; set prog_cmd = \!\!:2 ; set path_name = \!\!:3 ; set make_path = \!\!:4 ; goto findcmd'
alias compare_res 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set refvar = \!\!:4 ; set tol = \!\!:5 ; set passvar = \!\!:6 ; goto compare_res'
alias compare_res_0 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set tol = \!\!:4 ; set passvar = \!\!:5 ; goto compare_res_0'
alias cnvt_d_fmt  'set retcall = \!\!:1; set testvar = \!\!:2 ; set testval = \!\!:3 ; goto cnvt_d_fmt'
alias query 'set retcall = \!\!:1 ; set retcall2 = \!\!:2 ; set callarg = \!\!:3 ; goto query'

set allargs = ($argv)

set a
set slow
set testfile = $0
set testdir = $testfile:h
set topdir  = `cd $testdir/../..; pwd`
set tmpdir = $cwd
set space = '        '
set failed = 0
alias zcat 'gunzip -c'
alias zcat 'cat'

#alias mpix mpirun
set failed = 0

# Prepend current working-directory, top-level and related dir to path
set path = ($cwd $topdir $topdir/testing $path)

# --- Pick off switches ---
while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")

  set arg1 = $1; shift
  if ($?verb) echo test.lm: parsing switch $arg1
  switch ($arg1)
    case "--quiet":
      set quiet
      unset slow
      breaksw
    case "--add0":
      set add0 = ./add0
      if (! -e $add0) set add0 = $topdir/add0
#      echo "$space" using add0 : $add0
      breaksw
    case "--poszer":
      set poszer = ./poszer
      if (! -e $poszer) set poszer = $topdir/poszer
#      echo "$space" using poszer : $poszer
      breaksw
    case "--downfold":
      set downfold
      breaksw
    case "--no-iact*":
      unset slow
      breaksw
    case "--list":
      goto showtests
      breaksw
    case "--noplot*":
      set noplot
      set have_pldos
      unset have_pldos
      set have_fplot
      unset have_fplot
      breaksw
    case "--verb*":
      set verb = 1
      breaksw
    case "--all":
      breaksw
    default:
cat <<EOF
 usage: test.mmag [switches] [test-list]
        test-list is a list of test cases, e.g., to run tests 1 and 2 do:
          test.mmag 1 2
        Switches:
        --list       lists the tests you can run
        --quiet      runs tests with minimal output and without prompting user
        --no-iactive runs tests without prompting user
        --all        run through a default list of test cases
        --noplot     skip any steps that generate a plot'
        --clean      clean up files generated by this script
        --add0       add suppressed or leading zeros in output for real numbers \`.nnn'
        --poszer     strips (-) sign from numbers represented as 0
EOF
      exit -1

  endsw

end

set joblist = ($argv)
if ($#joblist == 0 ) set joblist = (1 2 3 4 5 6 7)

echo "test.mmag:   tests the micromagnetics program lmmag"

echo $joblist | grep 1 >/dev/null
if ($status) goto chk1e
cat <<EOF

--- Test 1.  Input file ctrl.mmag ---
             Invokes lmmag spin-dynamics using an artificial hamiltonian
             specified in the DYN category.

EOF
call query chk11 'run this test'
chk11:
set pass
if ($a == "s") goto chk1e
# ... Look for executables
findcmd chk11a rdcmd "$path" "optional"
chk11a:
findcmd chk11b lmmag "$path" "$topdir"
chk11b:
#  findcmd chk11c lmstr "$path" "optional"
#  chk11c:
set refout=$testdir/out.mmag.ntherm=0 testout=out.lmmag testcat=TEST0T
echo " "
echo "$space  The first test integrates the Landau-Lifshiftz equations of"
echo "$space  motion without global deamons, and therefore the energy should"
echo "$space  be approximately conserved."
echo " "
echo "$space rm -f *.mmag ; cp $testdir/{ctrl,eula}.mmag ."
             rm -f *.mmag ; cp $testdir/{ctrl,eula}.mmag .
runrdcmd chk12 %11f $testout "-cat:$testcat --noerr ctrl.mmag"
chk12:
if ($?add0) then
  echo -n "         ..." ; $add0 $testout
else if ($?poszer) then
  echo -n "         ..." ; $poszer $testout
endif

call zdiffiles chk13 "CPU -1 $testout $refout"
chk13:

set refline = `zcat  $refout | awk '{if ($12 == "etot") {print;exit}}'`
set outline = `cat  $testout | awk '{if ($12 == "etot") {print;exit}}'`
set ehf1r = `echo $refline | awk '{{print $14}}'`
set ehf1  = `echo $outline | awk '{{print $14}}'`
set mom1r = `echo $refline | awk '{{print $11}}'`
set mom1  = `echo $outline | awk '{{print $11}}'`

set nend = `cat      $testout | awk '{if ($12 == "etot") {print}}' | wc | awk '{print $1}'`

set refline = `zcat  $refout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set outline = `cat  $testout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set ehfn  = `echo $refline | awk '{{print $14}}'`
set ehfnr = `echo $outline | awk '{{print $14}}'`
set momn  = `echo $refline | awk '{{print $11}}'`
set momnr = `echo $outline | awk '{{print $11}}'`

  echo "$space program ran for $nend iterations."
  echo "$space starting iteration total energy     = $ehf1"
  echo "$space starting iteration reference energy = $ehf1r"
  echo "$space starting iteration mag moment       = $mom1"
  echo "$space starting iteration ref mag moment   = $mom1r"

  echo "$space final iteration total energy        = $ehfn"
  echo "$space final iteration reference energy    = $ehfnr"
  echo "$space final iteration mag moment          = $momn"
  echo "$space final iteration ref mag moment      = $momnr"

echo ' '
set deftol1 = 1e-6
compare_res chk1ca "initial total energy" $ehf1 $ehf1r $deftol1  pass
chk1ca:
compare_res chk1cb "final iter total energy" $ehfn $ehfnr $deftol1  pass
chk1cb:

set refout=$testdir/out.mmag.ntherm=2 testout=out.lmmag testcat=TEST2T
echo " "
echo "$space  This test integrates the Landau-Lifshiftz equations of"
echo "$space  motion with two global deamons.  Now the energy changes"
echo "$space  quickly with iteration."
echo " "
echo "$space rm -f *.mmag ; cp $testdir/{ctrl,eula}.mmag ."
             rm -f *.mmag ; cp $testdir/{ctrl,eula}.mmag .
runrdcmd chk1b2 %11f $testout "-cat:$testcat --noerr ctrl.mmag"
chk1b2:
if ($?add0) then
  echo -n "         ..." ; $add0 $testout
else if ($?poszer) then
  echo -n "         ..." ; $poszer $testout
endif

call zdiffiles chk1b3 "CPU -1 $testout $refout"
chk1b3:

set outline = `cat  $testout | awk '{if ($12 == "etot") {print;exit}}'`
set refline = `zcat  $refout | awk '{if ($12 == "etot") {print;exit}}'`
set ehf1  = `echo $refline | awk '{{print $14}}'`
set ehf1r = `echo $outline | awk '{{print $14}}'`
set mom1  = `echo $refline | awk '{{print $11}}'`
set mom1r = `echo $outline | awk '{{print $11}}'`

set nend = `cat      $testout | awk '{if ($12 == "etot") {print}}' | wc | awk '{print $1}'`

set refline = `zcat  $refout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set outline = `cat  $testout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set ehfn  = `echo $refline | awk '{{print $14}}'`
set ehfnr = `echo $outline | awk '{{print $14}}'`
set momn  = `echo $refline | awk '{{print $11}}'`
set momnr = `echo $outline | awk '{{print $11}}'`

  echo "$space program ran for $nend iterations."
  echo "$space starting iteration total energy     = $ehf1"
  echo "$space starting iteration reference energy = $ehf1r"
  echo "$space starting iteration mag moment       = $mom1"
  echo "$space starting iteration ref mag moment   = $mom1r"

  echo "$space final iteration total energy        = $ehfn"
  echo "$space final iteration reference energy    = $ehfnr"
  echo "$space final iteration mag moment          = $momn"
  echo "$space final iteration ref mag moment      = $momnr"

echo ' '
set deftol1 = 1e-6
compare_res chk1bca "initial total energy" $ehf1 $ehf1r $deftol1  pass
chk1bca:
compare_res chk1bcb "final iter total energy" $ehfn $ehfnr $deftol1  pass
chk1bcb:



if ($?pass) then
    echo "$space test 1 PASSED"
else
    echo "$space test 1 FAILED"
    set failed = ($failed 1)
endif

chk1e:

echo $joblist | grep 2 >/dev/null
if ($status) goto chk2e
cat <<EOF

--- Test 2.  Input file ctrl.bccfe ---
             Invokes lmmag reading an LDA-generated hamiltonian
             and site data from files rsj and site

EOF
call query chk21 'run this test'
chk21:
set pass
if ($a == "s") goto chk2e
# ... Look for executables
findcmd chk21a rdcmd "$path" "optional"
chk21a:
findcmd chk21b lmmag "$path" "$topdir"
chk21b:
#  findcmd chk21c lmstr "$path" "optional"
#  chk21c:
set refout=$testdir/out.mmag.bccfe testout=out.lmmag testcat=TESTMM
echo " "
echo "$space rm -f *.bccfe ; cp $testdir/{ctrl,eula,site,rsj}.bccfe ."
             rm -f *.bccfe ; cp $testdir/{ctrl,eula,site,rsj}.bccfe .
runrdcmd chk22 %11f $testout "-cat:$testcat --noerr ctrl.bccfe"
chk22:
if ($?add0) then
  echo -n "         ..." ; $add0 $testout
else if ($?poszer) then
  echo -n "         ..." ; $poszer $testout
endif


call zdiffiles chk23 "CPU -1 $testout $refout"
chk23:

set refline = `zcat  $refout | awk '{if ($12 == "etot") {print;exit}}'`
set outline = `cat  $testout | awk '{if ($12 == "etot") {print;exit}}'`
set ehf1r = `echo $refline | awk '{{print $14}}'`
set ehf1  = `echo $outline | awk '{{print $14}}'`
set mom1r = `echo $refline | awk '{{print $11}}'`
set mom1  = `echo $outline | awk '{{print $11}}'`

set nend = `cat      $testout | awk '{if ($12 == "etot") {print}}' | wc | awk '{print $1}'`

set refline = `zcat  $refout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set outline = `cat  $testout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set ehfn  = `echo $refline | awk '{{print $14}}'`
set ehfnr = `echo $outline | awk '{{print $14}}'`
set momn  = `echo $refline | awk '{{print $11}}'`
set momnr = `echo $outline | awk '{{print $11}}'`

  echo "$space program ran for $nend iterations."
  echo "$space starting iteration total energy     = $ehf1"
  echo "$space starting iteration reference energy = $ehf1r"
  echo "$space starting iteration mag moment       = $mom1"
  echo "$space starting iteration ref mag moment   = $mom1r"

  echo "$space final iteration total energy        = $ehfn"
  echo "$space final iteration reference energy    = $ehfnr"
  echo "$space final iteration mag moment          = $momn"
  echo "$space final iteration ref mag moment      = $momnr"

echo ' '
set deftol1 = 1e-6
compare_res chk2ca "initial total energy" $ehf1 $ehf1r $deftol1  pass
chk2ca:
compare_res chk2cb "final iter total energy" $ehfn $ehfnr $deftol1  pass
chk2cb:

if ($?pass) then
    echo "$space test 2 PASSED"
else
    echo "$space test 2 FAILED"
    set failed = ($failed 2)
endif

chk2e:

echo $joblist | grep 3 >/dev/null
if ($status) goto chk3e
cat <<EOF

--- Test 3.  Input file ctrl.fccni ---
             Invokes lmmag reading an LDA-generated hamiltonian for Ni

EOF
call query chk31 'run this test'
chk31:
set pass
if ($a == "s") goto chk3e
# ... Look for executables
findcmd chk31a rdcmd "$path" "optional"
chk31a:
findcmd chk31b lmmag "$path" "$topdir"
chk31b:
#  findcmd chk31c lmstr "$path" "optional"
#  chk31c:
set refout=$testdir/out.mmag.fccni testout=out.lmmag testcat=TESTMM
echo " "
echo "$space rm -f *.fccni ; cp $testdir/{ctrl,eula}.fccni ."
             rm -f *.fccni ; cp $testdir/{ctrl,eula}.fccni .
runrdcmd chk32 %11f $testout "-cat:$testcat --noerr ctrl.fccni"
chk32:
if ($?add0) then
  echo -n "         ..." ; $add0 $testout
else if ($?poszer) then
  echo -n "         ..." ; $poszer $testout
endif

call zdiffiles chk33 "CPU -1 $testout $refout"
chk33:

set refline = `zcat  $refout | awk '{if ($12 == "etot") {print;exit}}'`
set outline = `cat  $testout | awk '{if ($12 == "etot") {print;exit}}'`
set ehf1r = `echo $refline | awk '{{print $14}}'`
set ehf1  = `echo $outline | awk '{{print $14}}'`
set mom1r = `echo $refline | awk '{{print $11}}'`
set mom1  = `echo $outline | awk '{{print $11}}'`

set nend = `cat      $testout | awk '{if ($12 == "etot") {print}}' | wc | awk '{print $1}'`

set refline = `zcat  $refout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set outline = `cat  $testout | awk -v nend=$nend '{if ($12 == "etot") {count+=1; if (count == nend) {print;exit}}}' `
set ehfn  = `echo $refline | awk '{{print $14}}'`
set ehfnr = `echo $outline | awk '{{print $14}}'`
set momn  = `echo $refline | awk '{{print $11}}'`
set momnr = `echo $outline | awk '{{print $11}}'`

  echo "$space program ran for $nend iterations."
  echo "$space starting iteration total energy     = $ehf1"
  echo "$space starting iteration reference energy = $ehf1r"
  echo "$space starting iteration mag moment       = $mom1"
  echo "$space starting iteration ref mag moment   = $mom1r"

  echo "$space final iteration total energy        = $ehfn"
  echo "$space final iteration reference energy    = $ehfnr"
  echo "$space final iteration mag moment          = $momn"
  echo "$space final iteration ref mag moment      = $momnr"

echo ' '
set deftol1 = 1e-6
compare_res chk3ca "initial total energy" $ehf1 $ehf1r $deftol1  pass
chk3ca:
compare_res chk3cb "final iter total energy" $ehfn $ehfnr $deftol1  pass
chk3cb:

if ($?pass) then
    echo "$space test 3 PASSED"
else
    echo "$space test 3 FAILED"
    set failed = ($failed 3)
endif

chk3e:

echo ' '
if ($#failed <= 1) then
    echo "$space $testfile : all tests PASSED"
    echo " "
    exit 0
else
    shift failed
    echo "$space $testfile : These tests FAILED:" $failed
    echo " "
    exit -1
endif

# ---------------- showout --------------
exit
showout:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo ' '
  echo "$space Compare $callarg to line in file $refout":
  grep $callarg $testout
  zcat $refout | grep $callarg
  goto $quitjob

# ---------------- cnvt_d_fmt --------------
# converts exponential format #.##D## or #.##d## to #.##E##
# usage: cnvt_d_fmt retcall testvar testval
exit
cnvt_d_fmt:
  set quitjob = $retcall
  set $testvar = `echo $testval | sed s/D/E/ | sed s/d/E/`
  goto $quitjob

# ---------------- zdiffiles --------------
# calling argument should consist of four strings:
# 1st string = string that terminates zdiff
# 2nd string = integer that counts how many times terminator should occur before terminating
#              -1 -> last occurence
# 3nd string = first file name
# 4th string = second file name
# example: call zdiffiles chk69 "CPU 3 $testout $refout"
exit
zdiffiles:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  set files = ($callarg)
  set endstr = $files[1]
  shift files
  set nend = $files[1]
  shift files
  if ($nend == "-1") then
    set nend = `grep "$endstr" $files[1] | wc | awk '{print $1}'`
  endif

#    echo zdifffiles : $quitjob $nend
#    grep $endstr $files[1]

  query zdiff11 $quitjob "compare $files"
zdiff11:
  zdiff $files | awk -v endstr="$endstr" -v nend=$nend -v endl=0 -v endr=0 '{if ($1 == "<" && endl < nend) print ; if ($1 == ">" && endr < nend) print ; if ($1 == ">" || $1 == "<" || endl >= nend && endr >= nend) ; else {print} ; if ($1 == "<" && $2 == endstr) {endl+=1}; if ($1 == ">" && $2 == endstr) {endr+=1};}' | sed -n 1,50p
  echo " "
  goto $quitjob

# ---------------- compare_res --------------
# Compares two numbers $testvar-$refvar and unsets $passvar if |testvar-refvar|<tol
# usage: compares_res retcall keyword testvar refvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   refvar       : second number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar-refvar|<tol
exit
compare_res:
  set quitjob=$retcall
# echo $retcall $keyword $testvar $refvar $tol $passvar
  echo -n "$space $keyword ($testvar) within tol ($tol) of reference ($refvar)? ... "
  if (`echo $testvar $refvar | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);tl=1.001*tol} print (k<=tl)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- compare_res_0 --------------
# Compares a number $testvar and unsets $passvar if |testvar|<tol
# usage: compares_res_0 retcall keyword testvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar|<tol
exit
compare_res_0:
  set quitjob=$retcall
#  echo $retcall $keyword $testvar $tol $passvar
 echo -n "$space $keyword ($testvar) smaller than tol ($tol)? ... "
  if (`echo $testvar 0 | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- runjob --------------
exit
runjob:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space $callarg"
    echo " "
    $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      $callarg >> $appfile
      set retval = $status
    else
      echo "$space $callarg  > $outfile"
      $callarg > $outfile
      set retval = $status
  endif
  if ($retval != 0) goto cleanup
  goto $quitjob


# ---------------- runrdcmd --------------
exit
runrdcmd:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space Invoking rdcmd will execute the following job(s):"
    $rdcmd -f:$rdcmdfmt --n $callarg
    echo "$space $rdcmd '-f:rdcmd:%2f' $callarg"
                 $rdcmd '-f:rdcmd:%2f' $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      exit
#      $callarg >> $appfile
      set retval = $status
    else
      echo "$space ... the following job(s) will be executed by invoking "\""rdcmd $callarg"\"
      $rdcmd -f:$rdcmdfmt --n $callarg
      echo "$space ... starting invocation of rdcmd:"
      echo "$space $rdcmd '-f:#rdcmd:%2f' $callarg  >& $outfile"
      $rdcmd '-f:rdcmd:%2f' $callarg >& $outfile
      set retval = $status
    endif
  endif

  if ($retval == 0) then
    echo "$space Job(s) completed successfully; output in $outfile"
    if ($?poszer) then
      echo -n "         ..." ; $poszer $outfile
    else if ($?add0) then
      echo -n "         ..." ; $add0 $outfile
    endif
    goto $quitjob
  else
    echo "$space ...oops... the following command returned with nonzero exit status:"
    echo -n "$space   "
    grep $rdcmd:t{:} $outfile | tail -1 | sed 's/rdcmd:  //'
    goto cleanup
  endif

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prog_cmd = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... executable $prog_cmd not found in path"
endif
if ($found == 'no' && $make_path != "no") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must create or put '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  Invoking '"make $prog_cmd"' in $make_path should create it."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

# ---------------- query --------------
exit
query:
  unset skip
  if ($?slow != 0) then
    echo "$space *hit <return> to $callarg, s <return> to skip it."
    set a = ($<)
    if ($a == "") goto $retcall
    switch ($a)
      case "quit":
      case "q":
      case "a":
        exit
      case "i":
        unset slow
        breaksw
      case "s":
        set skip
        breaksw
      case "t":
        time
        goto query
      default:
        echo 'q to quit; i unsets slow; s skips this job, t shows time'
        goto query
    endsw
  endif
  goto $retcall

# ---------------- cleanup --------------
exit
cleanup:
  if ($retval != 0) echo "$space"'*'"job $callarg[1] returned with error status $retval"
  if ($retval != 0) echo "$space unacceptable error status ... $testfile aborting"
  exit $retval

# ---------------- List tests --------------
showtests:
cat <<EOF
  Usage: invoke with:   $testfile [switches] job

   job  material   tests
    1    mmag      spin dynamics in an artificial hamiltonian
    2    bcc fe    Reads an LDA-generated Heisenberg hamiltonian for Fe
    3    fcc ni    Reads an LDA-generated Heisenberg hamiltonian for Ni

EOF
exit
