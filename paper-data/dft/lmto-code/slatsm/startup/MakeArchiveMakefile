#!/bin/csh -f
#
# Shell script to generate a Makefile for archive library subs.a,
# which consists of an archive compiled from the source code in this directory.
#
# Usage: MakeArchiveMakefile [--patch] [--flist=fortran-file-list] [--clist=C-file-list] [--split] [--name archive-name] [--config machine-configuration] [--mnemonic machine-mnemonic]
# The arguments' purposes are described below.

# Switch --split:
# Breaks the archive macro into two parts

# Switch --flist:
# List of fortran files.  Extension is internally converted to .f

# Switch --clist:
# List of fortran files.  Extension is internally converted to .c

# Switch --patch:
# Generates patch to Makefile.
#   It uses shell script Special-Flags which tells MakeArchiveMakefile which routines
#   it needs to compile specially.  Special-Flags should produce 0 or
#   more lines of the form
#     $(FC) flags-here :: list-of-files
#   e.g.
#     $(FC) $(FLAGS_LESS) :: ropyln makidx
#    (Note that Makemakefile typically produces a generic $FLAGS_LESS)
#    The flags can be explicit or one defined generically.
#
# Switch --name archive-name:
# By default, MakeArchiveMakefile creates a Makefile for archive subs.a .
# Switch --name overrides this default.  archive-name should end in 'a.'

# Switch --config machine-configuration
# This is relevant when the --patch switch is used.
# By default, MakeArchiveMakefile will try to determine your machine configuration
# using the script config.guess, in the standard GNU format (config.sub)
# Switch ---config overrides this default.  config.sub is still used to check
# that whichever one it uses is valid.

# Optional argument machine-mnemonic
# This is relevant when the --patch switch is used.
# MakeArchiveMakefile may depend on the machine mnemonic (see script Makemakefile)
# to decide on what routines to compile specially (see Special-Flags below).
# By default, it extracts the machine mnemonic from Make.inc.  Supplying
# your own overrides this
#

# Thus MakeArchiveMakefile uses as input :
#
# 1. Make.inc, which contains the compiler switches and flags
#              and the machine mnemonic used to generate them.
#              This is typically produced by shell script Makemakefile.
#
# 2. config.guess which supplies information about the machine architecture
#    config.sub which verifies the validity of the name used.
#
# MakeArchiveMakefile produces a Makefile that can create the following
# (assuming subs.a is the archive name)
#
# make init
#    invokes /bin/csh on file 'subs-to-xxx', if it exists, with
#    xxx = a lower-case rendition of the machine-mnemonic.  This enables
#    machine-dependent customization of the archive via the Makefile.
#
# make
# make all
#    create the archive library subs.a

set thisfile = $0
set mnemonic = `grep MNEMONIC Make.inc | sed 's/.*= *//'`
set thisdir = $thisfile:h
if ($thisdir == $thisfile) set thisdir = `pwd`
set arnam = subs
set ARNAM = `echo $arnam | awk '{print toupper($1)}'`

#set verbose
set noglob
while ( x"$1" != "x" )
  set args = ($1)
  switch ($args[1])
    case "--patch"
      shift ; set patch; breaksw
    case "--split":
      shift ; set split; breaksw
    case "--flist=*":
      set flist = (`echo "$1" | sed s/--flist=//`)
      shift ; breaksw
    case "--clist=*":
      set clist = (`echo "$1" | sed s/--clist=//`)
      shift ; breaksw
    case "--config":
      shift ; set host_alias = $1 ; shift; breaksw
    case "--name":
      shift ; set arnam = $1 ;
      set ARNAM = `echo $arnam | awk '{print toupper($1)}'`
      shift; breaksw
    case "--mnemonic":
      shift ; set mnemonic = $1 ; shift; breaksw
    case "--h":
    case "--help":
       goto usage
    case "-*":
      echo MakeArchiveMakefile : unrecognized switch $1 ...
      exit -1
    default:
      echo MakeArchiveMakefile : unrecognized argument $1 ...
      exit -1
  endsw
end
unset noglob

if ($#argv > 1) echo "# MakeArchiveMakefile ... ignoring trailing arguments $2 ... "

# --- Get GNU machine configuration from config.guess ---
if (! $?host_alias) set host_alias = `$thisdir/config.guess`

set host = `$thisdir/config.sub $host_alias`
if ($status != 0) then
  echo $thisdir/MakeArchiveMakefile : unrecognized configuration $host_alias
  exit -1
endif

# --- Decompose configuration to get OS and machine_name ---
set maybe_os = `echo $host | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\2/'`
switch ($maybe_os)
  case "linux-gnu*":
    set os = $maybe_os
    set basic_machine = `echo $host | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\1/'`
    breaksw
  default:
    set basic_machine = `echo $host | sed 's/-[^-]*$//'`
    if ( $basic_machine != $maybe_os) then
      set os = `echo $host | sed 's/.*-//'`
    else
      set os
    endif
endsw

#  set host_os = `echo $host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
#  set host_cpu = `echo $host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`

# --- Get compiler name from Make.inc ---
set compiler = `grep '^FC ' Make.inc | tail -1 | sed 's/FC *= *\([A-Za-z0-9]*\)\( .*\|$\)/\1/'`

if ($?patch) then

echo "# Patch portion of Makefile generated by MakeArchiveMakefile for library $arnam.a"
echo "# machine configuration:  $host"
echo "# compiler as extracted from Make.inc:  $compiler"
echo "# Machine mnemonic : $mnemonic"
echo ' '

echo '# Creating compiler-specific patches to generic archive'
if (-x Special-Flags) then
  set flagsw = "$host $mnemonic"
# set flagsw = "ymp-cray-unicos CRAY"
# set flagsw = "rs6000-ibm-aix3.2.5 AIX90"
  set nlines = `./Special-Flags $flagsw | awk 'BEGIN {nlines=1} { nlines++ }; END { print nlines-1 }' `
  echo "# --- MakeArchiveMakefile : $nlines set(s) files needing special compilation ---"
  echo ' '
  set i = 0
  while ($i < $nlines)
    @ i = $i + 1
    set line = `./Special-Flags $flagsw | head -$i | tail -1`
    echo $line | grep :: >/dev/null
    if ($status != 0) then
      echo '# ... (warning) the following rule is missing "::"' and will be ignored:
      echo "#     $line"
    else
      set fcf = ` echo $line | sed 's/\(.*\)::\(.*\)/\1/' `
      set lst = ` echo $line | sed 's/\(.*\)::\(.*\)/\2/' `
      echo "# ... file(s) $lst"
      foreach k ($lst)

	switch ($k)
	  case "[a-l]*":
	    echo '$('$ARNAM')'\($k.o\)': '
            breaksw

	  case "[m-z]*":
	    if ($?split) then
	      echo '$('$ARNAM'2)'\($k.o\)': '
	    else
	      echo '$('$ARNAM')'\($k.o\)': '
	    endif
	endsw

	echo "	$fcf -c $k.f"

	switch ($k)
	  case "[a-l]*":
	    echo '	ar rv $('$ARNAM')' $k.o
            breaksw

	  case "[m-z]*":
	    if ($?split) then
	      echo '	ar rv $('$ARNAM'2)' $k.o
	    else
	      echo '	ar rv $('$ARNAM')' $k.o
	    endif
	endsw

	echo '	rm -f' $k.o
	echo ' '
      end
    endif
    echo ' '
  end
else
  echo '# No file Special-Flags; no attempt to add patches'
endif

if ($host =~ *-dec-osf*) then
  echo ' '
  echo '# Special patch to archive .o files with DEC make.'
  echo '# It may be bizarre, but it runs without generating an error,'
  echo '# which is no small accomplishment.'
  echo '	echo patch to archive .o files using DEC make ...'
  echo '	touch xx.o'
  echo '	if [ ` (ls -1 | grep -c [.]o$$) ` != 1 ] ; then \'
  echo '	(rm xx.o; ar rv '$arnam'.a *.o ; rm *.o ) ;\'
  echo '	else (rm xx.o); fi'
  echo '	$(RANLIB) '$arnam'.a'
endif

if (-r Make.patch0) then
  echo '# --- Appending Make.patch0 ---'
  cat Make.patch0
endif

exit
endif

echo "# Makefile generated by MakeArchiveMakefile for library $arnam.a"
echo " "

echo '# --- Shell variables and compiler switches ---'
echo "include Make.inc"
echo ' '

echo '# --- archive library ---'
echo "$ARNAM =" '$(srcdir)'/$arnam.a
if ($?split) echo "$ARNAM"2" =" '$(srcdir)'/$arnam{2}.a
echo ' '

set BACKSLASH = '\'
#  if ($os =~ linux*) set BACKSLASH = '\\'

if ($?split) then
  echo 'ALL:	$('$ARNAM') $('$ARNAM'2)'
else
  echo 'ALL:	$('$ARNAM')'
endif

if ($?split) then
  echo '.PRECIOUS:	$('$ARNAM') $('$ARNAM'2)'
  echo ' '
  echo "$arnam":'	$('$ARNAM') $('$ARNAM'2)'
  echo ' '
  echo "$arnam".a:'	$('$ARNAM') $('$ARNAM'2)'
  echo ' '
else
  echo '.PRECIOUS:	$('$ARNAM')'
  echo ' '
  echo "$arnam":'	$('$ARNAM')'
  echo ' '
  echo "$arnam".a:'	$('$ARNAM')'
  echo ' '
endif

echo "# ... echos path to ccomp"
echo 'ccomp:	'
echo '	echo $(CCOMP)'
echo ' '

echo '# --- Architecture-specific patches ---'
echo "include Make.patch"
echo ' '

# --------------- Archive files *.f ---------------
if ($?flist) then
  set fnames = ($flist)
  if ($?split) then
     echo '--split not implemented in conjunction with --flist'
     exit -1
  endif
else
  set fnames = ` /bin/ls -1 *.f `
  if ($?split) set names = ` /bin/ls -1 *.c [a-l]*.f `
endif
if ($?clist) then
  set cnames = ($clist)
else
  set cnames = ` /bin/ls -1 *.c `
endif
set names = ($cnames $fnames)

set added
echo '$('$ARNAM'):	$('$ARNAM')'\($names[1]:r.o\) $BACKSLASH
set added = ($names[1]:r.o)
foreach i ( $names[2-$#names] )

# Avoid duplicates
  set lst = ($added)
  set now = $i:r.o
  while ($#lst > 0)
    if ($lst[1] == $now) goto skip_dupl
    shift lst
  end
  if ($names[$#names]:r.o != $now) echo '	$('$ARNAM')'\($now\) $BACKSLASH
  if ($names[$#names]:r.o == $now) echo '	$('$ARNAM')'\($now\)
  set added = ($added $now)
skip_dupl:
end
echo '	$(RANLIB) $@'
echo ' '

if ($?split) then
  set names = ` /bin/ls -1 *.c [m-z]*.f `
  echo '$('$ARNAM'2):	$('$ARNAM'2)'\($names[1]:r.o\) $BACKSLASH
  foreach i ( $names[2-$#names] )
   if ($names[$#names] != $i) echo '	$('$ARNAM'2)'\($i:r.o\) $BACKSLASH
   if ($names[$#names] == $i) echo '	$('$ARNAM'2)'\($i:r.o\)
  end
  echo '	$(RANLIB) $@'
  echo ' '
endif

echo 'clean: '
echo '	-rm -f $('$ARNAM') Makefile Names'
exit

exit
usage:
echo 'usage : MakeArchiveMakefile [--switches]'
echo '        Creates a Makefile for an archive, or portions of it'
echo ' '
echo '        switches:'
echo '          --help'
echo '          --h'
echo '            show this message'
echo ' '
echo '          --patch'
echo '            creates patch portion of Makefile'
echo ' '
echo '          --split'
echo '            splits the archive macro into two parts'
echo '            (a few compilers cannot handle many files)'
echo ' '
echo '          --name archive-name'
echo "            names the archive.  Without this switch, name defaults to 'subs'"
echo ' '
echo '          --config machine-configuration'
echo '            (relevant when --patch option is used)'
echo "            specify machine configuration in the gnu 'config.sub' style"
echo "            If you do not specify, 'config.sub' will be used to determine it."
echo "            If you do specify, config.sub will check that your spec is valid."
echo ' '
echo '          --mnemonic machine-mnemonic'
echo '            (relevant when --patch option is used)'
echo '            the machine mnemonic (specified in Makemakefile) is used for'
echo '            architecture-specific parts of the Makefile (mostly the header)'
