Here are some instructions on compiling slatsm.a for OPENMP. 

There is very little to do for openmp, at least on the Intel x86_64
architecture (the only hardware where it has been tested).

Routine mpibc, written for the MPI case, has been extended so that under openmp,
	mpipid(0)   returns the number of threads
	mpipid(1)   returns a current thread 
                    (must be called inside an openmp parallel construct)

One potential application, htridx.f, has been implemented with openmp,
but its performance is very disppointing.  The LAPACK zheev
parallelizes reasonably well, though, so the LAPACK version of zhev
should be taken.

-------------- Modify Make.inc ---------
Modify Make.inc to include variable LIBLOC-OPENMP, which links the OPENMP versions.  
Example for Intel x86_64, version 11 compiler, serial and openmp variables:

LIBLOC        = -L/opt/intel/Compiler/11.0/074/mkl/lib/em64t -lfftw3xf_intel -lmkl_intel_lp64 -lmkl_sequential   -lmkl_lapack -lmkl_core -lpthread 
LIBLOC-OPENMP = -L/opt/intel/Compiler/11.0/074/mkl/lib/em64t -lfftw3xf_intel -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_lapack -lmkl_core -liomp5 -lpthread 


-------------- Making the library ---------
No automatic script is available at present.  

To make slatsm-OPENMP.a, do the following in directory slatsm:

cp slatsm.a slatsm-OPENMP.a
ccomp -dOPENMP ./mpibc.f xx.f
compile ./xx.f
mv xx.o mpibc-OPENMP.o
ar dv slatsm-OPENMP.a mpibc.o
ar rv slatsm-OPENMP.a mpibc-OPENMP.o

If zhev.f does NOT use the LAPACK branch, do:

ccomp -dLAPACK ./zhev.f xx.f
compile ./xx.f
mv xx.o zhev.o
ar rv slatsm-OPENMP.a zhev.o

