#!/bin/csh -f
#
# Shell script to generate a Makefile for fortran programs.
#
# Makemakefile creates a Makefile to compile and link fortran programs, with
# compiler switches and libraries dependent on certain machine characteristics.
# The Makefile is written to standard output.
#
# Makemakefile only recognizes a limited set of compilers and environments.
# There are several ways to set the characteristics as described in the help.
# If your architecture does not match one supplied, please amend this script
# accordingly and send your changes to mvansch@ca.sandia.gov
# Makemakefile tries to encapsulate the machine architecture/compiler combination
# into a single mnemonic.  For a list of mnemonics Makemakefile knows about,
# type 'Makemakefile --show'
#
# See usage at end of this script for usage.
#
# Revisions
#  11 Jul 03  -mp switch for SGI now manual, not automatic
#  19 Mar 03  Revised to better return compiler and linker names
#   3 Jul 01  Revised compiler environment variable from 'F77' to 'FC'

# --- Setup and defaults ---
set dbgf = '#'; set nodbgf
set thisfile = $0
set thisdir = $thisfile:h
if ($thisdir == $thisfile) set thisdir = `pwd`

# --- Find machine mnemonic and set vars cc, fc to default compilers ---
if ($#argv == 0) goto message
set cc=cc fc=f77
set mnemonic=$1
switch ($1)
  case --show:
    goto show
  case --:
    set mnemonic='no'
    set config=`$thisdir/config.guess`
    shift
    breaksw
  case -*:
    goto message
  case AIX:   
  case AIX90: 
  case SGI:
  case SGI4:
  case SGI8:
  case SGIO2:
  case HP:
  case DECA:
  case DEC:
  case APOLLO:
  case CONVEX:
  case CRAY:
  case CRAY2:
  case SUN:
  case SUN-ULTRA:
  case LINUXI:
  case LINUX_PGI:
  case LINUXA:
  case LINUXF:
  case LINUXPPC:
  case INTEL_IFC
  case VANILLA:
    shift
    breaksw

  First argument wasn't a recognized mnemonic. Try GNU machine configuration
  default:
    set config=`$thisdir/config.sub $1`
    if ( $status != 0 ) then
      $thisdir/echo_stderr "Makemakefile failed to resolve $1 into a machine mnemonic or configuration"
      exit -1
    endif
#    echo "#     Makemakefile: using FC=$fc and $config"
    set mnemonic='no'
    shift
endsw

if ( $mnemonic == 'no' ) then
  if ($?FC) then
    set mnemonic=`$thisdir/machine-mnemonic $config -FC=$FC`
    set retval = $status
  else
    set mnemonic=`$thisdir/machine-mnemonic $config -FC=`
    set retval = $status
  endif
  if ( $retval != 0 ) then
    $thisdir/echo_stderr "Makemakefile (warning) using mnemonic VANILLA for machine configuration $config"
    set mnemonic = VANILLA
  endif
endif

# --- Parse options ---
set lib = "" outfile = '$@'
# this is the default fortran and C compiler
# if ($?FC) then
#   set fc=$FC
# else if ($?F77) then
#   set fc=$F77
# else
#   set fc=f77
# endif
# set cc = cc

options:
if ($#argv > 0) then
# echo "parsing argument $1"
  switch ($1)
    case "--show":
      goto show
    case "--getfc":
      set getfc; shift; goto end-of-switches
    case "--getcc":
      set getcc; shift; goto end-of-switches
    case "--check":
      switch ($mnemonic)
	case AIX:
	case AIX90:
	case SGI:
	case SGI4:
	case SGI8:
	case SGIO2:
	case HP:
	case DECA:
	case DEC:
	case APOLLO:
	case CONVEX:
	case CRAY:
	case CRAY2:
	case SUN:
	case SUN-ULTRA:
	case LINUXI:
	case LINUXPPC:
	case LINUX_PGI:
	case LINUXA:
	case LINUXF:
        case INTEL_IFC
	case VANILLA:
          echo $mnemonic
          exit 0
        default:
          $thisdir/echo_stderr '...' Makemakefile : unrecognized mnemonic $mnemonic
          exit -1
	endsw

    case "--*":
      goto message
    case "-i":
      shift; set includestr = "$1" ; shift ; goto options
    case "-mp":
      set mp; shift; goto options
    case "-f90":
      set lf90; shift; goto options
    case "-l":
      shift ; set lib = "$lib $1"; shift ; goto options
    case "-defs":
      set defs ; shift; goto options
    case "-o":
      shift ; set outfile = "$1"; shift ; goto options
    case "-a":
      set append; shift; goto options
    case "-db":
      set dbg ; set dbgf; set nodbgf = '#'; shift; goto options
    case "-BIN":
      if (! $?lbin) set lbin
      shift ; set lbin = $1; shift ; goto options
    case "-LIBSLA":
      if (! $?lsla) set lsla
      shift ; set lsla = ($lsla $1); shift ; goto options
    case "-LIBLOC":
      if (! $?lloc) set lloc
      shift ; set lloc = ($lloc $1); shift ; goto options
  endsw
else
  if (! $?defs) goto message
endif
end-of-switches:
if ($#argv == 0 && $?defs == 0 && $?getfc == 0 && $?getcc == 0) goto message

# --- Default compilers $fc and $cc, when they differ from cc and f77 ---
switch ($mnemonic)
  case AIX:
    set cc=cc fc=xlf
    if ($?FC) then
      if ("$FC" == "xlf90") set lf90
    endif
    if ($?lf90) set fc=xlf90
    breaksw
  case AIX90:
    set cc=cc fc=xlf90
    breaksw
  case SGI:
#     set mp
    breaksw
  case SGI4:
#     set mp
    breaksw
  case SGI8:
#     set mp
    if ($?FC) then
      if ("$FC" == "f90") set lf90
    endif
    if ($?lf90) set fc=f90
    breaksw
  case SGIO2:
#     set mp
    breaksw
  case HP:  
    if ($?FC) then
      if ("$FC" == "f90") set lf90
    endif
    if ($?lf90) set fc=f90
    breaksw
  case DECA:
    if (! $?LK) set LK=cc
    breaksw
  case DEC:
    breaksw
  case APOLLO:
    if (! $?LK) set LK=ld
    breaksw
  case CONVEX:
   set fc=fc
    breaksw
  case CRAY:  
   set fc=f90
    breaksw
  case CRAY2: 
   set fc=cf77
    breaksw
  case SUN:
    if ($?FC) then
      if ("$FC" == "f90") set lf90
    endif
    if ($?lf90) set fc=f90
    breaksw
  case SUN-ULTRA:
    breaksw
  case LINUXI:
    set fc=g77
    breaksw
  case LINUX_PGI:
    set cc=pgcc fc=pgf77
    if ($?FC) then
      if ("$FC" == "pgf90") set lf90
    endif
    if ($?lf90) set fc=pgf90
    breaksw
  case LINUXA:
    set fc=g77
    breaksw
  case LINUXF:   
    set fc=fort
    breaksw
  case LINUXPPC:
    set fc=g77
    breaksw
  case INTEL_IFC 
    set cc=icc fc=ifc
    breaksw
  case VANILLA:
    breaksw
endsw
if (! $?cc) set cc = none
if (! $?fc) set fc = none
if (! $?FC) set FC = "$fc"
if (! $?CC) set CC = "$cc"
if ($?append) goto Append

# --------------- Handle request for fortran or C compiler name ---
if ($?getfc != 0) then
  echo $FC
  exit 0
endif
if ($?getcc != 0) then
  echo $CC
  exit 0
endif

# --------------- Compiler definitions and flags ---------------

echo "# --- Makemakefile: machine dependent compilers and flags ---"
if ($?config != 0) then
                   echo "#     machine configuration: $config"
endif
                   echo "#     machine mnemonic     : $mnemonic"
if ($?defs) then
                   echo "#     Use fortran compiler : $FC  (default = $fc)"
                   echo "#     Use C compiler       : $CC  (default = $cc)"
endif

echo "MNEMONIC = $mnemonic"

# --------------- C compiler and flags ---------------
echo '# ... C compiler and flags'
set cflags
switch ($mnemonic)
  case LINUX*:
      set cflags = "-DLINUX $cflags"
      breaksw
  default:
endsw
if ($?CC == 0) then
  set CC="$cc"
endif
echo "CC = $CC"
# ... Silicon Graphics R8000, R10000, R12000
if ($mnemonic == SGI8) then
  if ("$CC" != cc) then
    echo "Makemakefile: unrecognized compiler $CC"
    exit -1
  endif
  echo $nodbgf"CFLAGS = $cflags -DSGI -D$mnemonic -64 -O"
    echo $dbgf"CFLAGS = $cflags -DSGI -D$mnemonic -64 -g"

else if ($mnemonic == SGIO2 || $mnemonic == SGI4) then
    echo $nodbgf"CFLAGS = $cflags -DSGI -D$mnemonic -n32 -mips4 -O"
    echo $dbgf"CFLAGS = $cflags -DSGI -D$mnemonic -n32 -mips4 -g"

# ... Intel C compiler
else if ($mnemonic == INTEL_IFC && "$CC" == "icc") then
  echo $nodbgf"CFLAGS = $cflags -D$mnemonic -O"
    echo $dbgf"CFLAGS = $cflags -D$mnemonic -g"

# ... Portland group Fortran compiler
else if ($mnemonic == LINUX_PGI) then
    if ("$CC" == "pgcc") then
    echo $nodbgf"CFLAGS = $cflags -D$mnemonic -fast -O2"

  else if ("$CC" == gcc || "$CC" == cc) then
    echo $nodbgf"CFLAGS = $cflags -D$mnemonic -funroll-loops -ffast-math -finline -w -O3"
    echo   $dbgf"CFLAGS = $cflags -D$mnemonic -funroll-loops -ffast-math -finline -w -g"
  else
    echo 'Makemakefile: unrecognized C compiler for LINUX_PGI :' $CC ... aborting
    exit -1
  endif

# ... AIX C compiler
else if ($mnemonic =~ AIX*) then
    echo $nodbgf"CFLAGS = $cflags -DAIX -D$mnemonic -O"
    echo $dbgf"CFLAGS = $cflags -DAIX -D$mnemonic -g"

# ... Sun C compiler
else if ($mnemonic =~ SUN*) then
    echo $nodbgf"CFLAGS = $cflags -DSUN -D$mnemonic -O"
    echo $dbgf"CFLAGS = $cflags -DSUN -D$mnemonic -g"

# ... Cray C compiler
else if ($mnemonic =~ CRAY*) then
    echo $nodbgf"CFLAGS = $cflags -DCRAY -D$mnemonic -O"
      echo $dbgf"CFLAGS = $cflags -DCRAY -D$mnemonic -g"

# ... DEC alpha C compiler
else if ($mnemonic =~ DECA) then
    echo $nodbgf"CFLAGS = $cflags -DDEC -D$mnemonic -O"
    echo $dbgf"CFLAGS = $cflags -DDEC -D$mnemonic -g"

# ... DEC C compiler
else if ($mnemonic =~ DEC*) then
    echo $nodbgf"CFLAGS = $cflags -DDEC -D$mnemonic -O"
    echo $dbgf"CFLAGS = $cflags -DDEC -D$mnemonic -g"

# ... DEC C compiler under linux
else if ($mnemonic =~ LINUXF && ("$CC" == ccc)) then
  echo $nodbgf"CFLAGS = $cflags -fast -O3 -arch host -tune host -recursive"
    echo $dbgf"CFLAGS = $cflags -g -arch host -tune host -recursive"

# ... generic gcc compiler
else if (($mnemonic =~ LINUX* || $mnemonic == INTEL_IFC) && ("$CC" == cc || "$CC" == gcc)) then
    echo $nodbgf"CFLAGS = $cflags -D$mnemonic -O3 -funroll-loops -ffast-math -finline -w"
      echo $dbgf"CFLAGS = $cflags -D$mnemonic -g"

# ... generic C compiler
else
    echo $nodbgf"CFLAGS = $cflags -D$mnemonic -O"
      echo $dbgf"CFLAGS = $cflags -D$mnemonic -g"

endif

# --------------- fortran compiler and flags, and linker ---------------
echo -n '# ... Fortran compiler and flags, and linker'
if ($?FC == 0) then
  set FC="$fc"
endif
if ($?LK == 0) then
  set LK="$FC"
endif
if ($mnemonic == VANILLA) then
  echo ' ... for VANILLA'
  echo "FC = $FC"
  echo $nodbgf'FFLAGS = -O'
  echo $nodbgf'FFLAGS_LESS ='
    echo $dbgf'FFLAGS = -g'
    echo $dbgf'FFLAGS_LESS = -g'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 = -O'
    echo $dbgf'LKFLAGS1 = -g'
  echo 'LKFLAGS2 ='

else if ($mnemonic == DEC) then
  echo ' ... for the DEC'
  echo "FC = $FC"
  echo $nodbgf'FFLAGS = -O -G 0'
    echo $dbgf'FFLAGS = -g -G 0'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 =  -O'
    echo $dbgf'LKFLAGS1 =  -g'
  echo 'LKFLAGS2 ='

else if ($mnemonic == DECA) then
  echo ' ... for the DEC Alpha'
  echo "FC = $FC"
  echo $nodbgf'FFLAGS_MORE = -fast -O5 -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS = -fast -O4 -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_LESS = -fast -O3 -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_LESS2 = -O -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_LESS3 = -O1 -arch host -tune host -recursive'
    echo $dbgf'FFLAGS = -g -recursive'
    echo $dbgf'FFLAGS_LESS = -g -recursive'
    echo $dbgf'FFLAGS_LESS2 = -g -recursive'
    echo $dbgf'FFLAGS_LESS3 = -g -recursive'
# set notc
  if ($?notc) then
    echo "LK = $FC"
    echo $nodbgf'#LKFLAGS1 = -non_shared -fast -O5 -arch host -tune host -recursive'
    echo $nodbgf'LKFLAGS1 = -fast -arch host -tune host -recursive'
      echo $dbgf'LKFLAGS1 = -g -recursive'
  else
  echo 'LK = cc'
    echo $nodbgf'#LKFLAGS1 = -non_shared -fast -O4 -arch host -tune host'
    echo $nodbgf'LKFLAGS1 = -fast -O4 -arch host -tune host'
    echo $dbgf'LKFLAGS1 =  -g'
  endif
  echo 'LKFLAGS2 = -lUfor -lfor -lFutil -lm -lots'

else if ($mnemonic =~ SGI*) then
  if ($mnemonic == SGI)   set mflg = '-G 0 -mips2'
  if ($mnemonic == SGI)   echo ' ... for an old SGI'
  if ($mnemonic == SGI4)  set mflg = '-G 0 -mips2'
  if ($mnemonic == SGI4)  echo ' ... for an SGI R4000'
  if ($mnemonic == SGI8)  set mflg = '-G0 -mips4'
  if ($mnemonic == SGI8)  echo ' ... for an SGI R8000, R10000, or R12000'
  if ($mnemonic == SGIO2) set mflg = '-G 0 -n32 -mips4'
  if ($mnemonic == SGIO2) echo ' ... for an SGI O2'
  set sopt
  if ($mnemonic == SGI4)  set sopt = "-sopt,-so=3,-r=3"
  if ($mnemonic == SGI8)  set sopt = "-sopt,-so=3,-r=3"
  if ($mnemonic == SGIO2) set sopt = "-sopt,-so=3,-r=3"
# SGI has two different compiler versions, which complicates matters
# Not all of these cases have been checked...user may need to tune this:
  set compiler_name = `f77 -64 -version | & awk '{print $1}'`
  switch ("$compiler_name")
    case "Ragnarok":
#       set mp
      echo '# ... Using pre 7.x compiler'
      breaksw

    case "MIPSpro":
    case "Mongoose":
    case "f77:":
      set sopt
      set procid = `hinv | grep Processor | grep MHZ | head -1 | awk '{print $4}'`
      if ($procid == 'MHZ') set procid = `hinv | grep Processor | grep MHZ | head -1 | awk '{print $5}'`
      if ($procid == 'IP32') then
        set procnam = `hinv | grep Processor | grep CPU | head -1 | awk '{print $3}'`
        if ($procnam == 'R5000') set procid = {$procid}_5k
        if ($procnam == 'R10000') set procid = {$procid}_10k
      endif
      set mflg = "$mflg -TARG:platform=$procid"
      set sopt = "-OPT:IEEE_arithmetic=3:roundoff=3:Olimit=0:div_split=ON:alias=typed -LNO:opt=1"
      if ($mnemonic == SGIO2) then
        set mflg = "$mflg -n32"
      else
        set mflg = "$mflg -64"
      endif
      if ($?mp) then
        set mp = "-mp"
      else
       set mp
      endif
      breaksw
  endsw

  if (! $?mp) then
#     echo 'Makemakefile: compiler doesn''t follow expected patterns ... aborting'
#     exit -1
    set mpl
  else
    set mpl = "$mp"
  endif

  echo "FC = $FC"
  echo $nodbgf"FFLAGS = $mflg -O3 $mpl $sopt"
  echo $nodbgf"FFLAGS_LESS = $mflg -O $mpl"
  echo $nodbgf"FFLAGS_LESS2 = $mflg -O1 $mpl"
  echo $nodbgf"FFLAGS_NONE = $mflg -O0"
    echo $dbgf"FFLAGS = $mflg -g -DEBUG:trap_uninitialized=ON $mpl"
    echo $dbgf"FFLAGS_LESS = $mflg -g -DEBUG:trap_uninitialized=ON"
    echo $dbgf"FFLAGS_NONE = $mflg -g -DEBUG:trap_uninitialized=ON"
  echo "LK = $LK"
  echo $nodbgf"LKFLAGS1 = $mflg -O3 $mpl $sopt"
    echo $dbgf"LKFLAGS1 = $mflg -g $mpl"
  echo "LKFLAGS2 ="

else if ($mnemonic =~ SUN*) then
  echo ' ... for the SUN running Solaris'
  echo "FC = $FC"
  set arch
  if ($mnemonic == "SUN-ULTRA") set arch = "-cg92"
  echo $nodbgf"FFLAGS = -fast -O5 -depend -fsimple=2 -xnolibmopt $arch"
  echo $nodbgf"FFLAGS_LESS = -fast -O2 -fsimple=2 -xnolibmopt $arch"
  echo $nodbgf"FFLAGS_NONE = -fast -O1 -fsimple=0 -xnolibmopt $arch"
    echo $dbgf"FFLAGS = -g -fast -O5 -depend -fsimple=2 -xnolibmopt $arch"
    echo $dbgf"FFLAGS_LESS = -g -fast -O2 -fsimple=2 -xnolibmopt $arch"
    echo $dbgf"FFLAGS_NONE = -g -fast -O1 -fsimple=0 -xnolibmopt $arch"
  echo "LK = $LK"
# NB: avoid -xlibmopt; it can generate bad numbers, eg tan(-pi*4.05d0)
  echo $nodbgf"LKFLAGS1 = -fast -O5 -depend -fsimple=2 -xnolibmopt $arch"
    echo $dbgf"LKFLAGS1 = -g -fast -O5 -depend -fsimple=2 -xnolibmopt $arch"
  echo "LKFLAGS2 ="

else if ($mnemonic == CONVEX) then
  echo ' ... for the CONVEX'
  echo "FC = $FC"
  echo 'FFLAGS = -g -O2 -tm c1'
  echo 'FFLAGS_NONE = -g -tm c1'
  echo "LK = $LK"
  echo 'LKFLAGS1 = -g -O2 -tm c1'
  echo 'LKFLAGS2 ='

else if ($mnemonic =~ AIX*) then
  echo ' ... for the IBM RS/6000'
  echo "FC = $FC"
  set OPT = "-O"
  set OPT_LESS = " "
  set OPT_LESS2 = " "
  if ($mnemonic == AIX90) then
    set OPT = "-O3 -qhot"
    set OPT_LESS = "-O3"
    set OPT_LESS2 = "-O"
  endif
  echo $nodbgf'FFLAGS = '"$OPT"' -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
  echo $nodbgf'FFLAGS_LESS = '"$OPT_LESS"' -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
  echo $nodbgf'FFLAGS_LESS2 = '"$OPT_LESS2"' -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
    echo $dbgf'FFLAGS = -g -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
    echo $dbgf'FFLAGS_LESS = -g -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
    echo $dbgf'FFLAGS_LESS2 = -g -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 = '"$OPT"' -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
    echo $dbgf'LKFLAGS1 = -g -qarch=pwr3 -qtune=pwr3 -qcache=auto -qstrict -qrecur -qcharlen=2000'
  echo 'LKFLAGS2 ='

else if ($mnemonic == CRAY) then
  echo ' ... for the Cray YMP, C90, or J90'
  echo "FC = $FC"
  echo $nodbgf'FFLAGS = -dp -eRv -Oaggress,bl,scalar3,vector3,task0'
  echo $nodbgf'FFLAGS_LESS = -dp -eRv -Oscalar2,vector2,task0'
  echo $nodbgf'FFLAGS_NONE = -dp -eRv -Oscalar0,vector0,task0'
    echo $dbgf'FFLAGS = -dp -eRv -g'
    echo $dbgf'FFLAGS_LESS = -dp -eRv -g'
    echo $dbgf'FFLAGS_NONE = -dp -eRv -g'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 = -dp -eRv -Oaggress,bl,scalar3,vector3,task0'
    echo $dbgf'LKFLAGS1 = -dp -eRv -g'
  echo 'LKFLAGS2 ='

else if ($mnemonic == CRAY2) then
  echo ' ... for the Cray-2'
  echo 'FC = cf77 -Wf"-dp" -Wf"-a stack" -Wf"-o recursive" '
  echo $nodbgf'FFLAGS = -Z v'
  echo $nodbgf'FFLAGS_LESS ='
  echo $nodbgf'FFLAGS_NONE = -Wf"-o off"'
    echo $dbgf'FFLAGS = -Wf"-e z"'
    echo $dbgf'FFLAGS_LESS = -Wf"-e z"'
    echo $dbgf'FFLAGS_NONE = -Wf"-e z"'
  echo 'LK = cf77 -Wf"-dp" -Wf"-a stack" -Wf"-o recursive" '
  echo 'LKFLAGS1 ='
  echo 'LKFLAGS2 ='

else if ($mnemonic == APOLLO) then
  echo ' ... for the Apollo'
  echo "FC = $FC"
  echo $nodbgf'FFLAGS = -O4'
  echo $nodbgf'FFLAGS_LESS = -O1 -g'
    echo $dbgf'FFLAGS = -W0,-dba -g'
    echo $dbgf'FFLAGS_LESS = -O1 -g'
  echo "LK = $LK"
  echo 'LKFLAGS1 ='
  echo 'LKFLAGS2 = -lU77 -lF77 -lI77'

else if ($mnemonic == HP) then
  echo ' ... for the Hewlett-Packard ...'
  echo "FC = $FC"
  echo $nodbgf'FFLAGS = +U77 +escape +Oall'
#  echo $nodbgf'FFLAGS = +U77 +Oall +B +E4'
#  echo $nodbgf'FFLAGS = +U77 +OP4 +OPunroll +B +E4'
#  echo $nodbgf'FFLAGS = +U77 +O4 +B +E4'
  echo $nodbgf'FFLAGS_LESS = +U77 +escape -O'
  echo $nodbgf'FFLAGS_LESS2 = +U77 +escape +O1'
  echo $nodbgf'FFLAGS_MORE = +U77 +escape +Oall'
#   echo $nodbgf'FFLAGS_LESS = +U77 -O +B +E4'
#   echo $nodbgf'FFLAGS_LESS2 = +U77 +O1 +B +E4'
#   echo $nodbgf'FFLAGS_MORE = +U77 +Oall +B +E4'
#  echo $nodbgf'FFLAGS_MORE = +U77 +O4 +B +E4'
    echo $dbgf'FFLAGS = +U77 +escape -g'
    echo $dbgf'FFLAGS_LESS = +U77 +escape -g'
    echo $dbgf'FFLAGS_LESS2 = +U77 +escape -g'
    echo $dbgf'FFLAGS_MORE = +U77 +escape -g'
#     echo $dbgf'FFLAGS = +U77 -g +B +E4'
#     echo $dbgf'FFLAGS_LESS = +U77 -g +B +E4'
#     echo $dbgf'FFLAGS_LESS2 = +U77 -g +B +E4'
#     echo $dbgf'FFLAGS_MORE = +U77 -g +B +E4'
  echo "LK = $LK"
  echo 'LKFLAGS1 = +U77'
  echo 'LKFLAGS2 ='

else if ($mnemonic == LINUXF) then
  echo ' ... for Linux on a DEC alpha with DEC fort'
  echo 'FC = fort'
  if ("$FC" != fort) then
    echo "Makemakefile: compiler $FC is not compatible with machine mnemonic LINUXF"
    exit -1
  endif
  echo $nodbgf'FFLAGS       = -O4 -fast -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_MORE  = -O5 -fast -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_LESS  = -O3 -fast -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_LESS2 = -O1 -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_LESS3 = -O1 -arch host -tune host -recursive'
  echo $nodbgf'FFLAGS_NONE  = -O0 -arch host -tune host -recursive'
    echo $dbgf'FFLAGS       = -g -arch host -tune host -recursive'
    echo $dbgf'FFLAGS_MORE  = -g -arch host -tune host -recursive'
    echo $dbgf'FFLAGS_LESS  = -g -arch host -tune host -recursive'
    echo $dbgf'FFLAGS_LESS2 = -g -arch host -tune host -recursive'
    echo $dbgf'FFLAGS_LESS3 = -g -arch host -tune host -recursive'
    echo $dbgf'FFLAGS_NONE  = -g -arch host -tune host -recursive'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 = '
  echo   $dbgf'LKFLAGS1 = -g'
  echo 'LKFLAGS2 ='

else if ($mnemonic == LINUX_PGI) then
  echo ' ... for Linux using Portland Group compilers'
# override default compiler
# f90 compiler
  echo "FC = $FC"
  if ($?lf90) then
    if (! $?lloc) then
      set lloc
      if ($?LIBLOC) then
        set lloc = ($LIBLOC)
      endif
    endif
#     echo '# ... Workaround pgf90 v3.1 does not pass proper command-line args'
#     echo '# ... Use pgf77 for linking;  add f90-specific libraries to LIBLOC'
#     set lk = pgf77
#     set lloc = ($lloc -lpgftnrtl -lpgf90 -lpgf90_rpm1 -lpgf902 -lpgf90rtl)
  endif
  if ("$FC" != pgf77 && "$FC" != pgf90) then
    echo "Makemakefile: compiler $FC is not compatible with machine mnemonic LINUX_PGI"
    exit -1
  endif

  echo $nodbgf'FFLAGS = -O4 -fast -Mrecursive'
  echo $nodbgf'FFLAGS_LESS = -O1 -Mrecursive'
  echo $nodbgf'FFLAGS_NONE = -O0 -Mrecursive'
    echo $dbgf'FFLAGS = -g -Mrecursive'
    echo $dbgf'FFLAGS_LESS = -g -Mrecursive'
    echo $dbgf'FFLAGS_NONE = -g -Mrecursive'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 = -O3'
    echo $dbgf'LKFLAGS1 = -g'
  echo 'LKFLAGS2 ='

else if ($mnemonic == INTEL_IFC) then
  echo ' ... for the INTEL IA32'
  echo "FC = $FC"
  if ("$FC" != ifc && "$FC" != f90) then
    echo "Makemakefile: compiler $FC not compatible with mnemonic INTEL_IFC"
    exit -1
  endif
  echo "LK = $LK"
  echo $nodbgf'FFLAGS = -O3 -cm -axW -WB'
  echo $nodbgf'FFLAGS_LESS = -O2 -cm -WB'
  echo $nodbgf'FFLAGS_LESS2 = -O1 -cm -WB'
  echo $nodbgf'FFLAGS_NONE = -g -cm -WB'
    echo $dbgf'FFLAGS =      -g -cm -WB'
    echo $dbgf'FFLAGS_LESS = -g -cm -WB'
    echo $dbgf'FFLAGS_LESS2 = -g -cm -WB'
    echo $dbgf'FFLAGS_NONE = -g -cm -WB'

else if ("$mnemonic" =~ LINUX*) then
  echo ' ... for Linux using GNU compilers'
  echo "FC = $FC"
  if ("$FC" != f77 && "$FC" != g77) then
    echo "Makemakefile: compiler $FC is not the gnu compiler"
    exit -1
  endif
  echo $nodbgf'FFLAGS = -O3 -funroll-loops -ffast-math -finline -fno-globals -Wno-globals'
  echo $nodbgf'FFLAGS_LESS = -O1 -fno-globals -Wno-globals'
  echo $nodbgf'FFLAGS_NONE = -O0 -fno-globals -Wno-globals'
    echo $dbgf'FFLAGS = -g -fno-globals -Wno-globals'
    echo $dbgf'FFLAGS_LESS = -g -fno-globals -Wno-globals'
    echo $dbgf'FFLAGS_NONE = -g -fno-globals -Wno-globals'
  echo "LK = $LK"
  echo $nodbgf'LKFLAGS1 = -O3 -funroll-loops -ffast-math -finline'
    echo $dbgf'LKFLAGS1 = -g'
  echo 'LKFLAGS2 ='

endif

echo ''

# --------------- Variable definitions ---------------
echo '# --- Libraries LIBSLA,LIBLOC ---'
# ... LIBSLA is whatever is passed as a switch
if (! $?lsla) then
  echo -n '# ... look for slatsm library'
  if ($?LIBSLA != 0) then
    echo -n  ... trying \"$LIBSLA\" ...
    if (-r "$LIBSLA") then
      set lsla = $LIBSLA
      echo ' ok'
    else
      echo ' not readable'
      set lsla
    endif
  else
    echo '... nothing defined'
    set lsla
  endif
endif
echo 'LIBSLA = '$lsla

# ... LIBLOC is whatever is passed as a switch
if (! $?lloc) then
  echo -n '# ... look for LIBLOC libraries'
# ... Use environment variable, if available
  if ($?LIBLOC != 0) then
    echo ' ...' found environment variable
    set lloc = "$LIBLOC"
# ... Otherwise try to guess a library
  else if ($mnemonic == AIX || $mnemonic == AIX90) then
    echo ' ... try default'
    set lloc
    set dum = `/usr/bin/lslpp -l | grep -i essl`
    if ($#dum != 0) then
      set lloc = `echo $LIBSLA | sed "s/slatsm.a/myessl.a/"`
      if (-e /usr/lib/libesslp2.a) set lloc = `echo $LIBSLA | sed "s/slatsm.a/myesslp2.a/"`
    endif
  else if ($mnemonic =~ SGI* && $?mp) then
    echo  ' ... choose default'
    set lloc = "-mp -lcomplib.sgimath_mp"
  else if ($mnemonic =~ SGI*) then
    echo  ' ... choose default'
    set lloc = "-lcomplib.sgimath"
  else if ($mnemonic == DECA && -r /usr/lib/libdxml.a) then
    echo  ' ... choose default'
    set lloc = "-ldxml"
  else if ($mnemonic == LINUXF && -r /usr/lib/libcxml.a) then
    echo ' ... choose default'
    set lloc = "-lcxml"
  else if ($mnemonic =~ LINUX* && -r /usr/lib/libatlas.a) then
    echo ' ... choose default'
    set lloc = "-latlas"
  else if ($mnemonic == CRAY) then
    if ($?CRAYLIBS_YMP) then
      if (-e $CRAYLIBS_YMP/libsci.a) set lloc = "-lsci"
    endif
  else
    echo '... nothing defined'
    set lloc
  endif
endif

echo 'LIBLOC = '$lloc

# if ($mnemonic =~ SGI* || $mnemonic =~ LINUX*) then
#     set AFTER
# endif
set AFTER

if ($?BEFORE && $?AFTER) then
  echo 'LIBES = $(LIBLOC) $(LIBSLA) $(LIBLOC) '
else if ($?AFTER) then
  echo 'LIBES = $(LIBSLA) $(LIBLOC)'
else
  echo 'LIBES = $(LIBLOC) $(LIBSLA)'
endif

echo ' '
echo '# --- Make rules ---'

echo '.f.o: '
echo '	$(FC) $(FFLAGS) -c $<'
echo ' '

echo '.c.o: '
echo '	$(CC) $(CFLAGS) -c $<'
echo ' '

echo '.f.a: '
echo '	$(FC) $(FFLAGS) -c $<'
echo '	ar rv $@ $%'
echo '	rm -f $%'
echo ' '

echo '.c.a: '
echo '	$(CC) $(CFLAGS) -c $<'
echo '	ar rv $@ $%'
echo '	rm -f $%'
echo ' '

if ($?includestr) then
 echo "# --- include string ---"
 echo $includestr
 echo ' '
endif

if ($?defs) exit

# --------------- Extract main and subs  ---------------
set main = $argv[1]; shift; set subs = ""
while ( $#argv )
  if ($argv[1]:r != $main:r) set subs = "$subs $argv[1]:r.o"
  shift
end

echo "# --- subprograms ---"
echo 'SUBS =' $subs
echo ''

echo $main:r':	'$main:r.o '$(SUBS)'
echo '	$(LK) $(LKFLAGS1) $@.o $(SUBS)' $lib '$(LIBES) $(LKFLAGS2) -o' "$outfile"
echo ''

exit 0

# --------------- Append new main to existing Makefile ---------------
Append:
set main = $argv[1]; shift; set subs = ""

echo ' '
echo $main:r':	'$main:r.o '$(SUBS)'
echo '	$(LK) $(LKFLAGS1) $@.o $(SUBS)' $lib '$(LIBES) $(LKFLAGS2) -o' "$outfile"
echo ' '

exit

# --------------- Help (error handling) ---------------
message:
cat <<EOF

usage: Makemakefile MACHINE [switches] main[.fo] sub[.fo] [sub ...]
   or  Makemakefile MACHINE -defs [-db]
   or  Makemakefile MACHINE --check
   or  Makemakefile MACHINE --getfc
   or  Makemakefile MACHINE --getcc
   or  Makemakefile --show

   Makemakefile creates a Makefile to compile and link fortran programs, with
   compiler switches and libraries dependent on certain machine characteristics.
   The Makefile is written to standard output.

   MACHINE is one of the following:
     - a machine mnemonic that describes a combination of machine OS and compiler.
       To show the list Makemakefile knows about, invoke Makemakefile --show

     - a GNU machine configuration, described in config.sub, of the type
       CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM.  Makemakefile takes this information
       to infer a machine mnemonic (script $thisdir/machine-mnemonic).
       
     - the string '--', in which case Makemakefile uses 'config.guess' to
       find the appropriate GNU machine configuration.  'config.guess' automatically
       generates a machine type CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM, from which
       Makemakefile attempts to find the machine mnemonic.

       Makemakefile attempts to assign default C and fortran compilers from the mnemonic.
       You can override these defaults using environment variables FC and CC.
       However, if Makemakefile has a mnemonic but doesn't recognize the compiler,
       it won't know how to assign compiler switches, and will fail.


   Switches:
     -defs         generates the variable definitions only as a portion of
                   a Makefile (make rules and compiler switches)

     --check       prints to standard out the machine mnemonic if it recognizes it;
                   otherwise returns with nonzero exit status

     --getfc       prints to standard out the name of the fortran compiler if
                   it can find one consistent with the machine mnemonic;
                   otherwise returns with nonzero exit status

     --getcc       prints to standard out the name of the C compiler if
                   it can find one consistent with the machine mnemonic;
                   otherwise returns with nonzero exit status

     -f90          Use 'f90' as the default compiler

     -mp           Set switches for parallel compilation
                   (selected compilers only)

     -db           compile without optimization and with debugging information

     -i string     include string 'string' into Makefile
                   No check is make that the string is valid.

     -l lib        include library "lib" in the link

     -o outfile    name executable "outfile"

     -a            (append) skip declarations:
                   Supply segment just to compile-and-link this main

     -LIBSLA name  path name of library slatsm.a.  If this switch is missing,
                   looks for environment variable LIBSLA.  If neither are
                   present, Makemakefile chooses nothing.

     -LIBLOC name  local libraries to include in link.  If this switch is missing,
                   looks for environment variable LIBLOC.  If neither are
                   present, Makemakefile tries to choose some defaults.

EOF
exit -1

show:
cat <<EOF
Machine mnemonics Makemakefile knows about (this list is subject to change)
   mnemonic    Computer                    Suggested LIBLOC
   --------------------------------------------------------
   AIX       IBM RS/6000                  -lessl -lblas -lxlf90
   AIX90     IBM RS/6000, xlf90 compiler  -lessl -lblas -lxlf90

   SGI       older SGI models
   SGI4      SGI R4000, R4400             -lblas or -lcomplib.sgimath or
   SGI8      SGI R8000 (TFP chip)         -mp -lcomplib.sgimath_mp
   SGIO2     SGI R10000, mixed 32-64 bit  -mp -lcomplib.sgimath_mp

   HP        HP 715, 735                  -lvec -lblas -llapack
             NB: compiler switches are set for hpux10.20.
             If you have a older one, use the commented out +OP3 switches

   DECA      Dec alpha                    -ldxml
   DEC       Other Dec workstations

   APOLLO    Apollo DN-10000              -lblas -lvec

   CONVEX    Convex                       -lveclib

   CRAY      Cray YMP, C90, J90           -lsci
   CRAY2     Cray-2                       -lsci

   SUN       Sun workstations
   SUN-ULTRA Sun ULTRA workstations

   LINUXI    Linux on an Intel Pentium    libatlas.a (www.netlib.org/atlas/)
   LINUX_PGI same, using Portland Group compiler (pgroup.com)  -llapack -lblas
   LINUXPPC  Linux on a Power PC          libatlas.a (www.netlib.org/atlas/)
   INTEL_IFC Intel 32 bit for Xeon        -lsvml -lPEPCF90 -lmkl_lapack -lmkl_def -lguide -lpthread 
   LINUXA    Linux on DEC alpha           libatlas.a (www.netlib.org/atlas/)
   LINUXF    Same, using DEC 'fort'       -lcxml

   VANILLA   Generic compiler switches
EOF
