#!/bin/csh
# Shell script to generate a Makefile for archive slatsm.a.
# Environment variables LIBSLA,BIN and LIBLOC may be defined
# or passed as command-line arguments.  Syntax:
#   Maksmakfile [ -LIBSLA|-LIBLOC|-LIBSUBS|-BIN name ] machine-name
# See slatsm/startup/Makemakefile for a list of machine names.

# --------------- Machine type and switches ---------------
set sw
options:
if ($#argv > 0) then
  switch ($1)
    case "-BIN":
      shift ; setenv BIN $1; set sw = ($sw -BIN $BIN)
      shift ; goto options
    case "-LIBSLA":
      shift ; setenv LIBSLA "$1"; set sw = ($sw -LIBSLA $LIBSLA)
      shift ; goto options
    case "-LIBSUBS":
      shift ; setenv LIBSUBS "$1"
      shift ; goto options
    case "-LIBLOC":
      shift ; setenv LIBLOC "$1"; set sw = ($sw -LIBLOC $LIBLOC)
      shift ; goto options
  endsw
  if ($?MACHINE) then
    set machine = $MACHINE
  else
    set machine = VANILLA
  endif
  if ($#argv > 0) then
    set machine = $argv[1]
  endif
endif
if ($?machine == 0) then
  echo usage: Maksmakfile '[ -LIBSLA|-LIBLOC|-LIBSUBS|-BIN name ]' machine-name
  exit -1
endif

echo '# Makefile for slatsm.a generated by Maksmakfile for' $machine
echo '# to make everything, use "make" or "make all"'
echo ' '

set BACKSLASH = '\'
if ($machine == LINUXA) set BACKSLASH = '\\'
if ($machine == LINUXI) set BACKSLASH = '\\'

# --------------- Compiler definitions, flags, prog names --------------
startup/Makemakefile $machine $sw -defs
# ... Exclude files in NOSLATSM from compilation
if (! -e NOSLATSM) mkdir NOSLATSM
( cd NOSLATSM ; echo `ls *.f` | sed -e 's/ /|/g' > nam ) 
if (`ls NOSLATSM/*.f | wc | awk '{print $1}' ` == 0) then
  rm -f Names ; /bin/ls *.f >Names
else
  rm -f Names ; /bin/ls *.f | egrep -v `cat NOSLATSM/nam` >Names
endif
rm -f NOSLATSM/nam
set names = ` cat Names `

echo '# --- Make rules ---'
echo '# archives name is slatsm.a'
echo 'LIBSLA = slatsm.a'
if ($machine == AIX || $machine == AIX90) then
  unset lessl
  unset lesslp2
  set dum = `/usr/bin/lslpp -l | grep -i essl`
  if ($#dum != 0) then
    set lessl
    echo 'LIBESSL = myessl.a'
    if (-e /usr/lib/libesslp2.a) then
      set lesslp2
      echo 'LIBESSLP2 = myesslp2.a'
    endif
  endif
endif
echo ' '

echo '.f.o: '
echo '	$(FC) $(FFLAGS) -c $<'
echo ' '

echo '.c.o: '
echo '	$(CC) $(CFLAGS) -c $<'
echo ' '

echo '.f.a: '
echo '	$(FC) $(FFLAGS) -c $<'
echo '	ar rv $@ $%'
echo '	rm -f $%'
echo ' '

echo '.c.a: '
echo '	$(CC) $(CFLAGS) -c $<'
echo '	ar rv $@ $%'
echo '	rm -f $%'
echo ' '

if ($machine == AIX || $machine == AIX90) then
  if ($?lessl) then
    if ($?lesslp2) then
      echo 'all:	$(LIBSLA) $(LIBESSL) $(LIBESSLP2)'
    else
      echo 'all:	$(LIBSLA) $(LIBESSL)'
    endif
  else
    echo 'all:	$(LIBSLA)'
  endif
else if ($machine == LINUXF) then
  echo 'all:	$(LIBSLA) fmain.o'

else
  echo 'all:	$(LIBSLA)'
endif
echo ' '

echo '.PRECIOUS:	$(LIBSLA)'
echo ' '

if ($machine == LINUXF) then
  echo 'libsla:	fmain.o $(LIBSLA)'
else
  echo 'libsla:	$(LIBSLA)'
endif
echo ' '

# ------------  Special cases to avoid compiler bugs ----------
if ($machine == SGI8 | $machine == SGIO2) then
  set lst = (ivshel dbesj)
  set compiler_name = `f77 -version | & awk '{print $1}'`
  set lst lst2

  switch ($compiler_name)
    case "Ragnarok":
#     set lst = (ivshel dbesj dshell awrite)
      set lst = (ivshel)
      breaksw

    case "Mongoose":
#   patch for "f77: Error: malformed or unknown option: -version"
    case "f77:":
      set lst
#     Whether this needs special treatment depends on compiler version
#     set lst2 = (ishell)
      set procid = `hinv | grep Processor | grep MHZ | head -1 | awk '{print $4}'`
      if ($procid == 'MHZ') set procid = `hinv | grep Processor | grep MHZ | head -1 | awk '{print $5}'`
      if ($procid == 'IP32') then
        set lst = (a2bin)
      endif
      echo "# (warning): You may need to comple ishell.f without optimization"
      breaksw

    case "Mongoose":
#   patch for "f77: Error: malformed or unknown option: -version"
    case "f77:":
      set lst
#     Whether this needs special treatment depends on compiler version
#     set lst2 = (ishell)
      if (set lst      
      echo "# (warning): You may need to comple ishell.f without optimization"
      breaksw

#   patch for f77 v 7.2
    case "MIPSpro":
      set lst = (rdfiln)
      set lst2 =
      breaksw

  endsw
  foreach i ($lst)
    echo '$(LIBSLA)'\($i.o\)': '
    echo '	$(FC) $(FFLAGS_LESS) -c' $i.f
    echo '	ar rv $(LIBSLA)' $i.o
    echo '	rm -f' $i.o
    echo ' '
  end
  foreach i ($lst2)
    echo '$(LIBSLA)'\($i.o\)': '
    echo '	$(FC) $(FFLAGS_LESS2) -c' $i.f
    echo '	ar rv $(LIBSLA)' $i.o
    echo '	rm -f' $i.o
    echo ' '
  end
endif

#if ($machine == SUN) then
#  echo '$(LIBSLA)'\(zgemm.o\)': '
#  echo '	$(FC) $(FFLAGS_LESS) -c zgemm.f'
#  echo '	ar rv $(LIBSLA) zgemm.o'
#  echo '	rm -f zgemm.o'
#  echo ' '
#endif

# Compile some routines with reduced optimization ...
  set lst
  if ($machine == CRAY | $machine == CRAY2) set lst = imtqlv
  if ($machine == DECA) set lst = (awrite)
  if ($machine =~ SGI*) set lst = (dmach)

  foreach i ($lst)
    echo '$(LIBSLA)'\($i.o\)': '
    echo '	$(FC) $(FFLAGS_LESS) -c' $i.f
    echo '	ar rv $(LIBSLA)' $i.o
    echo '	rm -f' $i.o
    echo ' '
  end

  set lst
  if ($machine == LINUXF) set lst = (htridi)
  foreach i ($lst)
    echo '$(LIBSLA)'\($i.o\)': '
    echo '	$(FC) $(FFLAGS_LESS2) -c' $i.f
    echo '	ar rv $(LIBSLA)' $i.o
    echo '	rm -f' $i.o
    echo ' '
  end

  set lst
  if ($machine == DECA) set lst = (htridi)
  foreach i ($lst)
    echo '$(LIBSLA)'\($i.o\)': '
    echo '	$(FC) $(FFLAGS_LESS3) -c' $i.f
    echo '	ar rv $(LIBSLA)' $i.o
    echo '	rm -f' $i.o
    echo ' '
  end

# Compile some routines with additional optimization ...
  set lst
  if ($machine == LINUXF) set lst = (dlaswp)
  foreach i ($lst)
    echo '$(LIBSLA)'\($i.o\)': '
    echo '	$(FC) $(FFLAGS_MORE) -c' $i.f
    echo '	ar rv $(LIBSLA)' $i.o
    echo '	rm -f' $i.o
    echo ' '
  end

# ------------  To make LIBSLA: ----------
echo '$(LIBSLA):	$(LIBSLA)'\($names[1]:r.o\) $BACKSLASH
foreach i ( *.c )
  echo '	$(LIBSLA)'\($i:r.o\) $BACKSLASH
end
foreach i ( $names[2-$#names] )
  if ($names[$#names] != $i) echo '	$(LIBSLA)'\($i:r.o\) $BACKSLASH
  if ($names[$#names] == $i) echo '	$(LIBSLA)'\($i:r.o\)
end
if ($machine == VANILLA || $machine == SUN || $machine == CONVEX ||\
    $machine == DEC) then
  echo '	ranlib $@'
endif
echo ' '

# ------------  To make LIBESSL (AIX only): ----------
if ($machine == AIX || $machine == AIX90) then
  if ($?lessl) then
    echo '$(LIBESSL):	fessl.o startup/essl.lst'
    echo '	ld -bh:4 -T512 -H512 fessl.o -bnso -bI:/lib/syscalls.exp -berok -lessl -o $@ -bexport:startup/essl.lst'
    echo ' '
  endif
  if ($?lesslp2) then
    echo '$(LIBESSLP2):	fessl.o startup/essl.lst'
    echo '	ld -bh:4 -T512 -H512 fessl.o -bnso -bI:/lib/syscalls.exp -berok -lesslp2 -o $@ -bexport:startup/essl.lst'
    echo ' '
  endif
endif

# ------------  CLEAN ----------
echo 'clean: '
if ($machine == SGI) then
  echo '	-rm -f $(LIBSLA) Makefile Names'
else if ($machine == AIX || $machine == AIX90) then
  if ($?lessl) then
    if ($?lesslp2) then
      echo '	-rm -f $(LIBSLA) $(LIBESSL) $(LIBESSLP2) *.o *.bk *~ Makefile Names'
    else
      echo '	-rm -f $(LIBSLA) $(LIBESSL) *.o *.bk *~ Makefile Names'
    endif
  else
    echo '	-rm -f $(LIBSLA) *.o *.bk *~ Makefile Names'
  endif
else
  echo '	-rm -f $(LIBSLA) *.o *.bk *~ Makefile Names'
endif
