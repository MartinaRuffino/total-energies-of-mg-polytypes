#!/bin/tcsh -f

# This file is a shell script to test various aspects of ASA suite

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias runjob 'set retcall = \!\!:1; set outfile = \!\!:2 ; set callarg = \!\!:3 ; goto runjob'
alias query 'set retcall = \!\!:1 ; set retcall2 = \!\!:2 ; set callarg = \!\!:3 ; goto query'
alias zcat 'gunzip -c'
alias zcat 'cat'

set a
set slow
set testfile = $0
set testdir = $testfile:h
set topdir  = `(cd $testdir/..; pwd)`
set tmpdir = $cwd
set space = '        '

# Prepend current working-directory, top-level dir and maindir to path
set path = ($cwd $topdir $topdir/utils $topdir/testing $path)

set xbs = `which xbs`
if (-x "$xbs") then
  if `$xbs -h | grep Usage | awk '{print ($2 == "xbs")}'` set have_xbs
endif
if (` diff --version | & grep -c ' GNU' ` != 0) set have_diffI

# --- Pick off switches ---
while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")

  set arg1 = $1; shift
  if ($?verb) echo test.lm: parsing switch $arg1
  switch ($arg1)
    case "--quiet":
      set quiet
      unset slow
      breaksw
    case "--all":
      breaksw
    case "--add0":
      set add0 = `which add0`
      if (! -x "$add0") then
        echo "test.dmft (abort): missing add0"
        exit
      endif
      breaksw
    case "--poszer":
      set poszer = `which poszer`
      if (! -x "$poszer") then
        echo "test.dmft (abort): missing poszer"
        exit
      endif
      breaksw
    case "--MPIK":
      set MPIK
      breaksw
    case "--clean":
      set clean
      breaksw
    case "--no-iact*":
      unset slow
      breaksw
    case "--noplot*":
      set noplot
      set have_pldos
      unset have_pldos
      set have_fplot
      unset have_fplot
      set have_xbs
      unset have_xbs
      breaksw
    case "--verb*":
      set verb = 1
      breaksw
    default:
      echo unrecognized switch $arg1
      echo 'usage: test.lmxbs [switches] [test-list]'
      echo '       test-list is a list of test cases, e.g.: 1 3'
      echo '       switches:'
      echo '       --no-iactive runs tests without prompting user'
      echo '       --quiet runs tests without prompting user'
      echo '       --verbose    script prints out extra information'
      exit -1
  endsw

end

set pass
if ($?quiet) echo "$space ... testing lmxbs on file ctrl.tc"
query chk11 chk1e 'test lmxbs (file ctrl.tc)'
chk11:
if ($?clean) then
  echo "$space rm -f {ctrl,log,out,xbs}.tc"
               rm -f {ctrl,log,out,xbs}.tc
  goto chk1e
endif
set refout=$testdir/out.xbs.tc  testout=out.tc
echo "$space cp $testdir/ctrl.tc ."
             cp $testdir/ctrl.tc .
runjob chk12 out.tc "lmxbs -ss=.9 -bs=.4 -dup=4,4,4,r<1 -shift=-1,-1,-1.7517-1.7517 tc"
chk12:
if (! $?quiet) echo "$space Program lmxbs returned successfully."

if ($?quiet) goto chk1pa
query chk1s chk1s2 "compare files out.tc $refout"
chk1s:
zdiff $testout $refout
chk1s2:
if (! $?have_xbs | ! $?slow) goto chk1pa
query chk1s3 chk1pa "run xbs file xbs.tc"
chk1s3:
xbs xbs.tc

chk1pa:
if (! $?quiet) echo "$space ... automatic pass checks :"
if ($?have_diffIx) then
  if (! $?quiet) echo "diff -I spec xbs.tc $testdir/xbs.tc >/dev/null"
  diff -I spec xbs.tc $testdir/xbs.tc >/dev/null
  set retval = $status
else
  set retval = 0
  if (! $?quiet) echo "$space check " '` diff xbs.tc $testdir/xbs.tc | grep -c -v spec ` == 2'
  if (`diff xbs.tc $testdir/xbs.tc | grep -c -v spec ` != 2) set retval = 1
endif

echo -n "$space ... file xbs.tc match file $testdir? ... "
if ($retval == 0) then
  echo yes
  echo
  echo "$space ... lmxbs test PASSED"
else
  echo no
  echo
  echo "$space ... lmxbs test FAILED"
  unset pass
endif

chk1e:
exit (! $?pass)

# ---------------- qprint (print only quiet not set) --------------
exit
qprint:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo "$callarg"
  goto $quitjob

# ---------------- difffiles --------------
exit
diffiles:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  goto $quitjob

# ---------------- showout --------------
exit
showout:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo ' '
  echo "$space ... Compare $callarg to line(s) in file $refout":
  grep $callarg $testout
  if (`cat $testout | grep $callarg | wc | awk '{print $1}'` > 1) echo ' ---'
  zcat $refout | grep $callarg
  goto $quitjob

# ---------------- runjob --------------
exit
runjob:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space $callarg"
    echo " "
    $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      $callarg >> $appfile
      set retval = $status
    else
      echo "$space $callarg  > $outfile"
      $callarg > $outfile
      set retval = $status
  endif
  if ($retval != 0) goto cleanup
  goto $quitjob


# ---------------- cleanup --------------
exit
cleanup:
  if ($retval != 0) echo "$space Program lm returned with error status $retval"
  if ($retval != 0) echo "$space ... $testfile aborting"
  exit $retval

# ---------------- query --------------
exit
query:
  unset skip
  if ($?slow != 0) then
    echo "$space"'*'"hit <return> to $callarg, s <return> to skip it."
    set a = ($<)
    if ($a == "") goto $retcall
    switch ($a)
      case "quit":
      case "q":
      case "a":
        exit
      case "i":
        unset slow
        breaksw
      case "s":
        set skip
        breaksw
      case "t":
        time
        goto query
      default:
        echo 'q to quit; i unsets slow; s skips this job, t shows time'
        goto query
    endsw
  endif
  if ($?skip) goto $retcall2
  goto $retcall

# ---------------- usage: --------------
usage:
cat <<EOF
 usage: test.nc [switches] [file-extension] [testcase-list]
        e.g., "test.nc co 1 2"
        If file-extension is missing, test.gf uses co
        Switches:
        --no-iactive runs tests without prompting user
        --quiet runs tests with minimal output and without prompting user
#       --verbose    script prints out extra information
EOF
exit -1
