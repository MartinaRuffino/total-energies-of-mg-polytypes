# Segment of input file generating default compound-dependent properties
# Required Inputs:
#   *a character variable eltl, e.g. 'cad' listing the names of the various
#    species for which parameters are generated.  Each character in eltl
#    corresponds to one species; thus if eltl='cad' parameters for three
#    species are generated (see below for example).  The first character
#    in eltl must correspond to the cation; the second to the anion.
#   *A character variable 'elt*' for each of the characters in eltl.
#    Thus if eltl='cad' the variables eltc, elta, eltd are required.
#    They  contain the atomic symbol for the element, eg elta='Be'
#   *A character variable 'cmpd', e.g. GaAs spec. semiconductor compound
#   *the file 'spec.prop'
# Optional Inputs:
#   *variable excf (local ex functional) affects definition of eref
#   *variable ftb nonzero specifies ftb-specific input
#   *variable ofp nonzero specifies old FP-specific input
#   *variable tpan specifying coupled panels (ofp only for now)
#   *variable bigbas (0,-1, or 1) picks a default 'standard','minimal','large'
#             basis for selected compounds.  This means different things
#             for different programs.
#             (ftb) 'bas' strings may be altered
#             (ofp) 'bas' strings may be altered
# Outputs are in the form of variables set in the absence of prior specification
# Assuming eltl='cad':
#   *azb = equil. lattice of compount in zb structure
#   *awz = equil. lattice in wz structure, q=c/a ratio, xwz=internal displ.
#   *elind       a parameter in the Lindhard estimate for the dielectric f'n
#   *metal       nonzero for metallic compounds
#   *Z{c,a,d}    Atomic numbers  (real)
#   *eref{c,a,d} Free-atom energies  (real)
#   *any of variables cnfs{c,a,d}, cnfp{c,a,d}, cnfd{c,a,d}
#    with s,p,d corresponding to the l quantum numbers l=0,1,2.
#    These variables are associated with the atomic principal quantum
#    numbers, specifing what value to take relative to default values.
#    spec.prop generates default values for any not specified.
#      cnfxx= 0 specifies the default P.Q.N
#      cnfxx=-1 specifies a P.Q.N 1 lower than the default.
#      cnfxx= 1 specifies a P.Q.N 1 higher than the default.
#      cnfxx= 2 flags this state has having a shallow semicore state.
#    		default P.Q.N is used for the valence state.
#               In the ASA, it is likely here that IDMOD should be frozen.
#      cnfxx= 4 flags this state has needing a high-energy valence state
#    		combined with a shallow semicore state
#   *bas{c,a,d} (ftb) a string defining basis (some compounds only)
#   *tpan       (ofp for now) compounds which require two panel calculations
#   *lb{c,a,d}  (ofp) 3-kappa basis size
#   *idxd{c,a,d}(asa) whether the d orbital should be folded down
# -----------------------------------------------------------------
% udef -f ofpxx bigbxx
% var ofpxx=0 bigbxx=0
% cvar bigbas>-99 bigbxx=bigbas
% cvar ofp>-99 ofpxx=ofp
#---------------- Compound-dependent constants ----------------
% ifndef cmpd
%   stop 1 semi.mater (abort): missing compound
% endif
% ifdef cmpd=='C' | cmpd=='CC'
%   const tpan=f metal=f azb=6.74
% elseifd cmpd=='BeO'
%   const tpan=t metal=f azb=7.0
% elseifd cmpd=='MgO'
%   const tpan=t metal=f azb=7.96
% elseifd cmpd=='CaO'
%   const tpan=t metal=f azb=9.09
% elseifd cmpd=='ZnO'
#   xwz was minimized for this q
%   const tpan=f metal=f awz=3.253/.529 q=1.603 xwz=.019 cnfp{eltl(1,1)}=2
%   const azb=awz*sqrt(2)
% elseifd cmpd=='BN'
%   const tpan=f metal=f azb=3.615/.529
% elseifd cmpd=='AlN'
%   const azb=4.38/.529
%   const tpan=f metal=f cnfp{eltl(1,1)}=ofpxx?2:0 awz=3.111/.529 q=1.601 xwz=.021
%   char0 link{eltl(1,1)}="0 0 0 -3 -3 -1.2" link{eltl(2,2)}="0 0 0 -1 -1.3 -1.2"
%   ifdef bigbas
%     char0 bas{eltl(1,1)}=3,0,3,1.1,-.2,0,1.00,.8,-1,0,1,1,-3
%     char0 bas{eltl(2,2)}=3,0,2,.95,-.2,0,1.05,.8,-1,0,1,1,-3
%   endif
%   char0 bas{eltl(1,1)}=2,0,2,1.1,-.2,0,1,1.6,-1
%   char0 bas{eltl(2,2)}=2,0,2,.95,-.2,0,1,3.0,-1
% elseifd cmpd=='GaN'
%   const azb=4.52/.529
%   const tpan=f metal=f awz=3.190/.529 q=1.627 xwz=.006
%   const cnfp{eltl(1,1)}=ofpxx?2:0 cnfd{eltl(1,1)}=tpan==2?4:-1 elind=1.2
%   char0 link{eltl(1,1)}="0 0 0 -1.5 -1.5 -.8" link{eltl(2,2)}="0 0 0 -1 0 -1.2"
%   ifdef bigbas>0 & ftb
%     char0 bas{eltl(1,1)}=5,0,1,1.1,-.2,0,1,.85,-1,2,2,1.1,-.4,2,2,.7,-1,0,2,1.1,-3
%     char0 bas{eltl(2,2)}=3,0,2,0.95,-.2,0,1,1.05,-1,0,1,1,-3
%   elseifd bigbas>0 & ofp
%     const lb{eltl(1,1)}=322
%   endif
%   char0 bas{eltl(1,1)}=4,0,1,1.1,-.2,0,1,.85,-1,2,2,1.1,-.4,2,2,.7,-1
%   char0 bas{eltl(2,2)}=2,0,2,0.95,-.2,0,1,1.05,-1,0,1,1,-3
% elseifd cmpd=='InN'
%   const azb=4.98/.529
%   const tpan=f metal=f awz=3.533/.529 q=1.611 xwz=.018
%   const cnfp{eltl(1,1)}=ofpxx?2:0 cnfd{eltl(1,1)}=tpan==2?4:-1
%   char0 link{eltl(1,1)}="0 0 0 -1.5 -1.8 -.8" link{eltl(2,2)}="0 0 0 -1 -3 -1.2"
% elseifd cmpd=='Si' | cmpd=='SiSi'
%   const tpan=f metal=f azb=10.26
%   char0 link{eltl(1,1)}="0 0 0 -1.4 -2.0 -1.3" link{eltl(2,2)}="0 0 0 -1.4 -2.0 -1.3"
%   char0 bas{eltl(1,1)}=2,0,2,1.3,-.3,0,1,2.1,-1.5,0,1,1.4,-3
%   char0 bas{eltl(2,2)}={bas{eltl(1,1)}}
% elseifd cmpd=='Ge' | cmpd=='GeGe'
%   const tpan=t metal=t azb=10.67
%   char0 link{eltl(1,1)}="0 0 0 -1.45 -2.0 .4" link{eltl(2,2)}="0 0 0 -1.45 -2.0 .4"
% elseifd cmpd=='Sn' | cmpd=='SnSn'
%   const tpan=t metal=t azb=12.25
% elseifd cmpd=='SiC'
%   const tpan=f metal=f azb=8.24
%   const tpan=f metal=f awz=3.086/.529 q=sqrt(8/3)
%   char0 bas{eltl(1,1)}=2,0,2,1.3,-.3,0,1,2.1,-1.5,0,1,1.4,-3
%   char0 bas{eltl(2,2)}=2,0,2,.85,-.6,0,1,1.8,-1.5,1,1,1,-3
% elseifd cmpd=='GeC'
%   const tpan=t metal=f azb=8.6
% elseifd cmpd=='SiGe'
%   const tpan=t metal=f azb=10.44
% elseifd cmpd=='Si2GeC'
%   const tpan=t metal=f azb=9.28 Zb=32
% elseifd cmpd=='BP'
%   const tpan=f metal=f azb=4.538/.529
% elseifd cmpd=='AlP'
%   const tpan=f metal=f azb=10.33
% elseifd cmpd=='GaP'
%   const tpan=f metal=f azb=10.29
% elseifd cmpd=='InP'
%   const tpan=f metal=f azb=11.09
%   char0 link{eltl(1,1)}="0 0 0 -1.7 -5 -.7" link{eltl(2,2)}="0 0 0 -1.3 -1.5 -1.3"
% elseifd cmpd=='TlP'
%   const tpan=f metal=t azb=11.09
%   char0 link{eltl(1,1)}="0 0 0 -1.6 -1.6 -.9" link{eltl(2,2)}="0 0 0 -1.3 -2 -1.3"
% elseifd cmpd=='BAs'
%   const tpan=f metal=f azb=4.777/.529
% elseifd cmpd=='AlAs'
%   const tpan=t metal=f azb=10.69
% elseifd cmpd=='GaAs'
%   const tpan=t metal=f azb=10.66
%   const cnfd{eltl(1,1)}=2
%   char0 bas{eltl(1,1)}=2,0,2,1.8,-.4,0,1,1.8,-1
%   char0 bas{eltl(2,2)}=2,0,2,1.4,-.4,0,1,1.5,-1
% elseifd cmpd=='InAs'
%   const tpan=t metal=t azb=11.43
%   const cnfd{eltl(1,1)}=2
%   char0 link{eltl(1,1)}="0 0 0 -1.7 -2.3 -.7" link{eltl(2,2)}="0 0 0 -1.4 -1.7 5"
% elseifd cmpd=='TlAs'
%   const cnfd{eltl(1,1)}=2
%   char0 link{eltl(1,1)}="0 0 0 -1.6 -2.1 -.9" link{eltl(2,2)}="0 0 0 -1.4 -1.7 5"
%   const tpan=t metal=t azb=11.43
% elseifd cmpd=='AlSb'
%   const tpan=t metal=t azb=11.59
% elseifd cmpd=='GaSb'
%   const tpan=t metal=f azb=11.50
% elseifd cmpd=='InSb'
%   const tpan=t metal=t azb=12.23
%   char0 link{eltl(1,1)}="0 0 0 -1.75 -2.3 -.65" link{eltl(2,2)}="0 0 0 -1.6 -1.9 1.5"
% elseifd cmpd=='TlSb'
%   const tpan=t metal=t azb=12.23
%   char0 link{eltl(1,1)}="0 0 0 -1.7 -2.3 -.9" link{eltl(2,2)}="0 0 0 -1.6 -1.9 1.5"
% elseifd cmpd=='InTlSb'
%   const tpan=t metal=t azb=12.23 Zb=81
% elseifd cmpd=='ZnS'
%   const tpan=f metal=f azb=10.23
% elseifd cmpd=='CdS'
%   const tpan=f metal=f azb=11.01
% elseifd cmpd=='HgS'
%   const tpan=f metal=t azb=11.06
% elseifd cmpd=='ZnSe'
%   const tpan=t metal=f azb=10.71
% elseifd cmpd=='CdSe'
%   const tpan=t metal=f azb=11.44
% elseifd cmpd=='HgSe'
%   const tpan=t metal=t azb=11.50
% elseifd cmpd=='ZnTe'
%   const tpan=t metal=f azb=11.53
% elseifd cmpd=='CdTe'
%   const tpan=t metal=f azb=12.25 elind=1
%   ifdef bigbas & ftb
%     char0 bas{eltl(1,1)}=5,0,1,1.8,-.4,0,1,1.6,-1,1,2,1,-.3,2,2,1,-1,3,3,1.8,-1
%     char0 bas{eltl(2,2)}=3,0,3,1.60,-.2,0,2,3,-1,0,1,1.6,-2.5
%   endif
%   char0 bas{eltl(1,1)}=3,0,1,1.8,-.4,0,1,1.6,-1,2,2,1,-.3
%   char0 bas{eltl(2,2)}=2,0,2,1.60,-.2,0,1,3,-1
% elseifd cmpd=='HgTe'
%   const tpan=t metal=t azb=12.21
% elseifd cmpd=='HgCdTe'
%   const tpan=t metal=f azb=12.25 Zb=81
% else
%   stop 1 semi.mater (abort): Unrecognized compound "{cmpd}"
% endif
#---------------- Element-dependent constants ----------------
% includo spec.prop
#---------------- Miscellaneous defaults  ----------------
% const awz=azb/sqrt(2) q=sqrt(8/3) xwz=0 elind=-1
% var ixx=0
% while  ixx+=1 ixx<={eltl(:e)}
%   char eltlxx={eltl(ixx,ixx)} eltxx={elt{eltl(ixx,ixx)}}
%   ifdef ofp
%     const lb{eltlxx}=bigbxx>0?321:(bigbxx==0?221:129)
%   endif
%   ifdef asa & cnfd{eltlxx}>=0
%     var Zxx={Z{eltlxx}}
%     cconst Zxx==7|Zxx==16|Zxx==17          idxd{eltlxx}=2
%     cconst Zxx==12|Zxx==20                 idxd{eltlxx}=2
%     cconst Zxx==31|Zxx==32|Zxx==33|Zxx==34 idxd{eltlxx}=2
%     cconst Zxx==49|Zxx==50|Zxx==51|Zxx==52 idxd{eltlxx}=2
%   endif
%   const idxd{eltlxx}=1
% end
# ----------------- cleanup --------------
% ifndef ofp
%   udef -f link{eltl(1,1)} link{eltl(2,2)}
% endif
% ifndef ftb
%   udef -f bas{eltl(1,1)} bas{eltl(2,2)}
% endif
#---------------- Printout ----------------------
% var ixx=0
% while  ixx+=1 ixx<={eltl(:e)}
%   char eltlxx={eltl(ixx,ixx)} eltxx={elt{eltl(ixx,ixx)}}
%   char strnxx="P={cnfs{eltlxx}},{cnfp{eltlxx}},{cnfd{eltlxx}}"
%   ifdef bas{eltlxx}
%     char strnxx="{strnxx} bas={bas{eltlxx}}"
%   endif
%   echo {eltxx}({eltl(ixx,ixx)}): {strnxx}
% end
% udef -f ixx eltlxx eltxx strnxx ofpxx bigbxx
#% show vars
#% stop 1
