#!/bin/tcsh -f
# Shell script to make nuclear dynamical matrix
# Uses phonopy
# Example for GaAs:
#   band-edge -maxit=11 --bin -edge2=.3 -r=.01 -band=9 -q0=.1,.2,.3 gas
# To calculate mass of conduction band
#   band-edge -cmd=lmf --bin -mass n=12 -alat=10.66 -r=.001,.002,.003,.004 -band=10 -q0=0,0,0 gas
#  Updates
#    12 Jul 18  (MvS) first attempt
#---------------------------------------------

alias findcmd  'set retcall = \!\!:1 ; set prognam = \!\!:2 ; set prog_cmd = \!\!:3 ; set path_name = \!\!:4 ; set make_path = \!\!:5 ; goto findcmd'
alias walltime  'set retcall = \!\!:1; set time_var = \!\!:2 ; set time_start = \!\!:3; goto walltime'
alias pdtime  'set retcall = \!\!:1; set time_start = \!\!:2; goto pdtime'
set space = '        '
set vsn = 1.0
set testfile = $0
set testdir = $testfile:h
set topdir
set noexec = 0

# Set the command to the specific calculation
set cmd = 'lmf'
set fac = 1

while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")
  set arg1 = "$1"; shift

  switch ("$arg1")
    case "--init":
    case "-init":
      set init
      breaksw

    case "--forces":
    case "-forces":
      set forces
      breaksw

    case "--verb":
    case "-verb":
      set verb
      breaksw

    case "--assemble":
    case "-assemble":
      set assemble
      breaksw

    case "--assemble":
    case "-assemble":
      set assemble
      breaksw

    case "-jobs=*":
      set joblst = `echo $arg1 | sed s/-jobs=//`
      breaksw

    case "-stash=*":
      set stashlst = `echo $arg1 | sed s/-stash=//`
      breaksw

    case "-mvstash=*":
      set mvstash = `echo $arg1 | sed s/-mvstash=//`
      breaksw

    case "-cpf=*":
      set filel = `echo $arg1 | sed s/-cpf=//`
      breaksw

    case "-fac=*":
      set fac=`echo $arg1 | sed s/-fac=//`
      breaksw

    case "-rsbk":
      set rsbk
      breaksw

    case "-cmd=*":
      set cmd = "`echo $arg1 | sed s/-cmd=//`"
      breaksw

    case "--noexec":
      set noexec = 1
      breaksw

    default:
      echo unrecognized switch $arg1
      goto usage
  endsw
end

if ($#argv == 0) echo
if ($#argv == 0) echo '        missing extension ...'
if ($#argv != 1) goto usage
set ext = $argv[1]

if (! -e ctrl.$ext) then
  echo " $0 aborting : missing file ctrl.$ext "
  exit -1
endif

ls supercell-*.$ext >& /dev/null
if ($status != 0) then
  echo "$0 aborting : no files 'supercell-*'.$ext"
  exit -1
endif

if ($?init != 0) then
  echo "$0 : init mode"
else if ($?forces != 0) then
  echo "$0 : forces mode"
else if ($?assemble != 0) then
  echo "$0 : assemble mode"
endif

findcmd chk00a lmf lmf "$path" "yes"
chk00a:
echo using for lmf : $lmf
findcmd chk00b lmscell lmscell "$path" "yes"
chk00b:
echo using for lmscell : $lmscell
findcmd chk00c mcx mcx "$path" "yes"
chk00c:
echo using for mcx : $mcx

# Default directory list
set alldir
foreach i ( supercell-*.$ext )
  set nextdir = `echo $i | sed s/.$ext// | sed s/supercell-//`
  set alldir = ($alldir $nextdir)
end

# Custom directory list
if ($?joblst == 0) then
  set dirlst = ($alldir)
else
  set tmplst = ($joblst)
# In future allow some expansion
  set dirlst = `echo $tmplst | sed 's/,/ /g' | awk ' {for (i = 1; i <= NF; ++i) {if ($i<10) printf " 00%i", $i; if ($i>9 && $i<100) printf " 0%i", $i ; if ($i>99) printf " %i", $i }} '`
endif

if ($#dirlst == 0) then
  echo "$0 : no directory list ... nothing to do"
  exit
endif

echo
echo -n "$space checking for directories: $dirlst ... "
foreach nextdir ( $dirlst )
  if (! -d $nextdir) then
    echo missing directory $nextdir ... abort
    exit -1
  endif
end # directory check
echo ok


# Build default file list if init is and no list supplied
if ($?init != 0 && $?filel == 0) then
  echo -n "$space building default file list for init mode ... "
  set filel = "ctrl.$ext"
  foreach i (rst.$ext basp.$ext switches-for-lm)
    if (-e $i) set filel = ($filel $i)
  end
  echo $filel
endif

# copy files to working directory
if ($?filel != 0) then
if ($#filel > 0) then
  echo -n "$space checking copy file list ..."
  set cpf
  foreach i (`echo $filel | sed 's/,/ /g'`)
    if (-e $i) then
      echo -n " "$i
      set cpf = ($cpf $i)
    else if (-e $i.$ext) then
      echo -n " "$i.$ext
      set cpf = ($cpf $i.$ext)
    else
      echo missing $i ... abort
      exit -1
    endif
  end
  echo " "... ok

  foreach i ($dirlst)
    if ($?verb) then
    echo "$space cp -p $cpf $i"
    endif
    if ($noexec == 0) then
                 cp -p $cpf $i
    endif
  end
endif
endif

if ($?mvstash != 0) then
echo "$space renaming stash directory to $mvstash"
foreach nextdir ( $dirlst )
  if (-d $nextdir/stash) then
    echo "$space mv $nextdir/stash $nextdir/$mvstash"
    if ($noexec == 0) then
       mv $nextdir/stash $nextdir/$mvstash
    endif
  else
    echo "$space no $nextdir/stash ... skip"
  endif
end   # foreach nextdir
echo $0 : finished renaming stash directories
exit
endif # stash

if ($?stashlst != 0) then
echo $0 : stashing files $stashlst
foreach nextdir ( $dirlst )
  if (! -d $nextdir/stash) then
    if ($?verb) then
       echo mkdir $nextdir/stash
    endif
    if ($noexec == 0) then
       mkdir $nextdir/stash
    endif
  endif
  foreach i ( $stashlst )
    if (-e $nextdir/$i) then
      if ($?verb) then
         echo cp $nextdir/$i $nextdir/stash
      endif
      if ($noexec == 0) then
         cp $nextdir/$i $nextdir/stash
      endif
    else if (-e $nextdir/$i.$ext) then
      if ($?verb) then
         echo cp $nextdir/$i.$ext $nextdir/stash
      endif
      if ($noexec == 0) then
         cp $nextdir/$i.$ext $nextdir/stash
      endif
    else
      echo missing $nextdir/$i ... skip
    endif
  end # foreach i

end   # foreach nextdir
echo $0 : finished stashing
exit
endif # stash

if ($?init != 0) then
echo $0 : constructing site files from 'supercell-*'.$ext, fac = $fac
if ($noexec == 0) rm -f out.lmscell.$ext

foreach nextdir ( $dirlst )
  if (! -e supercell-$nextdir.$ext) then
    echo "missing file supercell-$nextdir.$ext ... abort"
    exit -1
  endif
  echo $lmscell $ext --plx=no -keep --refsite~swap~plx~fn=supercell-$nextdir~scl=$fac --wsitex~fn=site1
  if ($noexec == 0) then
       $lmscell $ext --plx=no -keep --refsite~swap~plx~fn=supercell-$nextdir~scl=$fac --wsitex~fn=site1 >> out.lmscell.$ext
  endif
  echo cp site1.$ext $nextdir
  if ($noexec == 0) then
       cp site1.$ext $nextdir
  endif
  echo $lmscell $ext --plx=no -keep --refsite~swap~plx~fn=supercell-$nextdir~scl=-$fac --wsitex~fn=site2
  if ($noexec == 0) then
       $lmscell $ext --plx=no -keep --refsite~swap~plx~fn=supercell-$nextdir~scl=-$fac --wsitex~fn=site2 >> out.lmscell.$ext
  endif
  echo cp site2.$ext $nextdir
  if ($noexec == 0) then
       cp site2.$ext $nextdir
  endif
end # nextdir

echo
echo $0 : finished initialization
exit
endif # init

if ($?forces != 0) then
  if ("$dirlst" == "") then
    set dirlst = ($alldir)
  else
    set dirlst = `echo $dirlst | sed 's/,/ /g'`
  endif
  echo "$space compute forces in directories" $dirlst
  echo -n "$space checking whether directories exist ... "
  foreach nextdir ( $dirlst )
    if (! -d $nextdir) then
      echo missing directory $nextdir ... abort
      exit -1
    endif
  end # directory check
  echo ok

  foreach nextdir ( $dirlst )
    echo
    echo cd $nextdir
    if ($noexec == 0) then
       cd $nextdir
    endif
    echo rm -f mixm.$ext
    if ($noexec == 0) then
       rm -f mixm.$ext
    endif
    if ($?rsbk != 0) then
      echo cp rst1.$ext rst.$ext
      if ($noexec == 0) cp rst1.$ext rst.$ext
    else
      echo cp rst.$ext rst0.$ext
      if ($noexec == 0) cp rst.$ext rst0.$ext
    endif
    echo "$cmd $ext --wforce=force1 -vfile=1 `cat switches-for-lm` --rs=11,1,1 > out.1"
    if ($noexec == 0) then
       $cmd $ext --wforce=force1 -vfile=1 `cat switches-for-lm` --rs=11,1,1 > out.1
    endif
    echo cp rst.$ext rst1.$ext
    if ($noexec == 0) then
       cp rst.$ext rst1.$ext
    endif
    echo rm -f mixm.$ext
    if ($noexec == 0) then
       rm -f mixm.$ext
    endif
    if ($?rsbk != 0) then
      echo cp rst2.$ext rst.$ext
      if ($noexec == 0) cp rst2.$ext rst.$ext
    else
      echo cp rst0.$ext rst.$ext
      if ($noexec == 0) cp rst0.$ext rst.$ext
    endif
    echo "$cmd $ext --wforce=force2 -vfile=2 `cat switches-for-lm` --rs=11,1,1 > out.2"
    if ($noexec == 0) then
       $cmd $ext --wforce=force2 -vfile=2 `cat switches-for-lm` --rs=11,1,1 > out.2
    endif
    echo cp rst.$ext rst2.$ext
    if ($noexec == 0) then
       cp rst.$ext rst2.$ext
    endif
    echo "mcx -f3f14.8 force1.$ext force2.$ext -- -s1/2 -s1/$fac > force.$ext"
    if ($noexec == 0) then
       mcx -f3f14.8 force1.$ext force2.$ext -- -s1/2 -s1/$fac > force.$ext
    endif
    echo exiting $nextdir
    echo cd ..
    if ($noexec == 0) then
       cd ..
    endif

  end # calculation of forces

echo
echo $0 : finished calculating forces
exit

endif # forces

if ($?assemble != 0) then

echo NOT READY to assemble forces

echo
echo $0 : finished assembling forces
exit

endif # aassmble

echo STOP ... nothing to do
exit

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label program-name executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:

set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prognam = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end

# if (! $?quiet) then
#   if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
#   if ($found == 'no')  echo "$space ... no executable $prog_cmd found in path"
# endif

if ($found == 'no' && "$make_path" != "no") then
  if ($?maindir == 0) set maindir
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir $maindir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must include '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

# ---------------- walltime --------------
exit
# Returns wall-clock time.
# Usage: walltime return_label time_var time_start
# have_bc or have_dval should be set.
exit
walltime:
if ($?have_bc) then
  echo `date  +%d`'*24*60'+`date  +%H`'*60'+`date  +%M`+`date  +%S`/60   | $have_bc -l >datenow~; set datenow = `cat datenow~`
else if ($?have_dval) then
  dval -fd3 d=`date  +%d` h=`date  +%H` m=`date  +%M` s=`date  +%S` '(d*24+h)*60+m+s/60' >datenow~; set datenow = `cat datenow~`
else
  set $time_var = 0
  goto $retcall
endif
#cat datenow~
if ($time_start == 0) then
  set $time_var = $datenow
  goto $retcall
else
  if ($?have_bc) then
    set $time_var = `echo $datenow-$time_start | bc -l | awk '{printf("%.1f",$1)}'`
  else if ($?have_dval) then
    set $time_var = `dval -fd1 $datenow-$time_start`
  endif
endif
goto $retcall

# ---------------- Prints out difference between current wall clock time and time_start --------------
exit
# Returns wall-clock time
# Usage: if ($?pwtime) pdtime return_label time_start
# To work, have_bc or have_dval must be set.  Otherwise prints ' '
exit
pdtime:
set retcallp = $retcall
if ($?have_bc) then
  set time0 = $time_start
  walltime pdtime2 deltat 0
  pdtime2:
  echo $deltat $time0 | awk '{printf(" ... %.1fm (%.1fh)\n",$1-$2,($1-$2)/60.)}'
else if ($?have_dval) then
  set time0 = $time_start
  walltime pdtime3 deltat 0
  pdtime3:
  dval -a " ... %;1dm (%;2dh)"  $deltat-$time0 $deltat/60-$time0/60
else
#   echo ' ... (*)'
  echo
endif
goto $retcallp

exit
usage:
echo 'usage : lmf-phonopy switches extension'
echo '        switches should consist of one mode controlling program flow, with addditional options:'
echo '        modes governing program flow are (in order of precedence):  -stash -mvstash -init  -forces  -assemble'
echo '          --help'
echo '          --h'
echo '            show this message'
echo ''
echo '          --version'
echo '            Reports version to standard output and exits'
echo ''
echo '          -jobs=list'
echo '            Perform commands on specified list of working directories'
echo '            If absent the list will be inferred which files'
echo '            supercell-nnn.$ext are present'
echo '            Applies to all program flow modes'
echo ''
echo '          -cpf=file-list'
echo '            copy files in file-list to each working directory'
echo '            Applies to all program flow modes'
echo ''
echo '          -mvstash=newstash'
echo '            rename jobdir/stash to jobdir/newstash'
echo ''
echo '          -stash=file-list'
echo '            stash files in file-list in each working directory'
echo ''
echo '          -init'
echo '            Sets up intitial directories and site files with displacements'
echo ''
echo '          -forces'
echo '            Computes the forces in specified directories'
echo ''
echo '          -assemble'
echo  '           Assembles forces for phonopy'
echo ''
echo '          -fac=#'
echo  '           Scale default phonopy displacement amplitudes by fac'
echo  '           Applies to the init and force modes'
echo ''
echo '          -rsbk'
echo  '           Attempts to copy rst1.ext to rst.ext before + difference'
echo  '           Attempts to copy rst2.ext to rst.ext before - difference'
echo  '           Applies to the force mode'
echo ''
echo '          -cmd=strn'
echo  '           use strn in place of default command to generate bands, e.g.'
echo  '           mpirun -n 16 lmf'
echo  '           Applies to the force mode'
echo ''
echo '          --noexec'
echo  '             show what codes would execute without executing them'
echo ''
echo '          --verb'
echo '            verbose printout'
echo ''
echo '        Example:'
echo "        lmf-phonopy -verb -cpf=switches-for-lm -jobs=1,2 --forces -rsbk -fac=1 -cmd='mpix -n 16 lmf' mono"
echo ''
exit -1

error:
echo "lmgw (abort): program failed to return with zero value"
exit -1
