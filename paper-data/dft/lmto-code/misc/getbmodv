#!/bin/tcsh -f
# Compute Bulk modulus given E(V)

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias findcmd    'set retcall = \!\!:1 ; set prog_cmd = \!\!:2 ; set path_name = \!\!:3 ; set action = \!\!:4 ; goto findcmd'
alias gettmpname 'set retcall = \!\!:1 ; set tmpfile = \!\!:2; goto gettmpname'

set testfile = $0
set testdir = $testfile:h
set space = '        '
set volexpr = x1
set eexpr = x2
set fitorder = 4

options:
switch ("$1")
  case "-vol=*":
    set volexpr=`echo "$1" | sed s/-vol=//` ; shift; goto options

  case "-e=*":
    set eexpr=`echo "$1" | sed s/-e=//` ; shift; goto options

  case "-atvol=*":
    set atvolexpr=`echo "$1" | sed s/-atvol=//` ; shift; goto options

  case "-keep":
    set keeptmpfiles; shift; goto options

  case "-order=*":
    set fitorder=`echo "$1" | sed s/-order=//` ; shift; goto options

  case "-*":
     echo 'getbmodv : no switch "'$1'"' ... aborting ; exit -1
endsw

if ($#argv == 0) goto usage

#set quiet

if (! -r "$1") then
  echo getbmodv : file  "$1"  is missing or unreadable ... aborting
  exit -1
endif

# get temporary file name for infile
gettmpname chk11a .
chk11a:
set infile = $tmpfile
# get temporary file name for outfile
gettmpname chk11b .
chk11b:
set outfile = $tmpfile
findcmd chk11c mcx "$path" "required_programs"
chk11c:
findcmd chk11d pfit "$path" "required_programs"
chk11d:
findcmd chk11e dval  "$path" "required_programs"
chk11e:


if (! $?quiet) then
  echo " "
  echo "$space ... creating energy-volume data in file $infile"
  echo "$space     mcx -e2 $volexpr "$eexpr" $1 > $infile"
endif
mcx -e2 "$volexpr" $eexpr $1 > $infile
if (! $?quiet) then
  echo " "
  echo "$space ... least-squares polynomial fit in file $outfile (order $fitorder)"
endif

if (! $?atvolexpr) then
  set vol0 = `mcx $infile -s1/nr -rsum | tail -1 | awk '{print $1}'`
  echo    "$space     average volume of points from file $infile is $vol0"
  echo    "$space     look for minimum starting at $vol0 using:  pfit $fitorder $infile >$outfile"
  pfit $fitorder $infile <<EOF >$outfile
$vol0
min:.01
EOF
  grep found $outfile >/dev/null
  if ($status) then
    echo    "          no minimum found ... aborting"
    exit -1
  endif
  echo  "             found minimum-energy volume"
  set volm = `grep found $outfile | awk '{print $(NF)}'`
  echo  "          V(min) = " $volm
else
  set volm = `mcx -1:1 "-s$atvolexpr" | tail -1`
  echo  "            V(*) = $volm = $atvolexpr "
endif

(echo "$volm" | pfit $fitorder $infile >$outfile)
set ev = `grep f= $outfile | awk '{print substr($2,3)}'`
set dedv = `grep f= $outfile | awk '{print $4}'`
set d2edv = `grep f= $outfile | awk '{print $5}'`
set b0 = `dval "$volm*147*$d2edv"`
echo  "           E(V*) =" $ev
echo  "          E'(V*) =" $dedv
echo  "         E''(V*) =" $d2edv

echo " "
echo  "$space ... volume, energy, and bulk modulus:"
dval -a " V*         %;3d" $volm
dval -a " E(V*)      %10z%;4,4d" 0+$ev
dval -a " B(V*)%11p%1,3;3g Mbar (or 10^12 erg/cm^3)" $b0
echo " "
echo '   Note:   Mbar/GPa = 100 ; Mbar/(erg/cm^3) = 10^12'
echo '   To restore minimum of original variable, invert vol= expression, e.g.'
echo "   dval -fd2 vol=$volm  a=4*vol a^=1/3 a"

if (! $?keeptmpfiles) rm $infile $outfile

# ---------------- usage --------------
exit
usage:
echo "  usage: getbmodv [-switches] datafile"
echo " "
echo "    getbmodv extracts bulk modulus from file 'datafile'"
echo "    which my default consists of two data columns."
echo "    The first column should be the volume (in a.u.)"
echo "    The second should be the energy (in Ry)"
echo "    See 'Switches' to convert file 'datafile' into this format"
echo " "
echo "    Switches:"
echo "    -vol=expression"
echo "         'expr' is an algebraic expression which involves"
echo "          the columns in your data file."
echo "          Use x1 for the first column, x2 for the second, etc"
echo " "
echo "    -e=expression"
echo "         is analogous to -vol=expression above, except that"
echo "         it is for the second (energy) column."
echo "         Example : the following takes as input file 'datfile' where"
echo "                   the first column is an fcc lattice constant (au)"
echo "                   and the third column has the energy, in eV:"
echo "           getbmodv -vol=x1^3/4 -e=x3/13.6 datfile"
echo " "
echo "    -atvol=expression"
echo "         is analogous to -vol=expression above, except that"
echo "         it tells the script to evaluate results at this volume"
echo "         rather than the equilibrium one"
echo " "
echo "    -keep"
echo "         tells the script not to discard input (E vs V)"
echo "         and output (result of pfit) files."
echo " "
echo "    -order=#"
echo "         tells the polynomial fitter to use a polynomial of order #"
echo "         Default is 4th order."
echo " "
echo " "

#exit
required_programs:
echo "    This script requires the following executables in your path:"
echo "      mcx   : matrix calculator program"
echo "      pfit : polynomial least-squares fitting program"
echo "      dval : expression evaluator"
#echo " "

# ---------------- gettmpname --------------
# Finds an available temporary name
exit
gettmpname:
if (-d $tmpfile ) then
  set tmpfile = $tmpfile/dat
endif
while ( -e $tmpfile)
  set tmpfile = $tmpfile{x}
end
touch $tmpfile
#  if (! $?quiet) then
#    echo "$space ... using temporary file $tmpfile"
#  endif
goto $retcall

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage:
#   findcmd return_label executable_command path_name action
# If $executable_command is found, findcmd returns with $found="yes"
#
# If $executable_command is not found, findcmd does the following:
#   If action = 'silent'   : findcmd returns with $found="no"
#   If action = 'required' : prints a message and aborts
#   Otherwise findcmd prints a message, and goes to label $action.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prog_cmd = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... no executable $prog_cmd found in path"
endif

if ($found == 'yes' || "$action" == "silent") goto $retcall
if ("$action" == "required") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path."
  echo "  "
  exit -1
endif
goto $action

