#!/bin/csh -f
#
# Shell script to generate a Make.patch for archive library subs.a (see Maksmakfile)
# which consists of an archive compiled from the source code in this directory.
#
# Usage: Maksmakfile [--config machine-configuration] [--mnemonic machine-mnemonic]
# The arguments' purposes are described below.

# Switch --config machine-configuration
# By default, Maksmakfile will try to determine your machine configuration
# using the script config.guess, in the standard GNU format (config.sub)
# Switch --name overrides this default.  config.sub is still used to check
# that whichever one it uses is valid.

# Optional argument machine-mnemonic
# Maksmakfile may depend on the machine mnemonic (see script Makemakefile)
# to decide on what routines to compile specially (see Special-Flags below).
# By default, it extracts the machine mnemonic from Make.inc.  Supplying
# your own overrides this
#
# The following can be passed to Makepatchfile but are not used:
# Switch --in:
# Switch --split:
# Switch --initF90:
# Switch --name archive-name:
#
# Thus Makepatchfile uses as input :
#
# 1. Make.inc, which contains the compiler switches and flags
#              and the machine mnemonic used to generate them.
#              This is typically produced by shell script Makemakefile.
#
# 2. config.guess which supplies information about the machine architecture
#    config.sub which verifies the validity of the name used.
#
# 3. Shell script Special-Flags which tells Makepatchfile which routines
#    it needs to compile specially.  Special-Flags should produce 0 or
#    more lines of the form
#     $(FC) flags-here :: list-of-files
#    e.g.
#     $(FC) $(FLAGS_LESS) :: ropyln makidx
#    (Note that Makemakefile typically produces a generic $FLAGS_LESS)
#    The flags can be explicit or one defined generically.
#
# Makepatchfile produces a Makefile that can create the following
# (assuming subs.a is the archive name)
#
# make init
#    invokes /bin/csh on file 'subs-to-xxx', if it exists, with
#    xxx = a lower-case rendition of the machine-mnemonic.  This enables
#    machine-dependent customization of the archive via the Makefile.
#
# make
# make all
#    create the archive library subs.a

set thisfile = $0
set mnemonic = `grep MNEMONIC Make.inc | sed 's/.*= *//'`
set thisdir = $thisfile:h
if ($thisdir == $thisfile) set thisdir = `pwd`
set arnam = subs
set ARNAM = `echo $arnam | awk '{print toupper($1)}'`

while ( "$1"set != "set" )
  switch ($1)
    case "--initF90"
      shift ; set initF90; breaksw
    case "--in":
      shift ; set make_in; breaksw
    case "--split":
      shift ; set split; breaksw
    case "--config":
      shift ; set host_alias = $1 ; shift; breaksw
    case "--name":
      shift ; set arnam = $1 ;
      set ARNAM = `echo $arnam | awk '{print toupper($1)}'`
      shift; breaksw
    case "--mnemonic":
      shift ; set mnemonic = $1 ; shift; breaksw
    case "-*":
      echo Makepatchfile : unrecognized switch $1 ...
      exit -1
    default:
      echo Makepatchfile : unrecognized argument $1 ...
      exit -1
  endsw
end

if ($#argv > 1) echo "# Makepatchfile ... ignoring trailing arguments $2 ... "

# --- Get GNU machine configuration from config.guess ---
if (! $?host_alias) set host_alias = `$thisdir/config.guess`

set host = `$thisdir/config.sub $host_alias`
if ($status != 0) then
  echo $thisdir/Makepatchfile : unrecognized configuration $host_alias
  exit -1
endif

# --- Decompose configuration to get OS and machine_name ---
set maybe_os = `echo $host | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\2/'`
switch ($maybe_os)
  case "linux-gnu*":
    set os = $maybe_os
    set basic_machine = `echo $host | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\1/'`
    breaksw
  default:
    set basic_machine = `echo $host | sed 's/-[^-]*$//'`
    if ( $basic_machine != $maybe_os) then
      set os = `echo $host | sed 's/.*-//'`
    else
      set os
    endif
endsw

#  set host_os = `echo $host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
#  set host_cpu = `echo $host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`

# --- Get compiler name from Make.inc ---
set compiler = `grep '^FC' Make.inc | head -1 | sed 's/FC *= *\([A-Za-z0-9]*\)\( *\|$\)/\1/'`

echo "# Special-purpose compilations generated by Makepatchfile"
echo "# Machine configuration:  $host"
# echo "# basic_machine        :  $basic_machine"
echo "# Compiler name as extracted from Make.inc:  $compiler"
echo "# Machine mnemonic : $mnemonic"
echo ' '


if ($host =~ *-dec-osf*) then
  echo '# Special patch to archive .o files with DEC make.'
  echo '# It may be bizarre, but it runs without generating an error,'
  echo '# which is no small accomplishment.'
  echo '	echo patch to archive .o files using DEC make ...'
  echo '	touch xx.o'
  echo '	if [ ` (ls -1 | grep -c [.]o$$) ` != 1 ] ; then \'
  echo '	(rm xx.o; ar rv '$arnam'.a *.o ; rm *.o ) ;\'
  echo '	else (rm xx.o); fi'
  echo '	$(RANLIB) '$arnam'.a'
endif
echo ' '

if (-x Special-Flags) then
  set flagsw = "$host $mnemonic"
# set flagsw = "ymp-cray-unicos CRAY"
# set flagsw = "rs6000-ibm-aix3.2.5 AIX90"
# echo " ... invoking ./Special-Flags $flagsw"
  set nlines = `./Special-Flags $flagsw | awk 'BEGIN {nlines=1} { nlines++ }; END { print nlines-1 }' `
  echo "# --- Makepatchfile : $nlines set(s) files needing special compilation ---"
  echo ' '
  set i = 0
  while ($i < $nlines)
    @ i = $i + 1
    set line = `./Special-Flags $flagsw | head -$i | tail -1`
    echo $line | grep :: >/dev/null
    if ($status != 0) then
      echo '# ... (warning) the following rule is missing "::"' and will be ignored:
      echo "#     $line"
    else
      set fcf = ` echo $line | sed 's/\(.*\)::\(.*\)/\1/' `
      set lst = ` echo $line | sed 's/\(.*\)::\(.*\)/\2/' `
      echo "# ... file(s) $lst"
      foreach k ($lst)

	switch ($k)
	  case "[a-l]*":
	    echo '$('$ARNAM')'\($k.o\)': '
            breaksw

	  case "[m-z]*":
	    if ($?split) then
	      echo '$('$ARNAM'2)'\($k.o\)': '
	    else
	      echo '$('$ARNAM')'\($k.o\)': '
	    endif
	endsw

	echo "	$fcf -c $k.f"

	switch ($k)
	  case "[a-l]*":
	    echo '	ar rv $('$ARNAM')' $k.o
            breaksw

	  case "[m-z]*":
	    if ($?split) then
	      echo '	ar rv $('$ARNAM'2)' $k.o
	    else
	      echo '	ar rv $('$ARNAM')' $k.o
	    endif
	endsw

	echo '	rm -f' $k.o
	echo ' '
      end
    endif
    echo ' '
  end
endif

if (-r Make.patch0) then
  echo '# --- Appending Make.patch0 ---'
  cat Make.patch0
endif
