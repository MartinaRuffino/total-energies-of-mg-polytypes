#!/bin/csh -f
#
# Shell script to generate a Makefile for archive library subs.a,
# which consists of an archive compiled from the source code in this directory.
#
# Usage: Maksmakfile [--in] [--initF90] [--split] [--name archive-name] [--config machine-configuration] [--mnemonic machine-mnemonic]
# The arguments' purposes are described below.

# Switch --in:
# Maksmakfile either produces directly a Makefile or, if switch --in is set,
# a file Makefile.in, and for which it is intended to be converted to a Makefile
# by script 'configure'.  The latter will substitute the following variables:
#     RANLIB   program to converts archives to random libraries
#     ADD0     when fortran output needs padding with zeros for checking purposes
#     CCOMPDIR directory in which ccomp resides
#
# Otherwise, Maksmakfile assumes a value for them.

# Switch --split:
# Breaks the archive macro into two parts

# Switch --initF90:
# Adds to 'init' token the following:
# ccomp-file conversion enabling F90, provided $(FC_IS_F90)="yes"
# ccomp-file conversion enabling AUTO-ARRAY, provided $(FC_AUTOARRAY)="yes"

# Switch --name archive-name:
# By default, Maksmakfile creates a Makefile for archive subs.a .
# Switch --name overrides this default.  archive-name should end in 'a.'

# Switch --config machine-configuration
# By default, Maksmakfile will try to determine your machine configuration
# using the script config.guess, in the standard GNU format (config.sub)
# Switch --name overrides this default.  config.sub is still used to check
# that whichever one it uses is valid.

# Optional argument machine-mnemonic
# Maksmakfile may depend on the machine mnemonic (see script Makemakefile)
# to decide on what routines to compile specially (see Special-Flags below).
# By default, it extracts the machine mnemonic from Make.inc.  Supplying
# your own overrides this
#

# Thus Maksmakfile uses as input :
#
# 1. Make.inc, which contains the compiler switches and flags
#              and the machine mnemonic used to generate them.
#              This is typically produced by shell script Makemakefile.
#
# 2. config.guess which supplies information about the machine architecture
#    config.sub which verifies the validity of the name used.
#
# 3. Shell script Special-Flags which tells Maksmakfile which routines
#    it needs to compile specially.  Special-Flags should produce 0 or
#    more lines of the form
#     $(FC) flags-here :: list-of-files
#    e.g.
#     $(FC) $(FLAGS_LESS) :: ropyln makidx
#    (Note that Makemakefile typically produces a generic $FLAGS_LESS)
#    The flags can be explicit or one defined generically.
#
# Maksmakfile produces a Makefile that can create the following
# (assuming subs.a is the archive name)
#
# make init
#    invokes /bin/csh on file 'subs-to-xxx', if it exists, with
#    xxx = a lower-case rendition of the machine-mnemonic.  This enables
#    machine-dependent customization of the archive via the Makefile.
#
# make
# make all
#    create the archive library subs.a

set thisfile = $0
if (-e Make.inc) then
  set mnemonic = `grep MNEMONIC Make.inc | sed 's/.*= *//'`
endif
set thisdir = $thisfile:h
if ($thisdir == $thisfile) set thisdir = `pwd`
set arnam = subs
set ARNAM = `echo $arnam | awk '{print toupper($1)}'`

while ( "$1"set != "set" )
  switch ($1)
    case "--initF90"
      shift ; set initF90; breaksw
    case "--in":
      shift ; set make_in; breaksw
    case "--split":
      shift ; set split; breaksw
    case "--config":
      shift ; set host_alias = $1 ; shift; breaksw
    case "--name":
      shift ; set arnam = $1 ;
      set ARNAM = `echo $arnam | awk '{print toupper($1)}'`
      shift; breaksw
    case "--mnemonic":
      shift ; set mnemonic = $1 ; shift; breaksw
    case "-*":
      echo Maksmakfile : unrecognized switch $1 ...
      exit -1
    default:
      echo Maksmakfile : unrecognized argument $1 ...
      exit -1
  endsw
end

if ($#argv > 1) echo "# Maksmakfile ... ignoring trailing arguments $2 ... "

# --- Get GNU machine configuration from config.guess ---
if (! $?host_alias) set host_alias = `$thisdir/config.guess`

set host = `$thisdir/config.sub $host_alias`
if ($status != 0) then
  echo $thisdir/Maksmakfile : unrecognized configuration $host_alias
  exit -1
endif

# --- Decompose configuration to get OS and machine_name ---
set maybe_os = `echo $host | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\2/'`
switch ($maybe_os)
  case "linux-gnu*":
    set os = $maybe_os
    set basic_machine = `echo $host | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\1/'`
    breaksw
  default:
    set basic_machine = `echo $host | sed 's/-[^-]*$//'`
    if ( $basic_machine != $maybe_os) then
      set os = `echo $host | sed 's/.*-//'`
    else
      set os
    endif
endsw

#  set host_os = `echo $host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
#  set host_cpu = `echo $host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`

#  # --- Get compiler name from Make.inc ---
#  set compiler = `grep '^FC' Make.inc | head -1 | sed 's/FC *= *\([A-Za-z0-9]*\)\( *\|$\)/\1/'`

echo "# Makefile generated by Maksmakfile for library $arnam.a"
echo "# Machine configuration:  $host"
if ($?mnemonic) then
echo "# Machine mnemonic : $mnemonic"
endif
echo ' '

if ($?make_in != 0) then
  echo "# variables to be supplied by configure:"
  echo 'RANLIB = @RANLIB@'
  echo 'ADD0 = @ADD0@'
  echo 'CCOMPDIR = @CCOMPDIR@'
  echo ' '
  echo 'SHELL = /bin/sh'
  echo 'INAME = '$arnam'-to-'`echo $mnemonic | awk '{print tolower($1)}'`
  echo ' '
endif

echo '# --- compiler switches ---'
echo "include Make.inc"
echo ' '

echo '# --- archive library ---'
#  echo "$ARNAM =" `pwd`/$arnam.a
#  if ($?split) echo "$ARNAM"2" =" `pwd`/$arnam{2}.a
set subsdir = $cwd:t
echo "$ARNAM =" '$(TOPDIR)'/$subsdir/$arnam.a
if ($?split) echo "$ARNAM"2 = '$(TOPDIR)'/$subsdir/$arnam{2}.a
echo ' '

set BACKSLASH = '\'
#  if ($os =~ linux*) set BACKSLASH = '\\'

if ($?split) then
  echo 'ALL:	$('$ARNAM') $('$ARNAM'2)'
else
  echo 'ALL:	$('$ARNAM')'
endif

if ($host =~ *-dec-osf*) then
  echo '# Special patch to archive .o files with DEC make.'
  echo '# It may be bizarre, but it runs without generating an error,'
  echo '# which is no small accomplishment.'
  echo '	echo patch to archive .o files using DEC make ...'
  echo '	touch xx.o'
  echo '	if [ ` (ls -1 | grep -c [.]o$$) ` != 1 ] ; then \'
  echo '	(rm xx.o; ar rv '$arnam'.a *.o ; rm *.o ) ;\'
  echo '	else (rm xx.o); fi'
  echo '	$(RANLIB) '$arnam'.a'
endif
echo ' '

echo 'init:'
if ($?initF90) then
echo '	if test "$(FC_IS_F90)" = "yes"; then \'
echo '	echo ... enabling F90 extensions;\'
echo '	'$thisdir'/ccomp-files -CCOMP=$(CCOMP) F90 . ; \'
echo '	fi'
echo '	if test "$(FC_IS_F90)" = "no"; then \'
echo '	echo ... disabling F90 extensions;\'
echo '	'$thisdir'/ccomp-files -CCOMP=$(CCOMP) -u F90 . ; \'
echo '	fi'

echo '	if (test "$(FC_AUTOARRAY)" = "yes") && (test "$(FC_IS_F90)" = "no"); then \'
echo '	echo ... enabling AUTO-ARRAY extensions;\'
echo '	'$thisdir'/ccomp-files -CCOMP=$(CCOMP) AUTO-ARRAY . ; \'
echo '	fi'

echo '	if (test "$(FC_AUTOARRAY)" = "no") && (test "$(FC_IS_F90)" = "no"); then \'
echo '	echo ... disabling AUTO-ARRAY extensions;\'
echo '	'$thisdir'/ccomp-files -CCOMP=$(CCOMP) -u AUTO-ARRAY . ; \'
echo '	fi'
endif

echo '	if test -r "$(INAME)"; then \'
echo '	env PATH=$(PATH):$(CCOMPDIR) /bin/csh -f $(INAME) ; \'
echo '	fi'
echo ' '

if ($?split) then
  echo '.PRECIOUS:	$('$ARNAM') $('$ARNAM'2)'
  echo ' '
  echo "$arnam":'	$('$ARNAM') $('$ARNAM'2)'
  echo ' '
  echo "$arnam".a:'	$('$ARNAM') $('$ARNAM'2)'
  echo ' '
else
  echo '.PRECIOUS:	$('$ARNAM')'
  echo ' '
  echo "$arnam":'	$('$ARNAM')'
  echo ' '
  echo "$arnam".a:'	$('$ARNAM')'
  echo ' '
endif

echo '# --- Routines requiring special compilation ---'
echo "include Make.patch"
echo ' '
 

echo '# --- Routines that depend on structures*.h ---'
set strxdep = `grep -l "include 'structures*.h'" *.f`
echo '# Make with : echo `grep -l "include '"'"structures\*.h"'"'" *.f | sed '"'"'s/\.f/.o/'"'"' `'
echo '$(SUBS)('$strxdep'):	structures77.h'
echo ' '

# if (-x Special-Flags) then
#   set flagsw = "$host $mnemonic"
# # set flagsw = "ymp-cray-unicos CRAY"
# # set flagsw = "rs6000-ibm-aix3.2.5 AIX90"
#   set nlines = `./Special-Flags $flagsw | awk 'BEGIN {nlines=1} { nlines++ }; END { print nlines-1 }' `
#   echo "# --- Maksmakfile : $nlines set(s) files needing special compilation ---"
#   echo ' '
#   set i = 0
#   while ($i < $nlines)
#     @ i = $i + 1
#     set line = `./Special-Flags $flagsw | head -$i | tail -1`
#     echo $line | grep :: >/dev/null
#     if ($status != 0) then
#       echo '# ... (warning) the following rule is missing "::"' and will be ignored:
#       echo "#     $line"
#     else
#       set fcf = ` echo $line | sed 's/\(.*\)::\(.*\)/\1/' `
#       set lst = ` echo $line | sed 's/\(.*\)::\(.*\)/\2/' `
#       echo "# ... file(s) $lst"
#       foreach k ($lst)

# 	switch ($k)
# 	  case "[a-l]*":
# 	    echo '$('$ARNAM')'\($k.o\)': '
#             breaksw

# 	  case "[m-z]*":
# 	    if ($?split) then
# 	      echo '$('$ARNAM'2)'\($k.o\)': '
# 	    else
# 	      echo '$('$ARNAM')'\($k.o\)': '
# 	    endif
# 	endsw

# 	echo "	$fcf -c $k.f"

# 	switch ($k)
# 	  case "[a-l]*":
# 	    echo '	ar rv $('$ARNAM')' $k.o
#             breaksw

# 	  case "[m-z]*":
# 	    if ($?split) then
# 	      echo '	ar rv $('$ARNAM'2)' $k.o
# 	    else
# 	      echo '	ar rv $('$ARNAM')' $k.o
# 	    endif
# 	endsw

# 	echo '	rm -f' $k.o
# 	echo ' '
#       end
#     endif
#     echo ' '
#   end
# endif

# --------------- Archive files *.f ---------------
set names = ` /bin/ls -1 *.c *.f `
if ($?split) set names = ` /bin/ls -1 *.c [a-l]*.f `
echo '$('$ARNAM'):	$('$ARNAM')'\($names[1]:r.o\) $BACKSLASH
foreach i ( $names[2-$#names] )
 if ($names[$#names] != $i) echo '	$('$ARNAM')'\($i:r.o\) $BACKSLASH
 if ($names[$#names] == $i) echo '	$('$ARNAM')'\($i:r.o\)
end
echo '	$(RANLIB) $@'
echo ' '

if ($?split) then
  set names = ` /bin/ls -1 *.c [m-z]*.f `
  echo '$('$ARNAM'2):	$('$ARNAM'2)'\($names[1]:r.o\) $BACKSLASH
  foreach i ( $names[2-$#names] )
   if ($names[$#names] != $i) echo '	$('$ARNAM'2)'\($i:r.o\) $BACKSLASH
   if ($names[$#names] == $i) echo '	$('$ARNAM'2)'\($i:r.o\)
  end
  echo '	$(RANLIB) $@'
  echo ' '
endif

echo 'clean: '
echo '	-rm -f $('$ARNAM') Names'
