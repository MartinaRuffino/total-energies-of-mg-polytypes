dnl Process this file with autoconf to produce a configure script.
dnl Revisions
dnl   4 Sep 11  New structures.h
dnl  10 Feb 09  Revised for version 7.  Functionality simplified.
dnl             Machine-dependence of Makefiles was extracted into Make.inc;
dnl             configure no longer creates subdirectory Makefiles.
dnl   8 Jul 01  Revised compiler environment variable from 'F77' to 'FC'

AC_INIT(lmv7.f)

AC_CONFIG_AUX_DIR(misc/)
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_CANONICAL_SYSTEM

LMDIR=`utils/absolute-path .`
PATH=$PATH:$LMDIR
TOPDIR=`pwd`
prefix=$HOME
dnl version=6.17
version=7.0

# Set up shell script to handle any extra code preprocessing
\rm -f config.cleanup; touch config.cleanup; chmod +x config.cleanup
echo '#!/bin/sh  -f' >config.cleanup
echo ' ' >>config.cleanup
cleanup="Notes:"

# --- List relevant environment variables supplied by user ---
if test -n "$MACHINE"; then
   AC_MSG_RESULT([Machine type supplied by environment variable MACHINE=$MACHINE])
else
   AC_MSG_RESULT([configure will find a machine mnemonic (none supplied by environment variable MACHINE)])
fi
if test -n "$CC"; then
   AC_MSG_RESULT([C compiler supplied by environment variable CC=$CC])
else
   AC_MSG_RESULT([configure will find the C compiler (none specified by environment variable CC)])
fi
if test -n "$FC"; then
   AC_MSG_RESULT([Fortran compiler supplied by environment variable FC=$FC])
else
   AC_MSG_RESULT([configure will find the fortran compiler (none specified by environment variable FC)])
fi
if test -n "$LIBLOC"; then
   AC_MSG_RESULT([Libraries specified by supplied by environment variable LIBLOC=$LIBLOC])
dnl else
dnl    AC_MSG_RESULT([])
fi

# --- Find appropriate machine mnemonic for misc/Makemakefile ---
if test ! -z "$MACHINE"; then
  AC_MSG_NONL([does Makemakefile recognize environment variable MACHINE=$MACHINE? ...])
  MNEMONIC=`misc/Makemakefile $MACHINE --check`
  if test -z "$MNEMONIC"; then
    echo  '  '
    echo  '  ' Sorry, misc/Makemakefile failed to recognize machine mnemonic $MACHINE
    echo  '  ' you supplied with environment variable "MACHINE".  Try unsetting it,
    echo  '  ' or invoking configure with \'env MACHINE= ./configure ...\',
    echo  '  ' or updating misc/Makemakefile.
    exit -1
  else
    echo ' yes'
    FCdef=`misc/Makemakefile $MACHINE -defs | egrep '^FC *= *' | tail -1 | sed 's/FC *= *//'`
    CCdef=`misc/Makemakefile $MACHINE -defs | egrep '^CC *= *' | tail -1 | sed 's/CC *= *//'`
  fi

  if (test -z "$FC") ; then
     FC=$FCdef
     AC_MSG_RESULT([Default fortran compiler \"$FC\" corresponds to Machine mnemonic $MACHINE])
  elif (test "$FCdef" != "$FC") ; then
    echo "*** Warning *** you specified both the MACHINE mnemonic ($MACHINE) and fortran compiler ($FC)"
    echo "    but your choice is at variance with expected compiler ($FCdef)"
  fi

  if (test -z "$CC") ; then
     CC=$CCdef
     AC_MSG_RESULT([Default C compiler \"$CC\" corresponding to machine mnemonic $MACHINE])
  elif (test "$CCdef" != "$CC") ; then
    echo "*** Warning *** you specified both the MACHINE mnemonic ($MACHINE) and C compiler ($CC)"
    echo "    but your choice is at variance with expected compiler ($CCdef)"
  fi

# --- Find and check C compiler---
if test -z "$CC"; then
    AC_CHECK_PROG(CC,icc pgcc cc, cc)
    if test -z "$CC"; then
       echo "*** Couldn't find a C compiler ...  aborting"
       exit -1
    fi
else
  AC_MSG_CHECKING([C compiler])
  CCC=
  AC_CHECK_PROG(CCC, $CC, "ok", "no")
  if test "$CCC" = "no"; then
     echo "*** Couldn't find C compiler \"$CC\" ...  aborting"
     exit -1
  fi
fi



# --- Find and check fortran compiler---
if test -z "$FC"; then
    AC_CHECK_PROGS(FC,ifc pgf90 epcf90 fort f95 xlf95 lf95 fort xlf xlf90 f90 cf90 pgf77 fort77 cf77 fl32 af77 xlf77 cf77 cft77 fc frt f77 g77, false)
  if test "$FC" = "false"; then
       echo "*** Couldn't find a fortran compiler ...  aborting"
     exit -1
  fi
else
  FCOMP=
  AC_CHECK_PROG(FCOMP, $FC, "ok", "no")
  if test "$FCOMP" = "no"; then
     echo "*** Couldn't find fortran compiler \"$FC\" ...  aborting"
     exit -1
  fi
fi

# --- Case the mnemonic is NOT specified ---
else
# Try to find the compilers first.
# It would be better to customize this search depending on machine configuration
# but it's too much work.
# --- Find and check C compiler---
  if test -z "$CC"; then
    AC_CHECK_PROGS(CC, icc pgcc cc, false)
    if test "$CC" = "false"; then
       echo "*** Couldn't find C compiler ...  aborting"
       exit -1
    fi
  else
    AC_MSG_CHECKING([C compiler])
    CCC=
    AC_CHECK_PROG(CCC, $CC, "ok", "no")
    if test "$CCC" = "no"; then
       echo "*** Couldn't find C compiler \"$CC\" ...  aborting"
       exit -1
    fi
fi

# --- Find and check fortran compiler---
  if test -z "$FC"; then
    AC_CHECK_PROGS(FC,ifc pgf90 epcf90 fort f95 xlf95 lf95 fort xlf xlf90 f90 cf90 pgf77 fort77 cf77 fl32 af77 xlf77 cf77 cft77 fc frt f77 g77, false)
    if test "$FC" = "false"; then
       echo "*** Couldn't find fortran compiler ...  aborting"
    exit -1
    fi
  else
    FCOMP=
    AC_CHECK_PROG(FCOMP, $FC, "ok", "no")
    if test "$FCOMP" = "no"; then
       echo "*** Couldn't find fortran compiler \"$FC\" ...  aborting"
       exit -1
    fi
  fi

export CC
export FC

  AC_MSG_NONL([Try and identify a machine mnemonic ...])
  MNEMONIC=`misc/Makemakefile -- --check`
  if test -z "$MNEMONIC"; then
    echo  '  Sorry, misc/Makemakefile does not know about this machine.'
    echo  '  Try invoking misc/config.guess.  If that works properly,'
    echo  '  there is a bug in misc/Makemakefile.  Please send the string'
    echo  '  produced by config.guess and a description of the problem'
    echo  '  to mvansch@ca.sandia.gov'
    exit -1
  else
    echo ' ' found $MNEMONIC
  fi
fi

AC_ARG_ENABLE(nc, [  --enable-nc             add noncollinear package], enable_nc=$enableval, enable_nc=no)
if test "$enable_nc" = "yes"; then
  ACX_VERSION_CHECK($version,enable_nc,nc/VERSION)
  if test "$enable_nc" = "yes"; then  extensions="$extensions nc"; fi
fi

AC_ARG_ENABLE(sx, [  --enable-sx             add screened exchange package], enable_sx=$enableval, enable_sx=no)
if test "$enable_sx" = "yes"; then
  ACX_VERSION_CHECK($version,enable_sx,sx/VERSION)
  if test "$enable_sx" = "yes"; then  extensions="$extensions sx"; fi
fi

AC_ARG_ENABLE(optics, [  --enable-optics         add optics package], enable_optics=$enableval, enable_optics=no)
if test "$enable_optics" = "yes"; then
  ACX_VERSION_CHECK($version,enable_optics,optics/VERSION)
  if test "$enable_optics" = "yes"; then  extensions="$extensions optics"; fi
fi

AC_ARG_ENABLE(fp, [  --enable-fp             add fp package], enable_fp=$enableval, enable_fp=no)
if test "$enable_fp" = "yes"; then
  ACX_VERSION_CHECK($version,enable_fp,fp/VERSION)
  if test "$enable_fp" = "yes"; then  extensions="$extensions fp"; fi
fi

AC_ARG_ENABLE(gf, [  --enable-gf             add Green's function package], enable_gf=$enableval, enable_gf=no)
if test "$enable_gf" = "yes"; then
  ACX_VERSION_CHECK($version,enable_gf,gf/VERSION)
  if test "$enable_gf" = "yes"; then  extensions="$extensions gf"; fi
fi

AC_ARG_ENABLE(pgf, [  --enable-pgf            add layer Green's function package], enable_pgf=$enableval, enable_pgf=no)
if test "$enable_pgf" = "yes"; then
  ACX_VERSION_CHECK($version,enable_pgf,pgf/VERSION)
  if test "$enable_pgf" = "yes"; then  extensions="$extensions pgf"; fi
fi

AC_ARG_ENABLE(gwd, [  --enable-gwd            add gw driver package], enable_gwd=$enableval, enable_gwd=no)
if test "$enable_gwd" = "yes"; then
  ACX_VERSION_CHECK($version,enable_gwd,gwd/VERSION)
  if test "$enable_gwd" = "yes"; then  extensions="$extensions gwd"; fi
fi

AC_ARG_ENABLE(gw, [  --enable-gw            add gw driver package], enable_gw=$enableval, enable_gw=no)
if test "$enable_gwd" = "yes"; then enable_gw=yes; fi
if test "$enable_gw" = "yes"; then
  ACX_VERSION_CHECK($version,enable_gw,gw/VERSION)
  enable_gw=yes
  if test "$enable_gw" = "yes"; then  extensions="$extensions gw"; fi
fi

AC_ARG_ENABLE(dmft, [  --enabledmft            add dmft driver package], enable_dmft=$enableval, enable_dmft=no)
if test "$enable_dmft" = "yes"; then
  ACX_VERSION_CHECK($version,enable_dmft,dmft/VERSION)
  if test "$enable_dmft" = "yes"; then  extensions="$extensions dmft"; fi
fi

AC_ARG_ENABLE(tb, [  --enable-tb             add tb package], enable_tb=$enableval, enable_tb=no)
if test "$enable_tb" = "yes"; then
  ACX_VERSION_CHECK($version,enable_tb,tb/VERSION)
  if test "$enable_tb" = "yes"; then  extensions="$extensions tb"; fi
fi

AC_ARG_ENABLE(mol, [  --enable-mol            add mol package], enable_mol=$enableval, enable_mol=no)
if test "$enable_mol" = "yes"; then
  ACX_VERSION_CHECK($version,enable_mol,mol/VERSION)
  if test "$enable_mol" = "yes"; then  extensions="$extensions mol"; fi
fi

AC_ARG_WITH(gcc, [  --with-gcc              use gcc instead of the native compiler cc], ok=$withval, ok=no)
if test "$ok" = "yes"; then
  CC=gcc
fi

# --- Check for fortran compiler extensions ---
AC_MSG_CHECKING([whether fortran compiler is an f90 compiler])
AC_CHECK_FOR_F90
echo $FC_IS_F90
if test "$FC_IS_F90" != "yes"; then
  echo "*** this package requires an F90 compiler ***"
  exit
fi
AC_SUBST(FC_IS_F90)

# --- Find or compile ccomp ---
AC_PATH_PROG(CCOMP, ccomp, "no")
if test "$CCOMP" = "no"; then
   AC_MSG_RESULT([Compiling  ccomp using : \"$CC -Dunix misc/ccomp.c -o ccomp\"])
   $CC -Dunix misc/ccomp.c -o ccomp
   CCOMP=$LMDIR/ccomp
fi
if test "$CCOMP" = "./ccomp"; then CCOMP=$LMDIR/ccomp; fi
echo CCOMP=$CCOMP >>config.cleanup
CCOMPDIR=`utils/absolute-path $CCOMP`
AC_SUBST(CCOMPDIR)

# --- Find slatsm.a, if not supplied ---
if test -z "$LIBSLA"; then : ; else
  AC_MSG_RESULT([Using LIBSLA = $LIBSLA supplied by environment variable ])
fi

# Look in relative path first
if test -z "$LIBSLA"; then
AC_CHECK_FILES(../slatsm/slatsm.a, try=yes , try=no)
if test "$try" = "yes"; then
  LIBSLA="../slatsm/slatsm.a"
  LIBSLA_MPI="../slatsm/slatsm-MPI.a"; fi
fi

# Look under home directory path next
if test -z "$LIBSLA"; then
AC_CHECK_FILES($HOME/slatsm/slatsm.a, try=yes , try=no)
if test "$try" = "yes"; then 
  LIBSLA=$HOME/slatsm/slatsm.a
  LIBSLA_MPI=$HOME/slatsm/slatsm-MPI.a
  fi
fi

# Look in cwd next
if test -z "$LIBSLA"; then
AC_CHECK_FILES(./slatsm/slatsm.a, try=yes , try=no)
if test "$try" = "yes"; then 
  LIBSLA="./slatsm/slatsm.a"
  LIBSLA_MPI="./slatsm/slatsm-MPI.a"
  fi
fi

if test -z "$LIBSLA"; then
  AC_MSG_RESULT([*** Warning *** configure cannot find slatsm library.
Set variable LIBSLA in Make.inc manually. ])
else
if test ! -r "$LIBSLA"; then
  AC_MSG_RESULT([*** Warning *** archive \"$LIBSLA\" unreadable !])
fi
fi

AC_MSG_RESULT([configure using LIBSLA = $LIBSLA ])
AC_MSG_RESULT([                LIBSLA_MPI = $LIBSLA_MPI ])

if test -z "$LIBLOC"; then
  AC_MSG_RESULT([*** Warning *** no environment variable LIBLOC.
Set variable LIBLOC in Make.inc manually. ])
fi

# Math libraries
AC_MSG_RESULT([configure using LIBLOC = $LIBLOC ])
AC_MSG_RESULT([                LIBLOC_MPI = $LIBLOC_MPI ])

# --- Fatal error if misc/Makemakefile doesn't return normally ---
AC_MSG_CHECKING([whether compiler flags can be generated])
if (! eval misc/Makemakefile $MNEMONIC -defs >/dev/null 2>&1) ; then
  AC_MSG_ERROR( [ ]
  script failed to generate compiler flags for machine mnemonic $MNEMONIC with compilers $FC and $CC .
  This script returned with nonzero exit:
    misc/Makemakefile $MNEMONIC -defs 
  You may need to modify misc/Makemakefile to handle machine mnemonic $MNEMONIC .)
else
  echo ... ok
fi

# --- Create mods.serial directory and copy files ---
AC_MSG_CHECKING([whether to create mods.serial directory])
if test -d mods.serial; then 
   AC_MSG_RESULT([already exists])
else
   AC_MSG_RESULT([creating directory])
   mkdir mods.serial
fi
LIBSLADIR=`echo $LIBSLA | sed 's:/slatsm.a::'`
AC_MSG_RESULT([Populating the mods.serial directory])
cd mods.serial
if test ! -e "./mpi.mod"; then
ln -s $LIBSLADIR/mpi.mod
else
echo mpi.mod already exists ... do not modify
fi
if test ! -e "./mod_ctx.mod"; then
ln -s $LIBSLADIR/mod_ctx.mod
else
echo mod_ctx.mod already exists ... do not modify
fi
if test ! -e "./fcuda.mod"; then
ln -s $LIBSLADIR/fcuda.mod
else
echo fcuda.mod already exists ... do not modify
fi
if test ! -e "./fmagma.mod"; then
ln -s $LIBSLADIR/fmagma.mod
else
echo fmagma.mod already exists ... do not modify
fi
if test ! -e "./structures.mod"; then
ln -s $LIBSLADIR/structures.mod
else
echo structures.mod already exists ... do not modify
fi
if test ! -e "./fmagma.mod"; then
ln -s $LIBSLADIR/fmagma.mod
else
echo fmagma.mod already exists ... do not modify
fi
if test ! -e "../subs/pointers.mod"; then
ln -s ../subs/pointers.mod
else
echo pointers.mod already exists ... do not modify
fi
cd ..

# --- Check whether to add zero's to output file  ---
AC_MSG_CHECKING([whether floating point formats are of the IBM type])
case "${host}" in
  *aix* ) echo yes
          ADD0=--add0;;
      * ) echo no;;
esac
AC_MSG_CHECKING([whether floating point formats are of the gnu fortran type])
case "$MACHINE" in
   OSXI ) echo yes
          POSZER=--poszer;;
      * ) echo no;;
esac
AC_SUBST(ADD0)
AC_SUBST(POSZER)

# --- Minimum command-line arguments so fortran compile/link works sans error ---
FCARGS=
case "${MNEMONIC}" in

  SGI* ) FCARGS=-64;;

  HP ) FCARGS=+U77;;

  OSXI64 ) FCARGS="-arch x86_64";;

esac

# --- Reset some fortran branches, depending on available compiler extensions ---
# ... 9 Feb 09 Always assume F90 compiler
# ... 9 Jul 03 better regular expressions
# ... 4 Jul 01 Use f90 extensions if compiler is an f90 compiler

# --- See whether libraries specified in LIBLOC exist ---
if test -n "$LIBLOC" ; then
  AC_MSG_RESULT([Checking that files specified in LIBLOC (\"$LIBLOC\") are present])
  for llocl in $LIBLOC; do
    case "$llocl" in
      -* ) ;;

      * ) if test -r "$llocl"; then
            echo ' '>/dev/null
          else
            AC_MSG_RESULT([File $llocl from LIBLOC not readable ... configure aborting])
            exit
	  fi ;;
    esac
  done
fi

# --- Miscellaneous checks ---
if (test "$enable_fp" = "yes") || (test "$enable_gf" = "yes"); then
  enable_fftz3=yes
else
  enable_fftz3=no
fi
if test "$enable_fftz3" = "yes"; then
  have_fftz3=no
  ACX_WARN_LINK_FAIL(fftz3,[$LIBSLA $LIBLOC],"print",["      " subroutine fmain])
fi

if test "$FC" = "pgf77"; then
  AC_MSG_CHECKING([compatibilities with pgf77 compiler])
  AC_MSG_CHECKING([for --enable-fp])
  if test "$enable_fp" = "yes"; then
    AC_MSG_RESULT([yes])
    AC_MSG_RESULT([Aborting ...  FP code not compatible with pgf77... use pgf90 or g77])
    exit -1
  else
    AC_MSG_RESULT([no])
  fi
fi


# still in progress
# AC_CHECK_FOR_COMPILER_EXTENSIONS(enable_fp)
# exit
# if test "$FC_IS_F90" = "yes"; then : ; else
# fi
# if test "$FC_AUTOARRAY" = "yes"; then : ; else
# fi

# --- Create Make.inc.in ---
AC_SUBST(LIBSLA)
AC_SUBST(LIBSLA_MPI)
AC_SUBST(LIBLOC)
AC_SUBST(LIBLOC_MPI)
AC_SUBST(LMDIR)
AC_SUBST(F90M)

AC_MSG_RESULT([Creating Make.inc.in ...])
AC_MSG_RESULT([misc/Makemakefile $MNEMONIC --inc -defs --module '$TOPDIR/mods.serial' > Make.inc.in])
misc/Makemakefile $MNEMONIC --inc -defs --module '$(TOPDIR)/mods.serial' >Make.inc.in

dnl echo "# --- Path for various utilities ---" >>Make.inc.in
dnl echo "CCOMP = $CCOMP" >>Make.inc.in
dnl echo "# --- Compiler extensions ---" >>Make.inc.in
dnl echo 'FC_IS_F90 = @FC_IS_F90@' >>Make.inc.in
dnl # Later, Make.inc will be overwritten by configure, but some stuff is needed out of it meanwhile
dnl cp Make.inc.in Make.inc

# -------------- Setup for Makefile.in -----------
case  $version  in
  6*) makeargs="-cp -v6";
      AC_MSG_RESULT([Creating Makefile.in for version 6 ...])
  ;;
   *) makeargs="-cp -v7";
      AC_MSG_RESULT([Creating Makefile.in for version 7 ...])
  ;;
esac
# Make a temporary copy of MakeMainMakefile since ccomp may not be in path
cat MakeMainMakefile | sed s:ccomp:$CCOMP: >MakeMainMakefile~
chmod +x MakeMainMakefile~
AC_SUBST(RANLIB)
makefiles="Makefile"
AC_MSG_RESULT([Creating file Makefile.in using:
  MakeMainMakefile~ $makeargs $extensions :])
MakeMainMakefile~ $makeargs $extensions >Makefile.in

# Makefiles for */subs.a no longer created by configure
# # 18 Dec 00 Split archive on the HP
# split_subs=no
# # case "${MNEMONIC}" in
# #   HP* ) split_subs=yes;;
# # esac
#
# if test "$split_subs" = "yes"; then
#   AC_MSG_RESULT([splitting library subs/subs.a in two parts (subs/subs.a and subs/subs2.a)])
#   LIBSUBS="$LIBSUBS subs/subs.a subs/subs2.a"
# else
#   LIBSUBS="$LIBSUBS subs/subs.a"
# fi

AC_SUBST(LIBSUBS)
AC_SUBST(LMDIR)
AC_SUBST(SHELL)
ACX_ZDIFF_KSH(testing,$host)

# How the make dependency is handled depends on whether we are using GNU make
if test "`make -v xx 2>&1 | head -1 | awk '{print toupper($1)}'`" = GNU;
  then DEP_RULE='%:	%'
else
  DEP_RULE='$$@'
fi
AC_SUBST(DEP_RULE)

case  $version  in
  6*) 
  ;;
   *) enable_v7input=yes
  ;;
esac
enable_subs=yes
# if test "$split_subs" = "yes"; then
#   ACX_MAKE_ARCHIVE_LIBRARYS(subs)
# else
#   ACX_MAKE_ARCHIVE_LIBRARY(subs)
# fi
ACX_MAKE_ARCHIVE_LIBRARY(v7input)
ACX_MAKE_ARCHIVE_LIBRARY(subs)
ACX_MAKE_ARCHIVE_LIBRARY(nc)
ACX_MAKE_ARCHIVE_LIBRARY(sx)
ACX_MAKE_ARCHIVE_LIBRARY(optics)
ACX_MAKE_ARCHIVE_LIBRARY(gf)
ACX_MAKE_ARCHIVE_LIBRARY(pgf)
ACX_MAKE_ARCHIVE_LIBRARY(fp)
ACX_MAKE_ARCHIVE_LIBRARY(tb)
ACX_MAKE_ARCHIVE_LIBRARY(mol)
ACX_MAKE_ARCHIVE_LIBRARY(gwd)
ACX_MAKE_ARCHIVE_LIBRARY(gw)
ACX_MAKE_ARCHIVE_LIBRARY(dmft)

#AC_OUTPUT(Makefile, [echo first `pwd`], [echo again `pwd`])
#AC_OUTPUT(Make.inc $makefiles)
AC_OUTPUT(Make.inc Makefile)

# --- Ending notes ---
if (test "$enable_fftz3" = "yes") && (test "$have_fftz3" = "no"); then
  echo ' '
  echo '*Warning : libary path does not contain the FFT routine called by'
  echo ' fftz3 in the slatsm library, which is required for this package.'
  echo ' Revisit how fftz3 in the slatsm library is compiled.'
fi

if (test "$FC_IS_F90" = "yes") || (test "$FC_AUTOARRAY" = "yes"); then : ; else
  echo ' '
  echo '*Warning : Compiler does not appear to be an F90 compiler, which is required/'
fi

AC_MSG_RESULT([
  *Adapt subs/Make.patch with your local location of the XC library, or remove the xc_lib capability with:
     cd subs
     mv xc_libxc.f xx.f
     ccomp -uLIBXC xx.f xc_libxc.f 
     rm xx.f])

if test "$enable_tb" = "yes"; then
AC_MSG_RESULT([
  *Populate the directory mods.serial/ with these modules from the slatsm library:
   fcuda.mod  fmagma.mod  iso_c_binds.mod  mod_crs.mod  mod_ctx.mod  mod_proc_stat.mod  mpi.mod  posix.mod  structures.mod

  *Adapt Make.inc to include flag indicating that modules are in '$TOPDIR/mods.serial', e.g.
   the Intel compiler should have
     -module '$TOPDIR/mods.serial'
   and gnu fortran
     -I '$TOPDIR/mods.serial'
   It may be that Make.inc already has done this ... but please check])

fi


