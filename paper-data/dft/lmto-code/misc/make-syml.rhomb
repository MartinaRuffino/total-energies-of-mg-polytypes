#!/bin/tcsh

set s = 1

  if ($#argv > 0) goto defaults

message:
  echo  'usage: one of'
  echo  '       make-syml.rhomb [-s=#] gamma'
  echo  '       make-syml.rhomb [-s=#] -r=#'
  echo  '       gamma is rhombohedral angle (degrees)'
  echo  '       s is an optional scale factor that scales plat'
  echo  '       This script generates file plat.tmp, which see for meaning of r'
  exit

defaults:

  set arg1 = $1; shift
  switch ($arg1)

    case "-s=*":
    set s = `echo $arg1 | sed s/-s=//`  
    set s = `dval -fd8 0+$s`  
    goto defaults

    case "-r=*":
    set r = `echo $arg1 | sed s/-r=//`  
    set cg = `dval -fd8 r=$r  cg='(2*r+1)/(2-r*r)' cg`
    dval -a '... make gam from r : cos(gam) = %d' cg=$cg cg
    if (`dval cg=$cg 'abs(cg)>1'` == 0) then
      set gam = `dval -fd8 r=$r  cg='(2*r+1)/(2-r*r)' 'gam=acos(cg)' gam`
    else
      echo '... use cos(gam) directly ... |cos(gam)| > 1 '
      set lcosh
    endif
    breaksw

    default:
    set gam = `dval -fd8 "$arg1*pi/180"`
  endsw

echo  ... creating file plat.tmp
if ($?lcosh) then
  dval -a '... cos(gam) = %,7d  r = %,7d  s = %,7d' s=$s cg=$cg 'r=-1/cg+sqrt(1/cg^2-(1/cg-2))'  cg r s
cat >plat.tmp <<END
% cols 3
% const cg=$cg r=-1/cg+sqrt(1/cg^2-(1/cg-2))
% const g=(1+r^2/2)/(2+r)^2
% save r g
r 1 1
1 r 1
1 1 r
END

else
  dval -a "... gam = %d (degrees) %,7d (radians)   r = %,7d " s=$s "gam=$gam" "180/pi*gam" $gam 'cg=cos(gam)' 'r=-1/cg+sqrt(1/cg^2-(1/cg-2))' r s
cat >plat.tmp <<END
% cols 3
% const gam=$gam cg=cos(gam) r=-1/cg+sqrt(1/cg^2-(1/cg-2))
% const g=(1+r^2/2)/(2+r)^2
% save r g
r 1 1
1 r 1
1 1 r
END

endif

# symmetry points are as follows:
#Gamma = [0,0,0]
#T = [1/2,1/2,1/2]  (center of trigonal face)
#L = [0,  1/2,0]    (center of hexagonal face)
#X = [0,  1/2,1/2]
#W = [g,  1-g,1/2]
#L'= [-1/2,0, 0]
#U = [g/2+1/4, 1-g,     g/2+1/4]
#K = [0,       3/4-g/2, g/2+1/4]
#with g = (1+r^2/2)/(2+r)^2


set norm = "-p -xe -csum -e1 sqrt(x1)"
set normalize = "-p $norm -ccat -e3 x1/x4 x2/x4 x3/x4"

mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 -p -sub 2,2,1,3 -a q2 q2 -s.5 q3 -s.5 -+ q1 -s0 -ccat | tail -1 | awk '{print 41 $0 "   X to G"}'
mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 -p -sub 2,2,1,3 -a q2 q1 -s0 q2 -s.5 -ccat | tail -1 | awk '{print 41 $0 "   G to L"}' 
mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 -p -sub 2,2,1,3 -a q2 q2  -s.5 q1 -sg/2+1/4 q2 -s1-g q3 -sg/2+1/4 -+ -+ -ccat | tail -1 | awk '{print 41 $0 "   L to U"}' 
mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 -p -sub 2,2,1,3 -a q2 q1 -sg/2+1/4 q2 -s1-g q3 -sg/2+1/4 -+ -+ -tog -rsum -s.5 -ccat | tail -1 | awk '{print 41 $0 "   U to T"}' 
echo 0  0 0 0  0 0 0

# Cracknell:
# F = (1/2,1/2,0)   or F=(0,1/2,-1/2) depending on size of rhomb angle
echo "Bandley and Cracknell for R-3m (p 107), a < sqrt(2) c:  G = (0,  0,  0)  F = (1/2,1/2,0)   L = (0,  1/2,0)  Z = (1/2,1/2,1/2)"

mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3  q1 -s0        q1 q2 -+ -s.5       -ccat | tail -1 | awk '{print 41 $0 "   G to F"}'
mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3  q1 q2 -+ -s.5 q2 -s.5             -ccat | tail -1 | awk '{print 41 $0 "   F to L"}'
mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3  q2 -s.5       q1 q2 q3 -+ -+ -s.5 -ccat | tail -1 | awk '{print 41 $0 "   L to Z"}'
mcx -f6f12.6 plat.tmp -s$s -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3  q1 q2 q3 -+ -+ -s.5 q1 -s0        -ccat | tail -1 | awk '{print 41 $0 "   Z to G"}'
echo 0  0 0 0  0 0 0


# use the following if R-3m cell.  plat.tmp should be on disk (P1 = 1st vector; P2 = 2nd vector , P3 = 3rd vector)
#    mcx -f6f12.6 plat.tmp -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 q1 -s0 q1 -s.5 q2 -s.5 -+ -ccat | tail -1 | awk '{print 41 $0 "   G to F"}'
#    mcx -f6f12.6 plat.tmp -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 q1 q2 -+ -s.5 -p q3 -s.5 -+ -ccat | tail -1 | awk '{print 41 $0 "   F to L"}'
#    mcx -f6f12.6 plat.tmp -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 q1 q2 q3 -+ -+ -s.5  q3 -s.5 -ccat | tail -1 | awk '{print 41 $0 "   L to Z"}'
#    mcx -f6f12.6 plat.tmp -i -p -sub 1,1,1,3 -a q1 -p -sub 2,2,1,3 -a q2 -p -sub 3,3,1,3 -a q3 q3 -s.5 q1 -s0 -ccat | tail -1 | awk '{print 41 $0 "   Z to G"}'
#    echo 0  0 0 0  0 0 0
