#!/bin/tcsh

set testfile = $0
set testdir = $testfile:h
set topdir  = `cd $testdir/../..; pwd`
set path = ($topdir $topdir/utils $path)
set mcx = `which mcx`
if (-x "$mcx") then
  if `$mcx --h |& grep mc | grep vsn | awk '{print ($7 == "(vsn" && ($8 * 1 >= 1.04))}'` set have_mc
endif
if (! $?have_mc) then
  echo "test.ncgfmst (abort) : missing mcx"
  exit -1
endif
set failed = xx
set n = 0

while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")
  set arg1 = $1; shift
  switch ($arg1)
    case "--clean":
      set clean
      breaksw
    default:
      echo unrecognized switch $arg1
      goto usage
  endsw
end

if ($?clean > 0) then
echo "   "  $topdir/gf/test/test.gf --quiet --clean fept 7 '> /dev/null'
            $topdir/gf/test/test.gf --quiet --clean fept 7  > /dev/null
touch 0    
echo "    rm -f [012345]"
          rm -f [012345]
exit
endif


# ------------------- 1 ------------------
@ n = $n + 1
echo "    $n. noncollinear GF (180 rot of one Euler angle) w/ downfolding in various screening transformations"
echo "   "  $topdir/gf/test/test.gf --quiet fept 7 '> /dev/null'
$topdir/gf/test/test.gf --quiet fept 7 > /dev/null
# Downfolding is not implemented for gamma=4,5
set lst = (0 1 2)
echo '    do for gam = ' $lst ': lmgf fept -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=1 --pr31,30 -vgamma=$gam --quit=rho > $gam'
rm -f $lst
foreach gam ($lst)
rm -f vshft.fept mixm.fept
lmgf fept -vnk=8 -vnc=1 -vntht=6 -vnit=1 --pr31,30  -vidxp=2 -vgamma=$gam --quit=rho > $gam
end
set tolq = `grep DQ  $lst  | vextract . DQ | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
set tole = `grep sumev=  $lst | vextract . sumev | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
echo "    RMS DQ for $lst : " `grep DQ  $lst  | vextract . DQ` '  ' fluctuation $tolq
echo "    sumev  for $lst : " `grep sumev= $lst | vextract . sumev` '  ' fluctuation $tole
set tol = `echo $tole $tolq | mcx . -csum -w:nohead .`
if (`echo $tol 0 | awk -v tol=.000001 '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
  echo "   " Noncollinear GF test w/ pf dnfolding for multiple screening transformations PASSED
else
  set failed = ($failed $n)
  echo "   " Noncollinear GF test w/ pf dnfolding for mutiple screening transformations FAILED
endif
echo

# ------------------- 2 ------------------
@ n = $n + 1
echo "    $n. noncollinear GF (180 rot of one Euler angle) in various screening transformations, no downfolding"
echo '    Note: f orbitals are not downfolded.  If downfolded, RMS DQ should be very small.'
# The next instruction creates atom files with fully rel matrix elements
echo "   "  $topdir/gf/test/test.gf --quiet fept 7
$topdir/gf/test/test.gf --quiet fept 7 > /dev/null

echo '    do for gam = 0 1 2 4 5: lmgf fept -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=1 --pr31,30 -vgamma=$gam --quit=rho  > $gam'
rm -f 0 1 2 4 5
foreach gam (0 1 2 4 5)
rm -f vshft.fept mixm.fept
lmgf fept -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=1 --pr31,30 -vgamma=$gam --quit=rho > $gam
end

set lst = (0 1 2 4 5)
set tolq = `grep DQ  $lst  | vextract . DQ | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
set tole = `grep sumev=  $lst | vextract . sumev | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
echo "    RMS DQ for $lst : " `grep DQ  $lst  | vextract . DQ` '  ' fluctuation $tolq
echo "    sumev  for $lst : " `grep sumev= $lst | vextract . sumev` '  ' fluctuation $tole
set tol = `echo $tole $tolq | mcx . -csum -w:nohead .`
echo "   " Deviation in sumev for 5 tests averaged relative the beta=alpha result: $tol
if (`echo $tol 0 | awk -v tol=.000001 '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
  echo "   " Noncollinear GF test for multiple screening transformations PASSED
else
  set failed = ($failed $n)
  echo "   " Noncollinear GF test for multiple screening transformations FAILED
endif
echo

# The next tests do not pass ... need some clarity about the role of orbital rotations

# # ------------------- 3 ------------------
# @ n = $n + 1
# echo "    $n. noncollinear GF (180 rot of one Euler angle) fully relativistic in various screening transformations"
# echo '    symmetry does not work here, so use --nosym'
# echo '    For standalone test that does not depend on the preceding, first invoke the script on the next line (omitted now)'
# echo "   "  $topdir/gf/test/test.gf --quiet fept 7
# # $topdir/gf/test/test.gf --quiet fept 7 > /dev/null
# touch  0-frnc-job1
# rm -f  ?-frnc-job1
# echo '    do for gam = 0 1 2 4 5: lmgf fept -vgamma=$gam -vrel=2 -vgfmod=1 -vnk=8 -vnc=1 -vntht=6 -vnit=1 --pr31,30 -vidxf=1 --iactiv=no -vbegmom=2 -ef=-0.0695415 --quit=rho --nosym > $gam-frnc-job1'
# foreach gam (0 1 2 4 5)
# rm -f mixm.fept vshft.fept save.fept eula.fept
# lmgf fept -vgamma=$gam -vrel=2 -vgfmod=1 -vnk=8 -vnc=1 -vntht=6 -vnit=1 --pr31,30 -vidxf=1 --iactiv=no -vbegmom=2 -ef=-0.0695415 --quit=rho --nosym > $gam-frnc-job1
# end
# set tolq = `grep DQ  ?-frnc-job1  | vextract . DQ | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
# set tole = `grep sumev=  ?-frnc-job1 | vextract . sumev | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
# set toll = `grep 'L+ - L-'  ?-frnc-job1 | grep -v '  2 ' | awk '{print $NF}' | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))' -rsum -w:nohead .`
# echo "    RMS DQ for ?-frnc-job1 : " `grep DQ  ?-frnc-job1  | vextract . DQ` '  ' fluctuation $tolq
# echo "    sumev  for ?-frnc-job1 : " `grep sumev= ?-frnc-job1 | vextract . sumev` '  ' fluctuation $tole
# echo "    L+ - L- on Fe for the fr-nc, mode 1 calculations :  " `grep 'L+ - L-'  ?-frnc-job1 | grep -v '  2 ' | awk '{print $NF}'` '  ' fluctuation $toll
# set tol = `echo $tole $tolq $toll | mcx . -csum -w:nohead .`
# if (`echo $tol 0 | awk -v tol=.000001 '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
#   echo "   " fully relativistic NC GF test mode 1 PASSED
# else
#   set failed = ($failed $n)
#   echo "   " fully relativistic NC GF test mode 1 FAILED
# endif
# echo

# # ------------------- 4 ------------------
# @ n = $n + 1
# echo "    $n. noncollinear GF+SO (180 rot of one Euler angle), f not downfolded, in various screening transformations"
# echo '    symmetry does not work here, so use --nosym'
# echo '    For standalone test that does not depend on the preceding, first invoke the script on the next line (omitted now)'
# echo "   "  $topdir/gf/test/test.gf --quiet fept 7
# # $topdir/gf/test/test.gf --quiet fept 7 > /dev/null
# touch  0-sonc-job1
# rm -f  ?-sonc-job1
# echo '    Set up SO matrix elements'
# echo '    lmgf fept -vso=1 -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=0 --pr31,30 -vgamma=$gam --quit=rho > /dev/null'
# lmgf fept -vso=1 -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=0 --pr31,30 -vgamma=$gam --quit=rho > /dev/null
# echo '    do for gam = 0 1 2 4 5: lmgf fept -vso=1 -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=1 --pr31,30 -vgamma=$gam --quit=rho -ef=-0.0682034 --nosym > $gam-sonc-job1'
# foreach gam (0 1 2 4 5)
# rm -f vshft.fept mixm.fept
# lmgf fept -vso=1 -vnk=8 -vnc=1 -vidxf=1 -vntht=6 -vnit=1 --pr31,30 -vgamma=$gam --quit=rho -ef=-0.0682034 --nosym > $gam-sonc-job1
# end

# set tolq = `grep DQ  ?-sonc-job1 | vextract . DQ | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
# set tole = `grep sumev= ?-sonc-job1 | vextract . sumev | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
# set tols = `grep SOC ?-sonc-job1 | awk '{if (NR%3 == 0) {print $6}}' | mcx . -p -s1/nr -rsum -av avg -pop -e1 'sqrt(((x1-avg+1e-9)^2/nr))'  -rsum -w:nohead .`
# echo "    RMS DQ for ?-sonc-job1 : " `grep DQ  ?-sonc-job1  | vextract . DQ` '  ' fluctuation $tolq
# echo "    sumev  for ?-sonc-job1 : " `grep sumev= ?-sonc-job1 | vextract . sumev` '  ' fluctuation $tole
# echo "    SOC12 on Pt for each of repsns: " `grep SOC ?-sonc-job1 | awk '{if (NR%3 == 0) {print $6}}'` '  ' fluctuation $tols
# set tol = `echo $tole $tols $tolq | mcx . -csum -w:nohead .`
# if (`echo $tol 0 | awk -v tol=.000001 '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
#   echo "   " Noncollinear GF+SO test for multiple screening transformations PASSED
# else
#   set failed = ($failed $n)
#   echo "   " Noncollinear GF+SO test for multiple screening transformations FAILED
# endif
# echo

if ($#failed <= 1) then
  echo "    all nc GF tests PASSED"
else
  shift failed
  echo "    the following nc GF tests FAILED:  $failed"
endif
echo
