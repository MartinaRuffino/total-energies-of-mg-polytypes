#!/bin/tcsh -f
# Gets output for charge (gf,ReZ)  and exchange (gf,reZ), and stores integrals
# Creates files:
#   dj0dz  = dj0/dz at tabulated energies
#            cols 1..2 are energies and 3,4,... are dj0/dz for sites 1,2,..
#   qz   = integrated charge at tabulated energies
#            cols 1 is Re z  and 2 is total integrated charge
#   j0z = j(z) at tabulated energies
#            cols 1 is Re z  and 2,3,... are int dj0/dz for sites 1,2,..
#   qj0z  combines qz and j0z into one file
# Requires shell scripts in same directory as this one:
#   getJ0z extracts dj/dz
#   intJ0z integrates dj/dz

set testfile = $0
set testdir = $testfile:h
set nimp=1
set facJ0
if `mcx --h |& head -1 | awk '{print ($7 == "(vsn" && ($8 * 1 >= 1.04))}'` set have_mc

options:
switch ($1)
  case "-add=*":
    set addfile=`echo $1 | sed s/-add=//` ; shift; goto options

  case "-job10":
    set job10; shift; goto options

  case "-ef=*":
    set efermi = $1; shift; goto options

  case "-ef0=*":
    set ef0 = $1; shift; goto options

  case "-nimp=*":
    set nimp=`echo $1 | sed s/-nimp=//` ; shift; goto options

  case "-facJ0=*":
    set facJ0 = $1; shift; goto options

  case "-*":
     echo 'getJq0z : no switch "'$1'"' ... aborting ; exit -1
endsw

if ($#argv == 0) goto usage
if ($#argv != 2) then
  echo getJq0z : missing or extraneous arguments; goto usage
endif
if (! -f $1) then
  echo file \"$1\" not readable ... aborting; goto usage
endif
if (! -f $2) then
  echo file \"$2\" not readable ... aborting; goto usage
endif
if ($?efermi) then
else if ($?ef0) then
  set efermi = -ef=`echo $ef0 | sed s/-ef0=//`
else
  echo  abort ... no fermi level supplied
  exit -1
endif

# ... make qz
echo "getJq0z : extract qz from file $2 into file qz"
echo '#   z       q-z0' >qz
if (! $?ef0) then
  if ( $?have_mc == 0 ) then
    grep '  t  ' $2 | awk '{print $1,$5}' >>qz
  else
    echo '#      z          q-z0' >qz
  if ($?efermi) then
    echo "          grep '  t  ' $2 | awk '{print "'$1,$5'"}' |mcx . -e2 x1 x2/$nimp -p -intrp `echo $efermi | sed s/-ef=//` -av:1,2 q0 -pop -e2 x1 x2-q0 >>qz"
    grep '  t  ' $2 | awk '{print $1,$5}' |mcx . -e2 x1 x2/$nimp -p -intrp `echo $efermi | sed s/-ef=//` -av:1,2 q0 -pop -e2 x1 x2-q0 >>qz
  else
    grep '  t  ' $2 | awk '{print $1,$5}' |mcx . -e2 x1 x2/$nimp >>qz
  endif
  endif
else
  echo "          grep '  t  ' $2 | awk '{print "'$1,$5'"}' |mcx .  -e2 x1-`echo $ef0 | sed s/-ef0=//` x2/$nimp >>qz"
   grep '  t  ' $2 | awk '{print $1,$5}' |mcx .  -e2 x1-`echo $ef0 | sed s/-ef0=//` x2/$nimp -p -intrp 0 -av:1,2 q0 -pop -e2 x1 x2-q0 >>qz
endif

# ... make dj/dz
if ($?job10) then
  if (! $?ef0) then
    set e0=0
  else
   set e0=`echo $ef0 | sed s/-ef0=//`
  endif
  echo "        : extract dj/dz from $1 into file dj0dz, using:"
  echo "            $testdir/getJ0z -job10 $1 | mcx -ff12.6,f8.1,100f12.3 . qz -shft=$e0 -e2 x1 0 -tog -ccat >dj0dz"
                    $testdir/getJ0z -job10 $1 | mcx -ff12.6,f8.1,100f12.3 . qz -shft=$e0 -e2 x1 0 -tog -ccat >dj0dz
else
  echo "        : extract dj/dz from $1 into file dj0dz, using:"
  echo "            $testdir/getJ0z $1  >dj0dz"
  echo "# Energy derivative of J0"  >dj0dz
  echo "#     Energy(Ry)   J0'(mRy)"  >>dj0dz
  $testdir/getJ0z $1 >>dj0dz
endif

# ... make j0z
if ( $?have_mc != 0 ) then
echo "        : integrate j0z from file dj0dz (file j0z), using"
set j0
if ($?addfile) then
  set j0 = j0
  if (! $?ef0) set ef0
  $testdir/getJ0z -nodz $addfile >$j0
  $testdir/intJ0z $facJ0 $efermi $ef0 -add=j0 dj0dz >j0z
else
  if (! $?ef0) set ef0
# echo $testdir/intJ0z $facJ0 $efermi $ef0 dj0dz
  echo "            $testdir/intJ0z $facJ0 $efermi $ef0 dj0dz >j0z"
  $testdir/intJ0z $facJ0 $efermi $ef0 dj0dz >j0z
  echo "        : combine q and j0 using:"
  echo "             mcx -f2f11.6,20f9.1 qz -intrp "'`'"awk '"'{if ($2 == "mcx") print $20}'"' j0z"'`'" j0z -coll 2:nc -ccat >qj0z"
                  mcx -f2f11.6,20f9.1 qz -intrp `awk '{if ($2 == "mcx") print $20}' j0z` j0z -coll 2:nc -ccat >qj0z
#   echo "        : alternatively you might use:"
#   echo "             mcx -f2f11.6,20f9.1 qz -intrp "'`'"awk '"'{if ($2 == "mcx") print $20}'"' j0z"'`'" -p -inc x1==0 -coll 2 -av q0 -pop -e2 x1 x2-q0 j0z -coll 2:nc -ccat >qj0z"
endif
endif
echo ' '

exit
usage:
echo "usage: getJq0z [-switches] output-from-exc(J,ReZ) output-from-gf(q,ReZ)"
echo "      *getJq0z creates these files:"
echo "               qz     integrated charge at tabulated energies as a function of E-ef0."
echo "                      if ef0 is not input, 0 is used for default (switch -ef0)"
echo "               dj0dz  dj0/dz at tabulated energies."
echo "                      cols 3,4,... are dj0/dz for sites 1,2,.."
echo "               j0z    j(z) (=int dj0dz) at tabulated energies."
echo "               qj0z   a concatenation of j0z and qz into one file."
echo " "
echo "      *File output-from-exc(J,ReZ) can be from GF job 10 or job 11 (switch -job10)"
echo "         By default, data is assumed to be extracted from job 11 output."
echo "         If data is to be extracted from job 10 output, use -job10."
echo " "
echo "      *Switches:"
echo "               -ef0=#    see description of qz above"
echo "               -ef=#     Like ef0, except energy axis (absiccsa) is not shifted"
echo "               -job10    Assume output is from GF job 10 (default assumes job 11)"
echo "               -facJ0=#  Use # to scale j0(z).  Default scale is 1K."
echo "                         If # is 1000, j0(z) is in microRy."
echo " "
echo "      *Example:"
echo "        -Use the following for EMESH in your input file:"
echo "           EMESH=12+1 2 {ef-.001*6} {ef+.001*6} .001 .5"
echo "         (Variable ef should be Fermi energy.  For definiteness, assume ef=0.0776.)"
echo "        -Run lmgf, MODE=1  and send output to file out.job1"
echo "        -Run lmgf, MODE=10 and send output to file out.job10"
echo "        -Do:"
echo "           gf/test/getJq0z -facJ0=1000 -ef0=0.0776 -job10 out.job10 out.job1"
echo "         Look at file qj0z."
exit -1
